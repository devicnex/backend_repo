
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model Pet
 * 
 */
export type Pet = $Result.DefaultSelection<Prisma.$PetPayload>
/**
 * Model Curiosidade
 * 
 */
export type Curiosidade = $Result.DefaultSelection<Prisma.$CuriosidadePayload>
/**
 * Model Vacina
 * 
 */
export type Vacina = $Result.DefaultSelection<Prisma.$VacinaPayload>
/**
 * Model Exame
 * 
 */
export type Exame = $Result.DefaultSelection<Prisma.$ExamePayload>
/**
 * Model Publicacoes
 * 
 */
export type Publicacoes = $Result.DefaultSelection<Prisma.$PublicacoesPayload>
/**
 * Model Agendamentos
 * 
 */
export type Agendamentos = $Result.DefaultSelection<Prisma.$AgendamentosPayload>
/**
 * Model Servicos
 * 
 */
export type Servicos = $Result.DefaultSelection<Prisma.$ServicosPayload>
/**
 * Model Horarios
 * 
 */
export type Horarios = $Result.DefaultSelection<Prisma.$HorariosPayload>
/**
 * Model Empresa
 * 
 */
export type Empresa = $Result.DefaultSelection<Prisma.$EmpresaPayload>
/**
 * Model ExpoToken
 * 
 */
export type ExpoToken = $Result.DefaultSelection<Prisma.$ExpoTokenPayload>
/**
 * Model Clinica
 * 
 */
export type Clinica = $Result.DefaultSelection<Prisma.$ClinicaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs>;

  /**
   * `prisma.pet`: Exposes CRUD operations for the **Pet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pets
    * const pets = await prisma.pet.findMany()
    * ```
    */
  get pet(): Prisma.PetDelegate<ExtArgs>;

  /**
   * `prisma.curiosidade`: Exposes CRUD operations for the **Curiosidade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Curiosidades
    * const curiosidades = await prisma.curiosidade.findMany()
    * ```
    */
  get curiosidade(): Prisma.CuriosidadeDelegate<ExtArgs>;

  /**
   * `prisma.vacina`: Exposes CRUD operations for the **Vacina** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vacinas
    * const vacinas = await prisma.vacina.findMany()
    * ```
    */
  get vacina(): Prisma.VacinaDelegate<ExtArgs>;

  /**
   * `prisma.exame`: Exposes CRUD operations for the **Exame** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exames
    * const exames = await prisma.exame.findMany()
    * ```
    */
  get exame(): Prisma.ExameDelegate<ExtArgs>;

  /**
   * `prisma.publicacoes`: Exposes CRUD operations for the **Publicacoes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Publicacoes
    * const publicacoes = await prisma.publicacoes.findMany()
    * ```
    */
  get publicacoes(): Prisma.PublicacoesDelegate<ExtArgs>;

  /**
   * `prisma.agendamentos`: Exposes CRUD operations for the **Agendamentos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agendamentos
    * const agendamentos = await prisma.agendamentos.findMany()
    * ```
    */
  get agendamentos(): Prisma.AgendamentosDelegate<ExtArgs>;

  /**
   * `prisma.servicos`: Exposes CRUD operations for the **Servicos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicos
    * const servicos = await prisma.servicos.findMany()
    * ```
    */
  get servicos(): Prisma.ServicosDelegate<ExtArgs>;

  /**
   * `prisma.horarios`: Exposes CRUD operations for the **Horarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Horarios
    * const horarios = await prisma.horarios.findMany()
    * ```
    */
  get horarios(): Prisma.HorariosDelegate<ExtArgs>;

  /**
   * `prisma.empresa`: Exposes CRUD operations for the **Empresa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Empresas
    * const empresas = await prisma.empresa.findMany()
    * ```
    */
  get empresa(): Prisma.EmpresaDelegate<ExtArgs>;

  /**
   * `prisma.expoToken`: Exposes CRUD operations for the **ExpoToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExpoTokens
    * const expoTokens = await prisma.expoToken.findMany()
    * ```
    */
  get expoToken(): Prisma.ExpoTokenDelegate<ExtArgs>;

  /**
   * `prisma.clinica`: Exposes CRUD operations for the **Clinica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clinicas
    * const clinicas = await prisma.clinica.findMany()
    * ```
    */
  get clinica(): Prisma.ClinicaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Product: 'Product',
    Order: 'Order',
    Item: 'Item',
    Pet: 'Pet',
    Curiosidade: 'Curiosidade',
    Vacina: 'Vacina',
    Exame: 'Exame',
    Publicacoes: 'Publicacoes',
    Agendamentos: 'Agendamentos',
    Servicos: 'Servicos',
    Horarios: 'Horarios',
    Empresa: 'Empresa',
    ExpoToken: 'ExpoToken',
    Clinica: 'Clinica'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'category' | 'product' | 'order' | 'item' | 'pet' | 'curiosidade' | 'vacina' | 'exame' | 'publicacoes' | 'agendamentos' | 'servicos' | 'horarios' | 'empresa' | 'expoToken' | 'clinica'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>,
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      Pet: {
        payload: Prisma.$PetPayload<ExtArgs>
        fields: Prisma.PetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          findFirst: {
            args: Prisma.PetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          findMany: {
            args: Prisma.PetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>[]
          }
          create: {
            args: Prisma.PetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          createMany: {
            args: Prisma.PetCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          update: {
            args: Prisma.PetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          deleteMany: {
            args: Prisma.PetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          aggregate: {
            args: Prisma.PetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePet>
          }
          groupBy: {
            args: Prisma.PetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PetCountArgs<ExtArgs>,
            result: $Utils.Optional<PetCountAggregateOutputType> | number
          }
        }
      }
      Curiosidade: {
        payload: Prisma.$CuriosidadePayload<ExtArgs>
        fields: Prisma.CuriosidadeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CuriosidadeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CuriosidadeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload>
          }
          findFirst: {
            args: Prisma.CuriosidadeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CuriosidadeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload>
          }
          findMany: {
            args: Prisma.CuriosidadeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload>[]
          }
          create: {
            args: Prisma.CuriosidadeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload>
          }
          createMany: {
            args: Prisma.CuriosidadeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CuriosidadeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload>
          }
          update: {
            args: Prisma.CuriosidadeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload>
          }
          deleteMany: {
            args: Prisma.CuriosidadeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CuriosidadeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CuriosidadeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuriosidadePayload>
          }
          aggregate: {
            args: Prisma.CuriosidadeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCuriosidade>
          }
          groupBy: {
            args: Prisma.CuriosidadeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CuriosidadeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CuriosidadeCountArgs<ExtArgs>,
            result: $Utils.Optional<CuriosidadeCountAggregateOutputType> | number
          }
        }
      }
      Vacina: {
        payload: Prisma.$VacinaPayload<ExtArgs>
        fields: Prisma.VacinaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VacinaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VacinaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload>
          }
          findFirst: {
            args: Prisma.VacinaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VacinaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload>
          }
          findMany: {
            args: Prisma.VacinaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload>[]
          }
          create: {
            args: Prisma.VacinaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload>
          }
          createMany: {
            args: Prisma.VacinaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VacinaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload>
          }
          update: {
            args: Prisma.VacinaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload>
          }
          deleteMany: {
            args: Prisma.VacinaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VacinaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VacinaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VacinaPayload>
          }
          aggregate: {
            args: Prisma.VacinaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVacina>
          }
          groupBy: {
            args: Prisma.VacinaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VacinaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VacinaCountArgs<ExtArgs>,
            result: $Utils.Optional<VacinaCountAggregateOutputType> | number
          }
        }
      }
      Exame: {
        payload: Prisma.$ExamePayload<ExtArgs>
        fields: Prisma.ExameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload>
          }
          findFirst: {
            args: Prisma.ExameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload>
          }
          findMany: {
            args: Prisma.ExameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload>[]
          }
          create: {
            args: Prisma.ExameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload>
          }
          createMany: {
            args: Prisma.ExameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload>
          }
          update: {
            args: Prisma.ExameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload>
          }
          deleteMany: {
            args: Prisma.ExameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamePayload>
          }
          aggregate: {
            args: Prisma.ExameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExame>
          }
          groupBy: {
            args: Prisma.ExameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExameGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExameCountArgs<ExtArgs>,
            result: $Utils.Optional<ExameCountAggregateOutputType> | number
          }
        }
      }
      Publicacoes: {
        payload: Prisma.$PublicacoesPayload<ExtArgs>
        fields: Prisma.PublicacoesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublicacoesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublicacoesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload>
          }
          findFirst: {
            args: Prisma.PublicacoesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublicacoesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload>
          }
          findMany: {
            args: Prisma.PublicacoesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload>[]
          }
          create: {
            args: Prisma.PublicacoesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload>
          }
          createMany: {
            args: Prisma.PublicacoesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PublicacoesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload>
          }
          update: {
            args: Prisma.PublicacoesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload>
          }
          deleteMany: {
            args: Prisma.PublicacoesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PublicacoesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PublicacoesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacoesPayload>
          }
          aggregate: {
            args: Prisma.PublicacoesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePublicacoes>
          }
          groupBy: {
            args: Prisma.PublicacoesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PublicacoesGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublicacoesCountArgs<ExtArgs>,
            result: $Utils.Optional<PublicacoesCountAggregateOutputType> | number
          }
        }
      }
      Agendamentos: {
        payload: Prisma.$AgendamentosPayload<ExtArgs>
        fields: Prisma.AgendamentosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgendamentosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgendamentosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload>
          }
          findFirst: {
            args: Prisma.AgendamentosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgendamentosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload>
          }
          findMany: {
            args: Prisma.AgendamentosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload>[]
          }
          create: {
            args: Prisma.AgendamentosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload>
          }
          createMany: {
            args: Prisma.AgendamentosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AgendamentosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload>
          }
          update: {
            args: Prisma.AgendamentosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload>
          }
          deleteMany: {
            args: Prisma.AgendamentosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AgendamentosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AgendamentosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentosPayload>
          }
          aggregate: {
            args: Prisma.AgendamentosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAgendamentos>
          }
          groupBy: {
            args: Prisma.AgendamentosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgendamentosGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgendamentosCountArgs<ExtArgs>,
            result: $Utils.Optional<AgendamentosCountAggregateOutputType> | number
          }
        }
      }
      Servicos: {
        payload: Prisma.$ServicosPayload<ExtArgs>
        fields: Prisma.ServicosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload>
          }
          findFirst: {
            args: Prisma.ServicosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload>
          }
          findMany: {
            args: Prisma.ServicosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload>[]
          }
          create: {
            args: Prisma.ServicosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload>
          }
          createMany: {
            args: Prisma.ServicosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServicosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload>
          }
          update: {
            args: Prisma.ServicosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload>
          }
          deleteMany: {
            args: Prisma.ServicosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServicosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServicosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicosPayload>
          }
          aggregate: {
            args: Prisma.ServicosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServicos>
          }
          groupBy: {
            args: Prisma.ServicosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServicosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicosCountArgs<ExtArgs>,
            result: $Utils.Optional<ServicosCountAggregateOutputType> | number
          }
        }
      }
      Horarios: {
        payload: Prisma.$HorariosPayload<ExtArgs>
        fields: Prisma.HorariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HorariosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HorariosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload>
          }
          findFirst: {
            args: Prisma.HorariosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HorariosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload>
          }
          findMany: {
            args: Prisma.HorariosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload>[]
          }
          create: {
            args: Prisma.HorariosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload>
          }
          createMany: {
            args: Prisma.HorariosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HorariosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload>
          }
          update: {
            args: Prisma.HorariosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload>
          }
          deleteMany: {
            args: Prisma.HorariosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HorariosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HorariosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HorariosPayload>
          }
          aggregate: {
            args: Prisma.HorariosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHorarios>
          }
          groupBy: {
            args: Prisma.HorariosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HorariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.HorariosCountArgs<ExtArgs>,
            result: $Utils.Optional<HorariosCountAggregateOutputType> | number
          }
        }
      }
      Empresa: {
        payload: Prisma.$EmpresaPayload<ExtArgs>
        fields: Prisma.EmpresaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmpresaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmpresaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          findFirst: {
            args: Prisma.EmpresaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmpresaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          findMany: {
            args: Prisma.EmpresaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>[]
          }
          create: {
            args: Prisma.EmpresaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          createMany: {
            args: Prisma.EmpresaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmpresaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          update: {
            args: Prisma.EmpresaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          deleteMany: {
            args: Prisma.EmpresaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmpresaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmpresaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          aggregate: {
            args: Prisma.EmpresaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmpresa>
          }
          groupBy: {
            args: Prisma.EmpresaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmpresaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmpresaCountArgs<ExtArgs>,
            result: $Utils.Optional<EmpresaCountAggregateOutputType> | number
          }
        }
      }
      ExpoToken: {
        payload: Prisma.$ExpoTokenPayload<ExtArgs>
        fields: Prisma.ExpoTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpoTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpoTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload>
          }
          findFirst: {
            args: Prisma.ExpoTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpoTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload>
          }
          findMany: {
            args: Prisma.ExpoTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload>[]
          }
          create: {
            args: Prisma.ExpoTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload>
          }
          createMany: {
            args: Prisma.ExpoTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExpoTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload>
          }
          update: {
            args: Prisma.ExpoTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload>
          }
          deleteMany: {
            args: Prisma.ExpoTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExpoTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExpoTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpoTokenPayload>
          }
          aggregate: {
            args: Prisma.ExpoTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExpoToken>
          }
          groupBy: {
            args: Prisma.ExpoTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExpoTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpoTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<ExpoTokenCountAggregateOutputType> | number
          }
        }
      }
      Clinica: {
        payload: Prisma.$ClinicaPayload<ExtArgs>
        fields: Prisma.ClinicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClinicaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClinicaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          findFirst: {
            args: Prisma.ClinicaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClinicaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          findMany: {
            args: Prisma.ClinicaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>[]
          }
          create: {
            args: Prisma.ClinicaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          createMany: {
            args: Prisma.ClinicaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClinicaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          update: {
            args: Prisma.ClinicaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          deleteMany: {
            args: Prisma.ClinicaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClinicaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClinicaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          aggregate: {
            args: Prisma.ClinicaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClinica>
          }
          groupBy: {
            args: Prisma.ClinicaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClinicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClinicaCountArgs<ExtArgs>,
            result: $Utils.Optional<ClinicaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    pets: number
    expo_token: number
    user_id: number
    vacinas: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pets?: boolean | UserCountOutputTypeCountPetsArgs
    expo_token?: boolean | UserCountOutputTypeCountExpo_tokenArgs
    user_id?: boolean | UserCountOutputTypeCountUser_idArgs
    vacinas?: boolean | UserCountOutputTypeCountVacinasArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExpo_tokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpoTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentosWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVacinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VacinaWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    items: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ProductCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    items: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | OrderCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Count Type PetCountOutputType
   */

  export type PetCountOutputType = {
    vacinas: number
    exames: number
    publicacos: number
    agendamentos: number
  }

  export type PetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vacinas?: boolean | PetCountOutputTypeCountVacinasArgs
    exames?: boolean | PetCountOutputTypeCountExamesArgs
    publicacos?: boolean | PetCountOutputTypeCountPublicacosArgs
    agendamentos?: boolean | PetCountOutputTypeCountAgendamentosArgs
  }

  // Custom InputTypes
  /**
   * PetCountOutputType without action
   */
  export type PetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PetCountOutputType
     */
    select?: PetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PetCountOutputType without action
   */
  export type PetCountOutputTypeCountVacinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VacinaWhereInput
  }

  /**
   * PetCountOutputType without action
   */
  export type PetCountOutputTypeCountExamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExameWhereInput
  }

  /**
   * PetCountOutputType without action
   */
  export type PetCountOutputTypeCountPublicacosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicacoesWhereInput
  }

  /**
   * PetCountOutputType without action
   */
  export type PetCountOutputTypeCountAgendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentosWhereInput
  }


  /**
   * Count Type ServicosCountOutputType
   */

  export type ServicosCountOutputType = {
    agendamentos: number
  }

  export type ServicosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agendamentos?: boolean | ServicosCountOutputTypeCountAgendamentosArgs
  }

  // Custom InputTypes
  /**
   * ServicosCountOutputType without action
   */
  export type ServicosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicosCountOutputType
     */
    select?: ServicosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServicosCountOutputType without action
   */
  export type ServicosCountOutputTypeCountAgendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentosWhereInput
  }


  /**
   * Count Type HorariosCountOutputType
   */

  export type HorariosCountOutputType = {
    agendamentos: number
  }

  export type HorariosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agendamentos?: boolean | HorariosCountOutputTypeCountAgendamentosArgs
  }

  // Custom InputTypes
  /**
   * HorariosCountOutputType without action
   */
  export type HorariosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HorariosCountOutputType
     */
    select?: HorariosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HorariosCountOutputType without action
   */
  export type HorariosCountOutputTypeCountAgendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentosWhereInput
  }


  /**
   * Count Type EmpresaCountOutputType
   */

  export type EmpresaCountOutputType = {
    agendamentos: number
  }

  export type EmpresaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agendamentos?: boolean | EmpresaCountOutputTypeCountAgendamentosArgs
  }

  // Custom InputTypes
  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaCountOutputType
     */
    select?: EmpresaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountAgendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentosWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    bairro: string | null
    cep: string | null
    cidade: string | null
    complemento: string | null
    cpfcnpj: string | null
    endereco: string | null
    estado: string | null
    numero: string | null
    telefone: string | null
    status: string | null
    img_usuario: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    bairro: string | null
    cep: string | null
    cidade: string | null
    complemento: string | null
    cpfcnpj: string | null
    endereco: string | null
    estado: string | null
    numero: string | null
    telefone: string | null
    status: string | null
    img_usuario: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    created_at: number
    updated_at: number
    bairro: number
    cep: number
    cidade: number
    complemento: number
    cpfcnpj: number
    endereco: number
    estado: number
    numero: number
    telefone: number
    status: number
    img_usuario: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    bairro?: true
    cep?: true
    cidade?: true
    complemento?: true
    cpfcnpj?: true
    endereco?: true
    estado?: true
    numero?: true
    telefone?: true
    status?: true
    img_usuario?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    bairro?: true
    cep?: true
    cidade?: true
    complemento?: true
    cpfcnpj?: true
    endereco?: true
    estado?: true
    numero?: true
    telefone?: true
    status?: true
    img_usuario?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    bairro?: true
    cep?: true
    cidade?: true
    complemento?: true
    cpfcnpj?: true
    endereco?: true
    estado?: true
    numero?: true
    telefone?: true
    status?: true
    img_usuario?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    created_at: Date | null
    updated_at: Date | null
    bairro: string | null
    cep: string | null
    cidade: string | null
    complemento: string | null
    cpfcnpj: string | null
    endereco: string | null
    estado: string | null
    numero: string | null
    telefone: string | null
    status: string | null
    img_usuario: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    bairro?: boolean
    cep?: boolean
    cidade?: boolean
    complemento?: boolean
    cpfcnpj?: boolean
    endereco?: boolean
    estado?: boolean
    numero?: boolean
    telefone?: boolean
    status?: boolean
    img_usuario?: boolean
    pets?: boolean | User$petsArgs<ExtArgs>
    expo_token?: boolean | User$expo_tokenArgs<ExtArgs>
    user_id?: boolean | User$user_idArgs<ExtArgs>
    vacinas?: boolean | User$vacinasArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    bairro?: boolean
    cep?: boolean
    cidade?: boolean
    complemento?: boolean
    cpfcnpj?: boolean
    endereco?: boolean
    estado?: boolean
    numero?: boolean
    telefone?: boolean
    status?: boolean
    img_usuario?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pets?: boolean | User$petsArgs<ExtArgs>
    expo_token?: boolean | User$expo_tokenArgs<ExtArgs>
    user_id?: boolean | User$user_idArgs<ExtArgs>
    vacinas?: boolean | User$vacinasArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      pets: Prisma.$PetPayload<ExtArgs>[]
      expo_token: Prisma.$ExpoTokenPayload<ExtArgs>[]
      user_id: Prisma.$AgendamentosPayload<ExtArgs>[]
      vacinas: Prisma.$VacinaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      created_at: Date | null
      updated_at: Date | null
      bairro: string | null
      cep: string | null
      cidade: string | null
      complemento: string | null
      cpfcnpj: string | null
      endereco: string | null
      estado: string | null
      numero: string | null
      telefone: string | null
      status: string | null
      img_usuario: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pets<T extends User$petsArgs<ExtArgs> = {}>(args?: Subset<T, User$petsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findMany'> | Null>;

    expo_token<T extends User$expo_tokenArgs<ExtArgs> = {}>(args?: Subset<T, User$expo_tokenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'findMany'> | Null>;

    user_id<T extends User$user_idArgs<ExtArgs> = {}>(args?: Subset<T, User$user_idArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findMany'> | Null>;

    vacinas<T extends User$vacinasArgs<ExtArgs> = {}>(args?: Subset<T, User$vacinasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly bairro: FieldRef<"User", 'String'>
    readonly cep: FieldRef<"User", 'String'>
    readonly cidade: FieldRef<"User", 'String'>
    readonly complemento: FieldRef<"User", 'String'>
    readonly cpfcnpj: FieldRef<"User", 'String'>
    readonly endereco: FieldRef<"User", 'String'>
    readonly estado: FieldRef<"User", 'String'>
    readonly numero: FieldRef<"User", 'String'>
    readonly telefone: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly img_usuario: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.pets
   */
  export type User$petsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    where?: PetWhereInput
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    cursor?: PetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }

  /**
   * User.expo_token
   */
  export type User$expo_tokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    where?: ExpoTokenWhereInput
    orderBy?: ExpoTokenOrderByWithRelationInput | ExpoTokenOrderByWithRelationInput[]
    cursor?: ExpoTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpoTokenScalarFieldEnum | ExpoTokenScalarFieldEnum[]
  }

  /**
   * User.user_id
   */
  export type User$user_idArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    where?: AgendamentosWhereInput
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    cursor?: AgendamentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendamentosScalarFieldEnum | AgendamentosScalarFieldEnum[]
  }

  /**
   * User.vacinas
   */
  export type User$vacinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    where?: VacinaWhereInput
    orderBy?: VacinaOrderByWithRelationInput | VacinaOrderByWithRelationInput[]
    cursor?: VacinaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VacinaScalarFieldEnum | VacinaScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    created_at: Date | null
    updated_at: Date | null
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>


  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends Category$productsArgs<ExtArgs> = {}>(args?: Subset<T, Category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly created_at: FieldRef<"Category", 'DateTime'>
    readonly updated_at: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.products
   */
  export type Category$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: string | null
    description: string | null
    banner: string | null
    created_at: Date | null
    updated_at: Date | null
    category_id: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: string | null
    description: string | null
    banner: string | null
    created_at: Date | null
    updated_at: Date | null
    category_id: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    price: number
    description: number
    banner: number
    created_at: number
    updated_at: number
    category_id: number
    _all: number
  }


  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
    banner?: true
    created_at?: true
    updated_at?: true
    category_id?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
    banner?: true
    created_at?: true
    updated_at?: true
    category_id?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
    banner?: true
    created_at?: true
    updated_at?: true
    category_id?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    price: string
    description: string
    banner: string
    created_at: Date | null
    updated_at: Date | null
    category_id: string
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    description?: boolean
    banner?: boolean
    created_at?: boolean
    updated_at?: boolean
    category_id?: boolean
    items?: boolean | Product$itemsArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>


  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    description?: boolean
    banner?: boolean
    created_at?: boolean
    updated_at?: boolean
    category_id?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Product$itemsArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      items: Prisma.$ItemPayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      price: string
      description: string
      banner: string
      created_at: Date | null
      updated_at: Date | null
      category_id: string
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    items<T extends Product$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly banner: FieldRef<"Product", 'String'>
    readonly created_at: FieldRef<"Product", 'DateTime'>
    readonly updated_at: FieldRef<"Product", 'DateTime'>
    readonly category_id: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.items
   */
  export type Product$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    table: number | null
  }

  export type OrderSumAggregateOutputType = {
    table: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    table: number | null
    status: boolean | null
    draft: boolean | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    table: number | null
    status: boolean | null
    draft: boolean | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    table: number
    status: number
    draft: number
    name: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    table?: true
  }

  export type OrderSumAggregateInputType = {
    table?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    table?: true
    status?: true
    draft?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    table?: true
    status?: true
    draft?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    table?: true
    status?: true
    draft?: true
    name?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    table: number
    status: boolean
    draft: boolean
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    table?: boolean
    status?: boolean
    draft?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    items?: boolean | Order$itemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>


  export type OrderSelectScalar = {
    id?: boolean
    table?: boolean
    status?: boolean
    draft?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Order$itemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      items: Prisma.$ItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      table: number
      status: boolean
      draft: boolean
      name: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderCreateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends OrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    items<T extends Order$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly table: FieldRef<"Order", 'Int'>
    readonly status: FieldRef<"Order", 'Boolean'>
    readonly draft: FieldRef<"Order", 'Boolean'>
    readonly name: FieldRef<"Order", 'String'>
    readonly created_at: FieldRef<"Order", 'DateTime'>
    readonly updated_at: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }

  /**
   * Order.items
   */
  export type Order$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    amount: number | null
  }

  export type ItemSumAggregateOutputType = {
    amount: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: string | null
    amount: number | null
    created_at: Date | null
    updated_at: Date | null
    order_id: string | null
    product_id: string | null
  }

  export type ItemMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    created_at: Date | null
    updated_at: Date | null
    order_id: string | null
    product_id: string | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    amount: number
    created_at: number
    updated_at: number
    order_id: number
    product_id: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    amount?: true
  }

  export type ItemSumAggregateInputType = {
    amount?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    order_id?: true
    product_id?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    order_id?: true
    product_id?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    order_id?: true
    product_id?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: string
    amount: number
    created_at: Date | null
    updated_at: Date | null
    order_id: string
    product_id: string
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    created_at?: boolean
    updated_at?: boolean
    order_id?: boolean
    product_id?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>


  export type ItemSelectScalar = {
    id?: boolean
    amount?: boolean
    created_at?: boolean
    updated_at?: boolean
    order_id?: boolean
    product_id?: boolean
  }

  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      created_at: Date | null
      updated_at: Date | null
      order_id: string
      product_id: string
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ItemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ItemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ItemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
    **/
    create<T extends ItemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ItemCreateArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ItemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
    **/
    delete<T extends ItemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ItemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ItemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ItemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
    **/
    upsert<T extends ItemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Item model
   */ 
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'String'>
    readonly amount: FieldRef<"Item", 'Int'>
    readonly created_at: FieldRef<"Item", 'DateTime'>
    readonly updated_at: FieldRef<"Item", 'DateTime'>
    readonly order_id: FieldRef<"Item", 'String'>
    readonly product_id: FieldRef<"Item", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model Pet
   */

  export type AggregatePet = {
    _count: PetCountAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  export type PetMinAggregateOutputType = {
    id: string | null
    name: string | null
    apelido: string | null
    data_nascimento: Date | null
    especie: string | null
    idade: string | null
    meses: string | null
    raca: string | null
    chip: string | null
    sexo: string | null
    temperamento: string | null
    tamanho: string | null
    detalhes: string | null
    user_id: string | null
    img_perfil: string | null
  }

  export type PetMaxAggregateOutputType = {
    id: string | null
    name: string | null
    apelido: string | null
    data_nascimento: Date | null
    especie: string | null
    idade: string | null
    meses: string | null
    raca: string | null
    chip: string | null
    sexo: string | null
    temperamento: string | null
    tamanho: string | null
    detalhes: string | null
    user_id: string | null
    img_perfil: string | null
  }

  export type PetCountAggregateOutputType = {
    id: number
    name: number
    apelido: number
    data_nascimento: number
    especie: number
    idade: number
    meses: number
    raca: number
    chip: number
    sexo: number
    temperamento: number
    tamanho: number
    detalhes: number
    user_id: number
    img_perfil: number
    _all: number
  }


  export type PetMinAggregateInputType = {
    id?: true
    name?: true
    apelido?: true
    data_nascimento?: true
    especie?: true
    idade?: true
    meses?: true
    raca?: true
    chip?: true
    sexo?: true
    temperamento?: true
    tamanho?: true
    detalhes?: true
    user_id?: true
    img_perfil?: true
  }

  export type PetMaxAggregateInputType = {
    id?: true
    name?: true
    apelido?: true
    data_nascimento?: true
    especie?: true
    idade?: true
    meses?: true
    raca?: true
    chip?: true
    sexo?: true
    temperamento?: true
    tamanho?: true
    detalhes?: true
    user_id?: true
    img_perfil?: true
  }

  export type PetCountAggregateInputType = {
    id?: true
    name?: true
    apelido?: true
    data_nascimento?: true
    especie?: true
    idade?: true
    meses?: true
    raca?: true
    chip?: true
    sexo?: true
    temperamento?: true
    tamanho?: true
    detalhes?: true
    user_id?: true
    img_perfil?: true
    _all?: true
  }

  export type PetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pet to aggregate.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pets
    **/
    _count?: true | PetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetMaxAggregateInputType
  }

  export type GetPetAggregateType<T extends PetAggregateArgs> = {
        [P in keyof T & keyof AggregatePet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePet[P]>
      : GetScalarType<T[P], AggregatePet[P]>
  }




  export type PetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetWhereInput
    orderBy?: PetOrderByWithAggregationInput | PetOrderByWithAggregationInput[]
    by: PetScalarFieldEnum[] | PetScalarFieldEnum
    having?: PetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetCountAggregateInputType | true
    _min?: PetMinAggregateInputType
    _max?: PetMaxAggregateInputType
  }

  export type PetGroupByOutputType = {
    id: string
    name: string
    apelido: string
    data_nascimento: Date | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes: string | null
    user_id: string
    img_perfil: string
    _count: PetCountAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  type GetPetGroupByPayload<T extends PetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetGroupByOutputType[P]>
            : GetScalarType<T[P], PetGroupByOutputType[P]>
        }
      >
    >


  export type PetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    apelido?: boolean
    data_nascimento?: boolean
    especie?: boolean
    idade?: boolean
    meses?: boolean
    raca?: boolean
    chip?: boolean
    sexo?: boolean
    temperamento?: boolean
    tamanho?: boolean
    detalhes?: boolean
    user_id?: boolean
    img_perfil?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    vacinas?: boolean | Pet$vacinasArgs<ExtArgs>
    exames?: boolean | Pet$examesArgs<ExtArgs>
    publicacos?: boolean | Pet$publicacosArgs<ExtArgs>
    agendamentos?: boolean | Pet$agendamentosArgs<ExtArgs>
    _count?: boolean | PetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pet"]>


  export type PetSelectScalar = {
    id?: boolean
    name?: boolean
    apelido?: boolean
    data_nascimento?: boolean
    especie?: boolean
    idade?: boolean
    meses?: boolean
    raca?: boolean
    chip?: boolean
    sexo?: boolean
    temperamento?: boolean
    tamanho?: boolean
    detalhes?: boolean
    user_id?: boolean
    img_perfil?: boolean
  }

  export type PetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    vacinas?: boolean | Pet$vacinasArgs<ExtArgs>
    exames?: boolean | Pet$examesArgs<ExtArgs>
    publicacos?: boolean | Pet$publicacosArgs<ExtArgs>
    agendamentos?: boolean | Pet$agendamentosArgs<ExtArgs>
    _count?: boolean | PetCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      vacinas: Prisma.$VacinaPayload<ExtArgs>[]
      exames: Prisma.$ExamePayload<ExtArgs>[]
      publicacos: Prisma.$PublicacoesPayload<ExtArgs>[]
      agendamentos: Prisma.$AgendamentosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      apelido: string
      data_nascimento: Date | null
      especie: string
      idade: string
      meses: string
      raca: string
      chip: string
      sexo: string
      temperamento: string
      tamanho: string
      detalhes: string | null
      user_id: string
      img_perfil: string
    }, ExtArgs["result"]["pet"]>
    composites: {}
  }

  type PetGetPayload<S extends boolean | null | undefined | PetDefaultArgs> = $Result.GetResult<Prisma.$PetPayload, S>

  type PetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PetCountAggregateInputType | true
    }

  export interface PetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pet'], meta: { name: 'Pet' } }
    /**
     * Find zero or one Pet that matches the filter.
     * @param {PetFindUniqueArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PetFindUniqueArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PetFindUniqueOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindFirstArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pets
     * const pets = await prisma.pet.findMany()
     * 
     * // Get first 10 Pets
     * const pets = await prisma.pet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petWithIdOnly = await prisma.pet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pet.
     * @param {PetCreateArgs} args - Arguments to create a Pet.
     * @example
     * // Create one Pet
     * const Pet = await prisma.pet.create({
     *   data: {
     *     // ... data to create a Pet
     *   }
     * })
     * 
    **/
    create<T extends PetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PetCreateArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pets.
     * @param {PetCreateManyArgs} args - Arguments to create many Pets.
     * @example
     * // Create many Pets
     * const pet = await prisma.pet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pet.
     * @param {PetDeleteArgs} args - Arguments to delete one Pet.
     * @example
     * // Delete one Pet
     * const Pet = await prisma.pet.delete({
     *   where: {
     *     // ... filter to delete one Pet
     *   }
     * })
     * 
    **/
    delete<T extends PetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PetDeleteArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pet.
     * @param {PetUpdateArgs} args - Arguments to update one Pet.
     * @example
     * // Update one Pet
     * const pet = await prisma.pet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpdateArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pets.
     * @param {PetDeleteManyArgs} args - Arguments to filter Pets to delete.
     * @example
     * // Delete a few Pets
     * const { count } = await prisma.pet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pets
     * const pet = await prisma.pet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pet.
     * @param {PetUpsertArgs} args - Arguments to update or create a Pet.
     * @example
     * // Update or create a Pet
     * const pet = await prisma.pet.upsert({
     *   create: {
     *     // ... data to create a Pet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pet we want to update
     *   }
     * })
    **/
    upsert<T extends PetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpsertArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetCountArgs} args - Arguments to filter Pets to count.
     * @example
     * // Count the number of Pets
     * const count = await prisma.pet.count({
     *   where: {
     *     // ... the filter for the Pets we want to count
     *   }
     * })
    **/
    count<T extends PetCountArgs>(
      args?: Subset<T, PetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetAggregateArgs>(args: Subset<T, PetAggregateArgs>): Prisma.PrismaPromise<GetPetAggregateType<T>>

    /**
     * Group by Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetGroupByArgs['orderBy'] }
        : { orderBy?: PetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pet model
   */
  readonly fields: PetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    vacinas<T extends Pet$vacinasArgs<ExtArgs> = {}>(args?: Subset<T, Pet$vacinasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'findMany'> | Null>;

    exames<T extends Pet$examesArgs<ExtArgs> = {}>(args?: Subset<T, Pet$examesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'findMany'> | Null>;

    publicacos<T extends Pet$publicacosArgs<ExtArgs> = {}>(args?: Subset<T, Pet$publicacosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'findMany'> | Null>;

    agendamentos<T extends Pet$agendamentosArgs<ExtArgs> = {}>(args?: Subset<T, Pet$agendamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pet model
   */ 
  interface PetFieldRefs {
    readonly id: FieldRef<"Pet", 'String'>
    readonly name: FieldRef<"Pet", 'String'>
    readonly apelido: FieldRef<"Pet", 'String'>
    readonly data_nascimento: FieldRef<"Pet", 'DateTime'>
    readonly especie: FieldRef<"Pet", 'String'>
    readonly idade: FieldRef<"Pet", 'String'>
    readonly meses: FieldRef<"Pet", 'String'>
    readonly raca: FieldRef<"Pet", 'String'>
    readonly chip: FieldRef<"Pet", 'String'>
    readonly sexo: FieldRef<"Pet", 'String'>
    readonly temperamento: FieldRef<"Pet", 'String'>
    readonly tamanho: FieldRef<"Pet", 'String'>
    readonly detalhes: FieldRef<"Pet", 'String'>
    readonly user_id: FieldRef<"Pet", 'String'>
    readonly img_perfil: FieldRef<"Pet", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Pet findUnique
   */
  export type PetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet findUniqueOrThrow
   */
  export type PetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet findFirst
   */
  export type PetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }

  /**
   * Pet findFirstOrThrow
   */
  export type PetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }

  /**
   * Pet findMany
   */
  export type PetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pets to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }

  /**
   * Pet create
   */
  export type PetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The data needed to create a Pet.
     */
    data: XOR<PetCreateInput, PetUncheckedCreateInput>
  }

  /**
   * Pet createMany
   */
  export type PetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pets.
     */
    data: PetCreateManyInput | PetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pet update
   */
  export type PetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The data needed to update a Pet.
     */
    data: XOR<PetUpdateInput, PetUncheckedUpdateInput>
    /**
     * Choose, which Pet to update.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet updateMany
   */
  export type PetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pets.
     */
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyInput>
    /**
     * Filter which Pets to update
     */
    where?: PetWhereInput
  }

  /**
   * Pet upsert
   */
  export type PetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The filter to search for the Pet to update in case it exists.
     */
    where: PetWhereUniqueInput
    /**
     * In case the Pet found by the `where` argument doesn't exist, create a new Pet with this data.
     */
    create: XOR<PetCreateInput, PetUncheckedCreateInput>
    /**
     * In case the Pet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetUpdateInput, PetUncheckedUpdateInput>
  }

  /**
   * Pet delete
   */
  export type PetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter which Pet to delete.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet deleteMany
   */
  export type PetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pets to delete
     */
    where?: PetWhereInput
  }

  /**
   * Pet.vacinas
   */
  export type Pet$vacinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    where?: VacinaWhereInput
    orderBy?: VacinaOrderByWithRelationInput | VacinaOrderByWithRelationInput[]
    cursor?: VacinaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VacinaScalarFieldEnum | VacinaScalarFieldEnum[]
  }

  /**
   * Pet.exames
   */
  export type Pet$examesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    where?: ExameWhereInput
    orderBy?: ExameOrderByWithRelationInput | ExameOrderByWithRelationInput[]
    cursor?: ExameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExameScalarFieldEnum | ExameScalarFieldEnum[]
  }

  /**
   * Pet.publicacos
   */
  export type Pet$publicacosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    where?: PublicacoesWhereInput
    orderBy?: PublicacoesOrderByWithRelationInput | PublicacoesOrderByWithRelationInput[]
    cursor?: PublicacoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublicacoesScalarFieldEnum | PublicacoesScalarFieldEnum[]
  }

  /**
   * Pet.agendamentos
   */
  export type Pet$agendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    where?: AgendamentosWhereInput
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    cursor?: AgendamentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendamentosScalarFieldEnum | AgendamentosScalarFieldEnum[]
  }

  /**
   * Pet without action
   */
  export type PetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
  }


  /**
   * Model Curiosidade
   */

  export type AggregateCuriosidade = {
    _count: CuriosidadeCountAggregateOutputType | null
    _min: CuriosidadeMinAggregateOutputType | null
    _max: CuriosidadeMaxAggregateOutputType | null
  }

  export type CuriosidadeMinAggregateOutputType = {
    id: string | null
    conteudo: string | null
  }

  export type CuriosidadeMaxAggregateOutputType = {
    id: string | null
    conteudo: string | null
  }

  export type CuriosidadeCountAggregateOutputType = {
    id: number
    conteudo: number
    _all: number
  }


  export type CuriosidadeMinAggregateInputType = {
    id?: true
    conteudo?: true
  }

  export type CuriosidadeMaxAggregateInputType = {
    id?: true
    conteudo?: true
  }

  export type CuriosidadeCountAggregateInputType = {
    id?: true
    conteudo?: true
    _all?: true
  }

  export type CuriosidadeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curiosidade to aggregate.
     */
    where?: CuriosidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curiosidades to fetch.
     */
    orderBy?: CuriosidadeOrderByWithRelationInput | CuriosidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CuriosidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curiosidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curiosidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Curiosidades
    **/
    _count?: true | CuriosidadeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CuriosidadeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CuriosidadeMaxAggregateInputType
  }

  export type GetCuriosidadeAggregateType<T extends CuriosidadeAggregateArgs> = {
        [P in keyof T & keyof AggregateCuriosidade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCuriosidade[P]>
      : GetScalarType<T[P], AggregateCuriosidade[P]>
  }




  export type CuriosidadeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuriosidadeWhereInput
    orderBy?: CuriosidadeOrderByWithAggregationInput | CuriosidadeOrderByWithAggregationInput[]
    by: CuriosidadeScalarFieldEnum[] | CuriosidadeScalarFieldEnum
    having?: CuriosidadeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CuriosidadeCountAggregateInputType | true
    _min?: CuriosidadeMinAggregateInputType
    _max?: CuriosidadeMaxAggregateInputType
  }

  export type CuriosidadeGroupByOutputType = {
    id: string
    conteudo: string
    _count: CuriosidadeCountAggregateOutputType | null
    _min: CuriosidadeMinAggregateOutputType | null
    _max: CuriosidadeMaxAggregateOutputType | null
  }

  type GetCuriosidadeGroupByPayload<T extends CuriosidadeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CuriosidadeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CuriosidadeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CuriosidadeGroupByOutputType[P]>
            : GetScalarType<T[P], CuriosidadeGroupByOutputType[P]>
        }
      >
    >


  export type CuriosidadeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conteudo?: boolean
  }, ExtArgs["result"]["curiosidade"]>


  export type CuriosidadeSelectScalar = {
    id?: boolean
    conteudo?: boolean
  }


  export type $CuriosidadePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Curiosidade"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conteudo: string
    }, ExtArgs["result"]["curiosidade"]>
    composites: {}
  }

  type CuriosidadeGetPayload<S extends boolean | null | undefined | CuriosidadeDefaultArgs> = $Result.GetResult<Prisma.$CuriosidadePayload, S>

  type CuriosidadeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CuriosidadeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CuriosidadeCountAggregateInputType | true
    }

  export interface CuriosidadeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Curiosidade'], meta: { name: 'Curiosidade' } }
    /**
     * Find zero or one Curiosidade that matches the filter.
     * @param {CuriosidadeFindUniqueArgs} args - Arguments to find a Curiosidade
     * @example
     * // Get one Curiosidade
     * const curiosidade = await prisma.curiosidade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CuriosidadeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CuriosidadeFindUniqueArgs<ExtArgs>>
    ): Prisma__CuriosidadeClient<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Curiosidade that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CuriosidadeFindUniqueOrThrowArgs} args - Arguments to find a Curiosidade
     * @example
     * // Get one Curiosidade
     * const curiosidade = await prisma.curiosidade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CuriosidadeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CuriosidadeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CuriosidadeClient<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Curiosidade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuriosidadeFindFirstArgs} args - Arguments to find a Curiosidade
     * @example
     * // Get one Curiosidade
     * const curiosidade = await prisma.curiosidade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CuriosidadeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CuriosidadeFindFirstArgs<ExtArgs>>
    ): Prisma__CuriosidadeClient<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Curiosidade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuriosidadeFindFirstOrThrowArgs} args - Arguments to find a Curiosidade
     * @example
     * // Get one Curiosidade
     * const curiosidade = await prisma.curiosidade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CuriosidadeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CuriosidadeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CuriosidadeClient<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Curiosidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuriosidadeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Curiosidades
     * const curiosidades = await prisma.curiosidade.findMany()
     * 
     * // Get first 10 Curiosidades
     * const curiosidades = await prisma.curiosidade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const curiosidadeWithIdOnly = await prisma.curiosidade.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CuriosidadeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CuriosidadeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Curiosidade.
     * @param {CuriosidadeCreateArgs} args - Arguments to create a Curiosidade.
     * @example
     * // Create one Curiosidade
     * const Curiosidade = await prisma.curiosidade.create({
     *   data: {
     *     // ... data to create a Curiosidade
     *   }
     * })
     * 
    **/
    create<T extends CuriosidadeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CuriosidadeCreateArgs<ExtArgs>>
    ): Prisma__CuriosidadeClient<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Curiosidades.
     * @param {CuriosidadeCreateManyArgs} args - Arguments to create many Curiosidades.
     * @example
     * // Create many Curiosidades
     * const curiosidade = await prisma.curiosidade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CuriosidadeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CuriosidadeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Curiosidade.
     * @param {CuriosidadeDeleteArgs} args - Arguments to delete one Curiosidade.
     * @example
     * // Delete one Curiosidade
     * const Curiosidade = await prisma.curiosidade.delete({
     *   where: {
     *     // ... filter to delete one Curiosidade
     *   }
     * })
     * 
    **/
    delete<T extends CuriosidadeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CuriosidadeDeleteArgs<ExtArgs>>
    ): Prisma__CuriosidadeClient<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Curiosidade.
     * @param {CuriosidadeUpdateArgs} args - Arguments to update one Curiosidade.
     * @example
     * // Update one Curiosidade
     * const curiosidade = await prisma.curiosidade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CuriosidadeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CuriosidadeUpdateArgs<ExtArgs>>
    ): Prisma__CuriosidadeClient<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Curiosidades.
     * @param {CuriosidadeDeleteManyArgs} args - Arguments to filter Curiosidades to delete.
     * @example
     * // Delete a few Curiosidades
     * const { count } = await prisma.curiosidade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CuriosidadeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CuriosidadeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Curiosidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuriosidadeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Curiosidades
     * const curiosidade = await prisma.curiosidade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CuriosidadeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CuriosidadeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Curiosidade.
     * @param {CuriosidadeUpsertArgs} args - Arguments to update or create a Curiosidade.
     * @example
     * // Update or create a Curiosidade
     * const curiosidade = await prisma.curiosidade.upsert({
     *   create: {
     *     // ... data to create a Curiosidade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curiosidade we want to update
     *   }
     * })
    **/
    upsert<T extends CuriosidadeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CuriosidadeUpsertArgs<ExtArgs>>
    ): Prisma__CuriosidadeClient<$Result.GetResult<Prisma.$CuriosidadePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Curiosidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuriosidadeCountArgs} args - Arguments to filter Curiosidades to count.
     * @example
     * // Count the number of Curiosidades
     * const count = await prisma.curiosidade.count({
     *   where: {
     *     // ... the filter for the Curiosidades we want to count
     *   }
     * })
    **/
    count<T extends CuriosidadeCountArgs>(
      args?: Subset<T, CuriosidadeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CuriosidadeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curiosidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuriosidadeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CuriosidadeAggregateArgs>(args: Subset<T, CuriosidadeAggregateArgs>): Prisma.PrismaPromise<GetCuriosidadeAggregateType<T>>

    /**
     * Group by Curiosidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuriosidadeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CuriosidadeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CuriosidadeGroupByArgs['orderBy'] }
        : { orderBy?: CuriosidadeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CuriosidadeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCuriosidadeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Curiosidade model
   */
  readonly fields: CuriosidadeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Curiosidade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CuriosidadeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Curiosidade model
   */ 
  interface CuriosidadeFieldRefs {
    readonly id: FieldRef<"Curiosidade", 'String'>
    readonly conteudo: FieldRef<"Curiosidade", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Curiosidade findUnique
   */
  export type CuriosidadeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * Filter, which Curiosidade to fetch.
     */
    where: CuriosidadeWhereUniqueInput
  }

  /**
   * Curiosidade findUniqueOrThrow
   */
  export type CuriosidadeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * Filter, which Curiosidade to fetch.
     */
    where: CuriosidadeWhereUniqueInput
  }

  /**
   * Curiosidade findFirst
   */
  export type CuriosidadeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * Filter, which Curiosidade to fetch.
     */
    where?: CuriosidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curiosidades to fetch.
     */
    orderBy?: CuriosidadeOrderByWithRelationInput | CuriosidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Curiosidades.
     */
    cursor?: CuriosidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curiosidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curiosidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Curiosidades.
     */
    distinct?: CuriosidadeScalarFieldEnum | CuriosidadeScalarFieldEnum[]
  }

  /**
   * Curiosidade findFirstOrThrow
   */
  export type CuriosidadeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * Filter, which Curiosidade to fetch.
     */
    where?: CuriosidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curiosidades to fetch.
     */
    orderBy?: CuriosidadeOrderByWithRelationInput | CuriosidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Curiosidades.
     */
    cursor?: CuriosidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curiosidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curiosidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Curiosidades.
     */
    distinct?: CuriosidadeScalarFieldEnum | CuriosidadeScalarFieldEnum[]
  }

  /**
   * Curiosidade findMany
   */
  export type CuriosidadeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * Filter, which Curiosidades to fetch.
     */
    where?: CuriosidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curiosidades to fetch.
     */
    orderBy?: CuriosidadeOrderByWithRelationInput | CuriosidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Curiosidades.
     */
    cursor?: CuriosidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curiosidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curiosidades.
     */
    skip?: number
    distinct?: CuriosidadeScalarFieldEnum | CuriosidadeScalarFieldEnum[]
  }

  /**
   * Curiosidade create
   */
  export type CuriosidadeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * The data needed to create a Curiosidade.
     */
    data: XOR<CuriosidadeCreateInput, CuriosidadeUncheckedCreateInput>
  }

  /**
   * Curiosidade createMany
   */
  export type CuriosidadeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Curiosidades.
     */
    data: CuriosidadeCreateManyInput | CuriosidadeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Curiosidade update
   */
  export type CuriosidadeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * The data needed to update a Curiosidade.
     */
    data: XOR<CuriosidadeUpdateInput, CuriosidadeUncheckedUpdateInput>
    /**
     * Choose, which Curiosidade to update.
     */
    where: CuriosidadeWhereUniqueInput
  }

  /**
   * Curiosidade updateMany
   */
  export type CuriosidadeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Curiosidades.
     */
    data: XOR<CuriosidadeUpdateManyMutationInput, CuriosidadeUncheckedUpdateManyInput>
    /**
     * Filter which Curiosidades to update
     */
    where?: CuriosidadeWhereInput
  }

  /**
   * Curiosidade upsert
   */
  export type CuriosidadeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * The filter to search for the Curiosidade to update in case it exists.
     */
    where: CuriosidadeWhereUniqueInput
    /**
     * In case the Curiosidade found by the `where` argument doesn't exist, create a new Curiosidade with this data.
     */
    create: XOR<CuriosidadeCreateInput, CuriosidadeUncheckedCreateInput>
    /**
     * In case the Curiosidade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CuriosidadeUpdateInput, CuriosidadeUncheckedUpdateInput>
  }

  /**
   * Curiosidade delete
   */
  export type CuriosidadeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
    /**
     * Filter which Curiosidade to delete.
     */
    where: CuriosidadeWhereUniqueInput
  }

  /**
   * Curiosidade deleteMany
   */
  export type CuriosidadeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curiosidades to delete
     */
    where?: CuriosidadeWhereInput
  }

  /**
   * Curiosidade without action
   */
  export type CuriosidadeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curiosidade
     */
    select?: CuriosidadeSelect<ExtArgs> | null
  }


  /**
   * Model Vacina
   */

  export type AggregateVacina = {
    _count: VacinaCountAggregateOutputType | null
    _min: VacinaMinAggregateOutputType | null
    _max: VacinaMaxAggregateOutputType | null
  }

  export type VacinaMinAggregateOutputType = {
    id: string | null
    data_vacinacao: string | null
    vacina: string | null
    clinica: string | null
    intervalo: string | null
    observacao: string | null
    pet_id: string | null
    user_id: string | null
    img_lote: string | null
    proxima_aplicacao: string | null
    notificacoes_enviadas: string | null
  }

  export type VacinaMaxAggregateOutputType = {
    id: string | null
    data_vacinacao: string | null
    vacina: string | null
    clinica: string | null
    intervalo: string | null
    observacao: string | null
    pet_id: string | null
    user_id: string | null
    img_lote: string | null
    proxima_aplicacao: string | null
    notificacoes_enviadas: string | null
  }

  export type VacinaCountAggregateOutputType = {
    id: number
    data_vacinacao: number
    vacina: number
    clinica: number
    intervalo: number
    observacao: number
    pet_id: number
    user_id: number
    img_lote: number
    proxima_aplicacao: number
    notificacoes_enviadas: number
    _all: number
  }


  export type VacinaMinAggregateInputType = {
    id?: true
    data_vacinacao?: true
    vacina?: true
    clinica?: true
    intervalo?: true
    observacao?: true
    pet_id?: true
    user_id?: true
    img_lote?: true
    proxima_aplicacao?: true
    notificacoes_enviadas?: true
  }

  export type VacinaMaxAggregateInputType = {
    id?: true
    data_vacinacao?: true
    vacina?: true
    clinica?: true
    intervalo?: true
    observacao?: true
    pet_id?: true
    user_id?: true
    img_lote?: true
    proxima_aplicacao?: true
    notificacoes_enviadas?: true
  }

  export type VacinaCountAggregateInputType = {
    id?: true
    data_vacinacao?: true
    vacina?: true
    clinica?: true
    intervalo?: true
    observacao?: true
    pet_id?: true
    user_id?: true
    img_lote?: true
    proxima_aplicacao?: true
    notificacoes_enviadas?: true
    _all?: true
  }

  export type VacinaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vacina to aggregate.
     */
    where?: VacinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacinas to fetch.
     */
    orderBy?: VacinaOrderByWithRelationInput | VacinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VacinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vacinas
    **/
    _count?: true | VacinaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VacinaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VacinaMaxAggregateInputType
  }

  export type GetVacinaAggregateType<T extends VacinaAggregateArgs> = {
        [P in keyof T & keyof AggregateVacina]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVacina[P]>
      : GetScalarType<T[P], AggregateVacina[P]>
  }




  export type VacinaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VacinaWhereInput
    orderBy?: VacinaOrderByWithAggregationInput | VacinaOrderByWithAggregationInput[]
    by: VacinaScalarFieldEnum[] | VacinaScalarFieldEnum
    having?: VacinaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VacinaCountAggregateInputType | true
    _min?: VacinaMinAggregateInputType
    _max?: VacinaMaxAggregateInputType
  }

  export type VacinaGroupByOutputType = {
    id: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    pet_id: string
    user_id: string
    img_lote: string
    proxima_aplicacao: string | null
    notificacoes_enviadas: string
    _count: VacinaCountAggregateOutputType | null
    _min: VacinaMinAggregateOutputType | null
    _max: VacinaMaxAggregateOutputType | null
  }

  type GetVacinaGroupByPayload<T extends VacinaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VacinaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VacinaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VacinaGroupByOutputType[P]>
            : GetScalarType<T[P], VacinaGroupByOutputType[P]>
        }
      >
    >


  export type VacinaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data_vacinacao?: boolean
    vacina?: boolean
    clinica?: boolean
    intervalo?: boolean
    observacao?: boolean
    pet_id?: boolean
    user_id?: boolean
    img_lote?: boolean
    proxima_aplicacao?: boolean
    notificacoes_enviadas?: boolean
    pets?: boolean | PetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vacina"]>


  export type VacinaSelectScalar = {
    id?: boolean
    data_vacinacao?: boolean
    vacina?: boolean
    clinica?: boolean
    intervalo?: boolean
    observacao?: boolean
    pet_id?: boolean
    user_id?: boolean
    img_lote?: boolean
    proxima_aplicacao?: boolean
    notificacoes_enviadas?: boolean
  }

  export type VacinaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pets?: boolean | PetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VacinaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vacina"
    objects: {
      pets: Prisma.$PetPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      data_vacinacao: string
      vacina: string
      clinica: string
      intervalo: string
      observacao: string
      pet_id: string
      user_id: string
      img_lote: string
      proxima_aplicacao: string | null
      notificacoes_enviadas: string
    }, ExtArgs["result"]["vacina"]>
    composites: {}
  }

  type VacinaGetPayload<S extends boolean | null | undefined | VacinaDefaultArgs> = $Result.GetResult<Prisma.$VacinaPayload, S>

  type VacinaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VacinaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VacinaCountAggregateInputType | true
    }

  export interface VacinaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vacina'], meta: { name: 'Vacina' } }
    /**
     * Find zero or one Vacina that matches the filter.
     * @param {VacinaFindUniqueArgs} args - Arguments to find a Vacina
     * @example
     * // Get one Vacina
     * const vacina = await prisma.vacina.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VacinaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VacinaFindUniqueArgs<ExtArgs>>
    ): Prisma__VacinaClient<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Vacina that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VacinaFindUniqueOrThrowArgs} args - Arguments to find a Vacina
     * @example
     * // Get one Vacina
     * const vacina = await prisma.vacina.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VacinaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VacinaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VacinaClient<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Vacina that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacinaFindFirstArgs} args - Arguments to find a Vacina
     * @example
     * // Get one Vacina
     * const vacina = await prisma.vacina.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VacinaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VacinaFindFirstArgs<ExtArgs>>
    ): Prisma__VacinaClient<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Vacina that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacinaFindFirstOrThrowArgs} args - Arguments to find a Vacina
     * @example
     * // Get one Vacina
     * const vacina = await prisma.vacina.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VacinaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VacinaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VacinaClient<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Vacinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacinaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vacinas
     * const vacinas = await prisma.vacina.findMany()
     * 
     * // Get first 10 Vacinas
     * const vacinas = await prisma.vacina.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vacinaWithIdOnly = await prisma.vacina.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VacinaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VacinaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Vacina.
     * @param {VacinaCreateArgs} args - Arguments to create a Vacina.
     * @example
     * // Create one Vacina
     * const Vacina = await prisma.vacina.create({
     *   data: {
     *     // ... data to create a Vacina
     *   }
     * })
     * 
    **/
    create<T extends VacinaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VacinaCreateArgs<ExtArgs>>
    ): Prisma__VacinaClient<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Vacinas.
     * @param {VacinaCreateManyArgs} args - Arguments to create many Vacinas.
     * @example
     * // Create many Vacinas
     * const vacina = await prisma.vacina.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends VacinaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VacinaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vacina.
     * @param {VacinaDeleteArgs} args - Arguments to delete one Vacina.
     * @example
     * // Delete one Vacina
     * const Vacina = await prisma.vacina.delete({
     *   where: {
     *     // ... filter to delete one Vacina
     *   }
     * })
     * 
    **/
    delete<T extends VacinaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VacinaDeleteArgs<ExtArgs>>
    ): Prisma__VacinaClient<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Vacina.
     * @param {VacinaUpdateArgs} args - Arguments to update one Vacina.
     * @example
     * // Update one Vacina
     * const vacina = await prisma.vacina.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VacinaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VacinaUpdateArgs<ExtArgs>>
    ): Prisma__VacinaClient<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Vacinas.
     * @param {VacinaDeleteManyArgs} args - Arguments to filter Vacinas to delete.
     * @example
     * // Delete a few Vacinas
     * const { count } = await prisma.vacina.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VacinaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VacinaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vacinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacinaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vacinas
     * const vacina = await prisma.vacina.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VacinaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VacinaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vacina.
     * @param {VacinaUpsertArgs} args - Arguments to update or create a Vacina.
     * @example
     * // Update or create a Vacina
     * const vacina = await prisma.vacina.upsert({
     *   create: {
     *     // ... data to create a Vacina
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vacina we want to update
     *   }
     * })
    **/
    upsert<T extends VacinaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VacinaUpsertArgs<ExtArgs>>
    ): Prisma__VacinaClient<$Result.GetResult<Prisma.$VacinaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Vacinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacinaCountArgs} args - Arguments to filter Vacinas to count.
     * @example
     * // Count the number of Vacinas
     * const count = await prisma.vacina.count({
     *   where: {
     *     // ... the filter for the Vacinas we want to count
     *   }
     * })
    **/
    count<T extends VacinaCountArgs>(
      args?: Subset<T, VacinaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VacinaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vacina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacinaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VacinaAggregateArgs>(args: Subset<T, VacinaAggregateArgs>): Prisma.PrismaPromise<GetVacinaAggregateType<T>>

    /**
     * Group by Vacina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacinaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VacinaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VacinaGroupByArgs['orderBy'] }
        : { orderBy?: VacinaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VacinaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVacinaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vacina model
   */
  readonly fields: VacinaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vacina.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VacinaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pets<T extends PetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PetDefaultArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Vacina model
   */ 
  interface VacinaFieldRefs {
    readonly id: FieldRef<"Vacina", 'String'>
    readonly data_vacinacao: FieldRef<"Vacina", 'String'>
    readonly vacina: FieldRef<"Vacina", 'String'>
    readonly clinica: FieldRef<"Vacina", 'String'>
    readonly intervalo: FieldRef<"Vacina", 'String'>
    readonly observacao: FieldRef<"Vacina", 'String'>
    readonly pet_id: FieldRef<"Vacina", 'String'>
    readonly user_id: FieldRef<"Vacina", 'String'>
    readonly img_lote: FieldRef<"Vacina", 'String'>
    readonly proxima_aplicacao: FieldRef<"Vacina", 'String'>
    readonly notificacoes_enviadas: FieldRef<"Vacina", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vacina findUnique
   */
  export type VacinaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * Filter, which Vacina to fetch.
     */
    where: VacinaWhereUniqueInput
  }

  /**
   * Vacina findUniqueOrThrow
   */
  export type VacinaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * Filter, which Vacina to fetch.
     */
    where: VacinaWhereUniqueInput
  }

  /**
   * Vacina findFirst
   */
  export type VacinaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * Filter, which Vacina to fetch.
     */
    where?: VacinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacinas to fetch.
     */
    orderBy?: VacinaOrderByWithRelationInput | VacinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vacinas.
     */
    cursor?: VacinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vacinas.
     */
    distinct?: VacinaScalarFieldEnum | VacinaScalarFieldEnum[]
  }

  /**
   * Vacina findFirstOrThrow
   */
  export type VacinaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * Filter, which Vacina to fetch.
     */
    where?: VacinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacinas to fetch.
     */
    orderBy?: VacinaOrderByWithRelationInput | VacinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vacinas.
     */
    cursor?: VacinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vacinas.
     */
    distinct?: VacinaScalarFieldEnum | VacinaScalarFieldEnum[]
  }

  /**
   * Vacina findMany
   */
  export type VacinaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * Filter, which Vacinas to fetch.
     */
    where?: VacinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacinas to fetch.
     */
    orderBy?: VacinaOrderByWithRelationInput | VacinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vacinas.
     */
    cursor?: VacinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacinas.
     */
    skip?: number
    distinct?: VacinaScalarFieldEnum | VacinaScalarFieldEnum[]
  }

  /**
   * Vacina create
   */
  export type VacinaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * The data needed to create a Vacina.
     */
    data: XOR<VacinaCreateInput, VacinaUncheckedCreateInput>
  }

  /**
   * Vacina createMany
   */
  export type VacinaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vacinas.
     */
    data: VacinaCreateManyInput | VacinaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vacina update
   */
  export type VacinaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * The data needed to update a Vacina.
     */
    data: XOR<VacinaUpdateInput, VacinaUncheckedUpdateInput>
    /**
     * Choose, which Vacina to update.
     */
    where: VacinaWhereUniqueInput
  }

  /**
   * Vacina updateMany
   */
  export type VacinaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vacinas.
     */
    data: XOR<VacinaUpdateManyMutationInput, VacinaUncheckedUpdateManyInput>
    /**
     * Filter which Vacinas to update
     */
    where?: VacinaWhereInput
  }

  /**
   * Vacina upsert
   */
  export type VacinaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * The filter to search for the Vacina to update in case it exists.
     */
    where: VacinaWhereUniqueInput
    /**
     * In case the Vacina found by the `where` argument doesn't exist, create a new Vacina with this data.
     */
    create: XOR<VacinaCreateInput, VacinaUncheckedCreateInput>
    /**
     * In case the Vacina was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VacinaUpdateInput, VacinaUncheckedUpdateInput>
  }

  /**
   * Vacina delete
   */
  export type VacinaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
    /**
     * Filter which Vacina to delete.
     */
    where: VacinaWhereUniqueInput
  }

  /**
   * Vacina deleteMany
   */
  export type VacinaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vacinas to delete
     */
    where?: VacinaWhereInput
  }

  /**
   * Vacina without action
   */
  export type VacinaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacina
     */
    select?: VacinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VacinaInclude<ExtArgs> | null
  }


  /**
   * Model Exame
   */

  export type AggregateExame = {
    _count: ExameCountAggregateOutputType | null
    _min: ExameMinAggregateOutputType | null
    _max: ExameMaxAggregateOutputType | null
  }

  export type ExameMinAggregateOutputType = {
    id: string | null
    data_exame: string | null
    exame: string | null
    clinica: string | null
    observacao: string | null
    pet_id: string | null
    img_laudo: string | null
  }

  export type ExameMaxAggregateOutputType = {
    id: string | null
    data_exame: string | null
    exame: string | null
    clinica: string | null
    observacao: string | null
    pet_id: string | null
    img_laudo: string | null
  }

  export type ExameCountAggregateOutputType = {
    id: number
    data_exame: number
    exame: number
    clinica: number
    observacao: number
    pet_id: number
    img_laudo: number
    _all: number
  }


  export type ExameMinAggregateInputType = {
    id?: true
    data_exame?: true
    exame?: true
    clinica?: true
    observacao?: true
    pet_id?: true
    img_laudo?: true
  }

  export type ExameMaxAggregateInputType = {
    id?: true
    data_exame?: true
    exame?: true
    clinica?: true
    observacao?: true
    pet_id?: true
    img_laudo?: true
  }

  export type ExameCountAggregateInputType = {
    id?: true
    data_exame?: true
    exame?: true
    clinica?: true
    observacao?: true
    pet_id?: true
    img_laudo?: true
    _all?: true
  }

  export type ExameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exame to aggregate.
     */
    where?: ExameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exames to fetch.
     */
    orderBy?: ExameOrderByWithRelationInput | ExameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exames
    **/
    _count?: true | ExameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExameMaxAggregateInputType
  }

  export type GetExameAggregateType<T extends ExameAggregateArgs> = {
        [P in keyof T & keyof AggregateExame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExame[P]>
      : GetScalarType<T[P], AggregateExame[P]>
  }




  export type ExameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExameWhereInput
    orderBy?: ExameOrderByWithAggregationInput | ExameOrderByWithAggregationInput[]
    by: ExameScalarFieldEnum[] | ExameScalarFieldEnum
    having?: ExameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExameCountAggregateInputType | true
    _min?: ExameMinAggregateInputType
    _max?: ExameMaxAggregateInputType
  }

  export type ExameGroupByOutputType = {
    id: string
    data_exame: string
    exame: string
    clinica: string
    observacao: string
    pet_id: string
    img_laudo: string
    _count: ExameCountAggregateOutputType | null
    _min: ExameMinAggregateOutputType | null
    _max: ExameMaxAggregateOutputType | null
  }

  type GetExameGroupByPayload<T extends ExameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExameGroupByOutputType[P]>
            : GetScalarType<T[P], ExameGroupByOutputType[P]>
        }
      >
    >


  export type ExameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data_exame?: boolean
    exame?: boolean
    clinica?: boolean
    observacao?: boolean
    pet_id?: boolean
    img_laudo?: boolean
    pet?: boolean | PetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exame"]>


  export type ExameSelectScalar = {
    id?: boolean
    data_exame?: boolean
    exame?: boolean
    clinica?: boolean
    observacao?: boolean
    pet_id?: boolean
    img_laudo?: boolean
  }

  export type ExameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pet?: boolean | PetDefaultArgs<ExtArgs>
  }

  export type $ExamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exame"
    objects: {
      pet: Prisma.$PetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      data_exame: string
      exame: string
      clinica: string
      observacao: string
      pet_id: string
      img_laudo: string
    }, ExtArgs["result"]["exame"]>
    composites: {}
  }

  type ExameGetPayload<S extends boolean | null | undefined | ExameDefaultArgs> = $Result.GetResult<Prisma.$ExamePayload, S>

  type ExameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExameCountAggregateInputType | true
    }

  export interface ExameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exame'], meta: { name: 'Exame' } }
    /**
     * Find zero or one Exame that matches the filter.
     * @param {ExameFindUniqueArgs} args - Arguments to find a Exame
     * @example
     * // Get one Exame
     * const exame = await prisma.exame.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExameFindUniqueArgs<ExtArgs>>
    ): Prisma__ExameClient<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exame that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExameFindUniqueOrThrowArgs} args - Arguments to find a Exame
     * @example
     * // Get one Exame
     * const exame = await prisma.exame.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExameClient<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exame that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExameFindFirstArgs} args - Arguments to find a Exame
     * @example
     * // Get one Exame
     * const exame = await prisma.exame.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExameFindFirstArgs<ExtArgs>>
    ): Prisma__ExameClient<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exame that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExameFindFirstOrThrowArgs} args - Arguments to find a Exame
     * @example
     * // Get one Exame
     * const exame = await prisma.exame.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExameClient<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exames
     * const exames = await prisma.exame.findMany()
     * 
     * // Get first 10 Exames
     * const exames = await prisma.exame.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exameWithIdOnly = await prisma.exame.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exame.
     * @param {ExameCreateArgs} args - Arguments to create a Exame.
     * @example
     * // Create one Exame
     * const Exame = await prisma.exame.create({
     *   data: {
     *     // ... data to create a Exame
     *   }
     * })
     * 
    **/
    create<T extends ExameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExameCreateArgs<ExtArgs>>
    ): Prisma__ExameClient<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exames.
     * @param {ExameCreateManyArgs} args - Arguments to create many Exames.
     * @example
     * // Create many Exames
     * const exame = await prisma.exame.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ExameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exame.
     * @param {ExameDeleteArgs} args - Arguments to delete one Exame.
     * @example
     * // Delete one Exame
     * const Exame = await prisma.exame.delete({
     *   where: {
     *     // ... filter to delete one Exame
     *   }
     * })
     * 
    **/
    delete<T extends ExameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExameDeleteArgs<ExtArgs>>
    ): Prisma__ExameClient<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exame.
     * @param {ExameUpdateArgs} args - Arguments to update one Exame.
     * @example
     * // Update one Exame
     * const exame = await prisma.exame.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExameUpdateArgs<ExtArgs>>
    ): Prisma__ExameClient<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exames.
     * @param {ExameDeleteManyArgs} args - Arguments to filter Exames to delete.
     * @example
     * // Delete a few Exames
     * const { count } = await prisma.exame.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exames
     * const exame = await prisma.exame.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exame.
     * @param {ExameUpsertArgs} args - Arguments to update or create a Exame.
     * @example
     * // Update or create a Exame
     * const exame = await prisma.exame.upsert({
     *   create: {
     *     // ... data to create a Exame
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exame we want to update
     *   }
     * })
    **/
    upsert<T extends ExameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExameUpsertArgs<ExtArgs>>
    ): Prisma__ExameClient<$Result.GetResult<Prisma.$ExamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExameCountArgs} args - Arguments to filter Exames to count.
     * @example
     * // Count the number of Exames
     * const count = await prisma.exame.count({
     *   where: {
     *     // ... the filter for the Exames we want to count
     *   }
     * })
    **/
    count<T extends ExameCountArgs>(
      args?: Subset<T, ExameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExameAggregateArgs>(args: Subset<T, ExameAggregateArgs>): Prisma.PrismaPromise<GetExameAggregateType<T>>

    /**
     * Group by Exame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExameGroupByArgs['orderBy'] }
        : { orderBy?: ExameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exame model
   */
  readonly fields: ExameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exame.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pet<T extends PetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PetDefaultArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exame model
   */ 
  interface ExameFieldRefs {
    readonly id: FieldRef<"Exame", 'String'>
    readonly data_exame: FieldRef<"Exame", 'String'>
    readonly exame: FieldRef<"Exame", 'String'>
    readonly clinica: FieldRef<"Exame", 'String'>
    readonly observacao: FieldRef<"Exame", 'String'>
    readonly pet_id: FieldRef<"Exame", 'String'>
    readonly img_laudo: FieldRef<"Exame", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Exame findUnique
   */
  export type ExameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * Filter, which Exame to fetch.
     */
    where: ExameWhereUniqueInput
  }

  /**
   * Exame findUniqueOrThrow
   */
  export type ExameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * Filter, which Exame to fetch.
     */
    where: ExameWhereUniqueInput
  }

  /**
   * Exame findFirst
   */
  export type ExameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * Filter, which Exame to fetch.
     */
    where?: ExameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exames to fetch.
     */
    orderBy?: ExameOrderByWithRelationInput | ExameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exames.
     */
    cursor?: ExameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exames.
     */
    distinct?: ExameScalarFieldEnum | ExameScalarFieldEnum[]
  }

  /**
   * Exame findFirstOrThrow
   */
  export type ExameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * Filter, which Exame to fetch.
     */
    where?: ExameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exames to fetch.
     */
    orderBy?: ExameOrderByWithRelationInput | ExameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exames.
     */
    cursor?: ExameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exames.
     */
    distinct?: ExameScalarFieldEnum | ExameScalarFieldEnum[]
  }

  /**
   * Exame findMany
   */
  export type ExameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * Filter, which Exames to fetch.
     */
    where?: ExameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exames to fetch.
     */
    orderBy?: ExameOrderByWithRelationInput | ExameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exames.
     */
    cursor?: ExameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exames.
     */
    skip?: number
    distinct?: ExameScalarFieldEnum | ExameScalarFieldEnum[]
  }

  /**
   * Exame create
   */
  export type ExameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * The data needed to create a Exame.
     */
    data: XOR<ExameCreateInput, ExameUncheckedCreateInput>
  }

  /**
   * Exame createMany
   */
  export type ExameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exames.
     */
    data: ExameCreateManyInput | ExameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exame update
   */
  export type ExameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * The data needed to update a Exame.
     */
    data: XOR<ExameUpdateInput, ExameUncheckedUpdateInput>
    /**
     * Choose, which Exame to update.
     */
    where: ExameWhereUniqueInput
  }

  /**
   * Exame updateMany
   */
  export type ExameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exames.
     */
    data: XOR<ExameUpdateManyMutationInput, ExameUncheckedUpdateManyInput>
    /**
     * Filter which Exames to update
     */
    where?: ExameWhereInput
  }

  /**
   * Exame upsert
   */
  export type ExameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * The filter to search for the Exame to update in case it exists.
     */
    where: ExameWhereUniqueInput
    /**
     * In case the Exame found by the `where` argument doesn't exist, create a new Exame with this data.
     */
    create: XOR<ExameCreateInput, ExameUncheckedCreateInput>
    /**
     * In case the Exame was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExameUpdateInput, ExameUncheckedUpdateInput>
  }

  /**
   * Exame delete
   */
  export type ExameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
    /**
     * Filter which Exame to delete.
     */
    where: ExameWhereUniqueInput
  }

  /**
   * Exame deleteMany
   */
  export type ExameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exames to delete
     */
    where?: ExameWhereInput
  }

  /**
   * Exame without action
   */
  export type ExameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exame
     */
    select?: ExameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExameInclude<ExtArgs> | null
  }


  /**
   * Model Publicacoes
   */

  export type AggregatePublicacoes = {
    _count: PublicacoesCountAggregateOutputType | null
    _min: PublicacoesMinAggregateOutputType | null
    _max: PublicacoesMaxAggregateOutputType | null
  }

  export type PublicacoesMinAggregateOutputType = {
    id: string | null
    pet_id: string | null
    conteudo: string | null
    img_blog: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PublicacoesMaxAggregateOutputType = {
    id: string | null
    pet_id: string | null
    conteudo: string | null
    img_blog: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PublicacoesCountAggregateOutputType = {
    id: number
    pet_id: number
    conteudo: number
    img_blog: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PublicacoesMinAggregateInputType = {
    id?: true
    pet_id?: true
    conteudo?: true
    img_blog?: true
    created_at?: true
    updated_at?: true
  }

  export type PublicacoesMaxAggregateInputType = {
    id?: true
    pet_id?: true
    conteudo?: true
    img_blog?: true
    created_at?: true
    updated_at?: true
  }

  export type PublicacoesCountAggregateInputType = {
    id?: true
    pet_id?: true
    conteudo?: true
    img_blog?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PublicacoesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publicacoes to aggregate.
     */
    where?: PublicacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacoes to fetch.
     */
    orderBy?: PublicacoesOrderByWithRelationInput | PublicacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublicacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Publicacoes
    **/
    _count?: true | PublicacoesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublicacoesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublicacoesMaxAggregateInputType
  }

  export type GetPublicacoesAggregateType<T extends PublicacoesAggregateArgs> = {
        [P in keyof T & keyof AggregatePublicacoes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublicacoes[P]>
      : GetScalarType<T[P], AggregatePublicacoes[P]>
  }




  export type PublicacoesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicacoesWhereInput
    orderBy?: PublicacoesOrderByWithAggregationInput | PublicacoesOrderByWithAggregationInput[]
    by: PublicacoesScalarFieldEnum[] | PublicacoesScalarFieldEnum
    having?: PublicacoesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublicacoesCountAggregateInputType | true
    _min?: PublicacoesMinAggregateInputType
    _max?: PublicacoesMaxAggregateInputType
  }

  export type PublicacoesGroupByOutputType = {
    id: string
    pet_id: string
    conteudo: string
    img_blog: string
    created_at: Date | null
    updated_at: Date | null
    _count: PublicacoesCountAggregateOutputType | null
    _min: PublicacoesMinAggregateOutputType | null
    _max: PublicacoesMaxAggregateOutputType | null
  }

  type GetPublicacoesGroupByPayload<T extends PublicacoesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublicacoesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublicacoesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublicacoesGroupByOutputType[P]>
            : GetScalarType<T[P], PublicacoesGroupByOutputType[P]>
        }
      >
    >


  export type PublicacoesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pet_id?: boolean
    conteudo?: boolean
    img_blog?: boolean
    created_at?: boolean
    updated_at?: boolean
    pet?: boolean | PetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicacoes"]>


  export type PublicacoesSelectScalar = {
    id?: boolean
    pet_id?: boolean
    conteudo?: boolean
    img_blog?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PublicacoesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pet?: boolean | PetDefaultArgs<ExtArgs>
  }

  export type $PublicacoesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Publicacoes"
    objects: {
      pet: Prisma.$PetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pet_id: string
      conteudo: string
      img_blog: string
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["publicacoes"]>
    composites: {}
  }

  type PublicacoesGetPayload<S extends boolean | null | undefined | PublicacoesDefaultArgs> = $Result.GetResult<Prisma.$PublicacoesPayload, S>

  type PublicacoesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PublicacoesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PublicacoesCountAggregateInputType | true
    }

  export interface PublicacoesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Publicacoes'], meta: { name: 'Publicacoes' } }
    /**
     * Find zero or one Publicacoes that matches the filter.
     * @param {PublicacoesFindUniqueArgs} args - Arguments to find a Publicacoes
     * @example
     * // Get one Publicacoes
     * const publicacoes = await prisma.publicacoes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PublicacoesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacoesFindUniqueArgs<ExtArgs>>
    ): Prisma__PublicacoesClient<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Publicacoes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PublicacoesFindUniqueOrThrowArgs} args - Arguments to find a Publicacoes
     * @example
     * // Get one Publicacoes
     * const publicacoes = await prisma.publicacoes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PublicacoesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacoesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PublicacoesClient<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Publicacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacoesFindFirstArgs} args - Arguments to find a Publicacoes
     * @example
     * // Get one Publicacoes
     * const publicacoes = await prisma.publicacoes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PublicacoesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacoesFindFirstArgs<ExtArgs>>
    ): Prisma__PublicacoesClient<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Publicacoes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacoesFindFirstOrThrowArgs} args - Arguments to find a Publicacoes
     * @example
     * // Get one Publicacoes
     * const publicacoes = await prisma.publicacoes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PublicacoesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacoesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PublicacoesClient<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Publicacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacoesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Publicacoes
     * const publicacoes = await prisma.publicacoes.findMany()
     * 
     * // Get first 10 Publicacoes
     * const publicacoes = await prisma.publicacoes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publicacoesWithIdOnly = await prisma.publicacoes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PublicacoesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacoesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Publicacoes.
     * @param {PublicacoesCreateArgs} args - Arguments to create a Publicacoes.
     * @example
     * // Create one Publicacoes
     * const Publicacoes = await prisma.publicacoes.create({
     *   data: {
     *     // ... data to create a Publicacoes
     *   }
     * })
     * 
    **/
    create<T extends PublicacoesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacoesCreateArgs<ExtArgs>>
    ): Prisma__PublicacoesClient<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Publicacoes.
     * @param {PublicacoesCreateManyArgs} args - Arguments to create many Publicacoes.
     * @example
     * // Create many Publicacoes
     * const publicacoes = await prisma.publicacoes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PublicacoesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacoesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Publicacoes.
     * @param {PublicacoesDeleteArgs} args - Arguments to delete one Publicacoes.
     * @example
     * // Delete one Publicacoes
     * const Publicacoes = await prisma.publicacoes.delete({
     *   where: {
     *     // ... filter to delete one Publicacoes
     *   }
     * })
     * 
    **/
    delete<T extends PublicacoesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacoesDeleteArgs<ExtArgs>>
    ): Prisma__PublicacoesClient<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Publicacoes.
     * @param {PublicacoesUpdateArgs} args - Arguments to update one Publicacoes.
     * @example
     * // Update one Publicacoes
     * const publicacoes = await prisma.publicacoes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PublicacoesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacoesUpdateArgs<ExtArgs>>
    ): Prisma__PublicacoesClient<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Publicacoes.
     * @param {PublicacoesDeleteManyArgs} args - Arguments to filter Publicacoes to delete.
     * @example
     * // Delete a few Publicacoes
     * const { count } = await prisma.publicacoes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PublicacoesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacoesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Publicacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacoesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Publicacoes
     * const publicacoes = await prisma.publicacoes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PublicacoesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacoesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Publicacoes.
     * @param {PublicacoesUpsertArgs} args - Arguments to update or create a Publicacoes.
     * @example
     * // Update or create a Publicacoes
     * const publicacoes = await prisma.publicacoes.upsert({
     *   create: {
     *     // ... data to create a Publicacoes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Publicacoes we want to update
     *   }
     * })
    **/
    upsert<T extends PublicacoesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacoesUpsertArgs<ExtArgs>>
    ): Prisma__PublicacoesClient<$Result.GetResult<Prisma.$PublicacoesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Publicacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacoesCountArgs} args - Arguments to filter Publicacoes to count.
     * @example
     * // Count the number of Publicacoes
     * const count = await prisma.publicacoes.count({
     *   where: {
     *     // ... the filter for the Publicacoes we want to count
     *   }
     * })
    **/
    count<T extends PublicacoesCountArgs>(
      args?: Subset<T, PublicacoesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublicacoesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Publicacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacoesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublicacoesAggregateArgs>(args: Subset<T, PublicacoesAggregateArgs>): Prisma.PrismaPromise<GetPublicacoesAggregateType<T>>

    /**
     * Group by Publicacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacoesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublicacoesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublicacoesGroupByArgs['orderBy'] }
        : { orderBy?: PublicacoesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublicacoesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicacoesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Publicacoes model
   */
  readonly fields: PublicacoesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Publicacoes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublicacoesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pet<T extends PetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PetDefaultArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Publicacoes model
   */ 
  interface PublicacoesFieldRefs {
    readonly id: FieldRef<"Publicacoes", 'String'>
    readonly pet_id: FieldRef<"Publicacoes", 'String'>
    readonly conteudo: FieldRef<"Publicacoes", 'String'>
    readonly img_blog: FieldRef<"Publicacoes", 'String'>
    readonly created_at: FieldRef<"Publicacoes", 'DateTime'>
    readonly updated_at: FieldRef<"Publicacoes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Publicacoes findUnique
   */
  export type PublicacoesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * Filter, which Publicacoes to fetch.
     */
    where: PublicacoesWhereUniqueInput
  }

  /**
   * Publicacoes findUniqueOrThrow
   */
  export type PublicacoesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * Filter, which Publicacoes to fetch.
     */
    where: PublicacoesWhereUniqueInput
  }

  /**
   * Publicacoes findFirst
   */
  export type PublicacoesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * Filter, which Publicacoes to fetch.
     */
    where?: PublicacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacoes to fetch.
     */
    orderBy?: PublicacoesOrderByWithRelationInput | PublicacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publicacoes.
     */
    cursor?: PublicacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publicacoes.
     */
    distinct?: PublicacoesScalarFieldEnum | PublicacoesScalarFieldEnum[]
  }

  /**
   * Publicacoes findFirstOrThrow
   */
  export type PublicacoesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * Filter, which Publicacoes to fetch.
     */
    where?: PublicacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacoes to fetch.
     */
    orderBy?: PublicacoesOrderByWithRelationInput | PublicacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publicacoes.
     */
    cursor?: PublicacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publicacoes.
     */
    distinct?: PublicacoesScalarFieldEnum | PublicacoesScalarFieldEnum[]
  }

  /**
   * Publicacoes findMany
   */
  export type PublicacoesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * Filter, which Publicacoes to fetch.
     */
    where?: PublicacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacoes to fetch.
     */
    orderBy?: PublicacoesOrderByWithRelationInput | PublicacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Publicacoes.
     */
    cursor?: PublicacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacoes.
     */
    skip?: number
    distinct?: PublicacoesScalarFieldEnum | PublicacoesScalarFieldEnum[]
  }

  /**
   * Publicacoes create
   */
  export type PublicacoesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * The data needed to create a Publicacoes.
     */
    data: XOR<PublicacoesCreateInput, PublicacoesUncheckedCreateInput>
  }

  /**
   * Publicacoes createMany
   */
  export type PublicacoesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Publicacoes.
     */
    data: PublicacoesCreateManyInput | PublicacoesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Publicacoes update
   */
  export type PublicacoesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * The data needed to update a Publicacoes.
     */
    data: XOR<PublicacoesUpdateInput, PublicacoesUncheckedUpdateInput>
    /**
     * Choose, which Publicacoes to update.
     */
    where: PublicacoesWhereUniqueInput
  }

  /**
   * Publicacoes updateMany
   */
  export type PublicacoesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Publicacoes.
     */
    data: XOR<PublicacoesUpdateManyMutationInput, PublicacoesUncheckedUpdateManyInput>
    /**
     * Filter which Publicacoes to update
     */
    where?: PublicacoesWhereInput
  }

  /**
   * Publicacoes upsert
   */
  export type PublicacoesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * The filter to search for the Publicacoes to update in case it exists.
     */
    where: PublicacoesWhereUniqueInput
    /**
     * In case the Publicacoes found by the `where` argument doesn't exist, create a new Publicacoes with this data.
     */
    create: XOR<PublicacoesCreateInput, PublicacoesUncheckedCreateInput>
    /**
     * In case the Publicacoes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublicacoesUpdateInput, PublicacoesUncheckedUpdateInput>
  }

  /**
   * Publicacoes delete
   */
  export type PublicacoesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
    /**
     * Filter which Publicacoes to delete.
     */
    where: PublicacoesWhereUniqueInput
  }

  /**
   * Publicacoes deleteMany
   */
  export type PublicacoesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publicacoes to delete
     */
    where?: PublicacoesWhereInput
  }

  /**
   * Publicacoes without action
   */
  export type PublicacoesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacoes
     */
    select?: PublicacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacoesInclude<ExtArgs> | null
  }


  /**
   * Model Agendamentos
   */

  export type AggregateAgendamentos = {
    _count: AgendamentosCountAggregateOutputType | null
    _avg: AgendamentosAvgAggregateOutputType | null
    _sum: AgendamentosSumAggregateOutputType | null
    _min: AgendamentosMinAggregateOutputType | null
    _max: AgendamentosMaxAggregateOutputType | null
  }

  export type AgendamentosAvgAggregateOutputType = {
    status: number | null
  }

  export type AgendamentosSumAggregateOutputType = {
    status: number | null
  }

  export type AgendamentosMinAggregateOutputType = {
    id: string | null
    pet_id: string | null
    id_horario: string | null
    id_empresa: string | null
    id_servico: string | null
    user_id: string | null
    data_agendamento: string | null
    horario_agendamento: string | null
    status: number | null
    notificacoes_enviadas: string | null
  }

  export type AgendamentosMaxAggregateOutputType = {
    id: string | null
    pet_id: string | null
    id_horario: string | null
    id_empresa: string | null
    id_servico: string | null
    user_id: string | null
    data_agendamento: string | null
    horario_agendamento: string | null
    status: number | null
    notificacoes_enviadas: string | null
  }

  export type AgendamentosCountAggregateOutputType = {
    id: number
    pet_id: number
    id_horario: number
    id_empresa: number
    id_servico: number
    user_id: number
    data_agendamento: number
    horario_agendamento: number
    status: number
    notificacoes_enviadas: number
    _all: number
  }


  export type AgendamentosAvgAggregateInputType = {
    status?: true
  }

  export type AgendamentosSumAggregateInputType = {
    status?: true
  }

  export type AgendamentosMinAggregateInputType = {
    id?: true
    pet_id?: true
    id_horario?: true
    id_empresa?: true
    id_servico?: true
    user_id?: true
    data_agendamento?: true
    horario_agendamento?: true
    status?: true
    notificacoes_enviadas?: true
  }

  export type AgendamentosMaxAggregateInputType = {
    id?: true
    pet_id?: true
    id_horario?: true
    id_empresa?: true
    id_servico?: true
    user_id?: true
    data_agendamento?: true
    horario_agendamento?: true
    status?: true
    notificacoes_enviadas?: true
  }

  export type AgendamentosCountAggregateInputType = {
    id?: true
    pet_id?: true
    id_horario?: true
    id_empresa?: true
    id_servico?: true
    user_id?: true
    data_agendamento?: true
    horario_agendamento?: true
    status?: true
    notificacoes_enviadas?: true
    _all?: true
  }

  export type AgendamentosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agendamentos to aggregate.
     */
    where?: AgendamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgendamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agendamentos
    **/
    _count?: true | AgendamentosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgendamentosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgendamentosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgendamentosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgendamentosMaxAggregateInputType
  }

  export type GetAgendamentosAggregateType<T extends AgendamentosAggregateArgs> = {
        [P in keyof T & keyof AggregateAgendamentos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgendamentos[P]>
      : GetScalarType<T[P], AggregateAgendamentos[P]>
  }




  export type AgendamentosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentosWhereInput
    orderBy?: AgendamentosOrderByWithAggregationInput | AgendamentosOrderByWithAggregationInput[]
    by: AgendamentosScalarFieldEnum[] | AgendamentosScalarFieldEnum
    having?: AgendamentosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgendamentosCountAggregateInputType | true
    _avg?: AgendamentosAvgAggregateInputType
    _sum?: AgendamentosSumAggregateInputType
    _min?: AgendamentosMinAggregateInputType
    _max?: AgendamentosMaxAggregateInputType
  }

  export type AgendamentosGroupByOutputType = {
    id: string
    pet_id: string
    id_horario: string
    id_empresa: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status: number
    notificacoes_enviadas: string
    _count: AgendamentosCountAggregateOutputType | null
    _avg: AgendamentosAvgAggregateOutputType | null
    _sum: AgendamentosSumAggregateOutputType | null
    _min: AgendamentosMinAggregateOutputType | null
    _max: AgendamentosMaxAggregateOutputType | null
  }

  type GetAgendamentosGroupByPayload<T extends AgendamentosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgendamentosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgendamentosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgendamentosGroupByOutputType[P]>
            : GetScalarType<T[P], AgendamentosGroupByOutputType[P]>
        }
      >
    >


  export type AgendamentosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pet_id?: boolean
    id_horario?: boolean
    id_empresa?: boolean
    id_servico?: boolean
    user_id?: boolean
    data_agendamento?: boolean
    horario_agendamento?: boolean
    status?: boolean
    notificacoes_enviadas?: boolean
    pets?: boolean | PetDefaultArgs<ExtArgs>
    users?: boolean | UserDefaultArgs<ExtArgs>
    horarios?: boolean | HorariosDefaultArgs<ExtArgs>
    empresas?: boolean | EmpresaDefaultArgs<ExtArgs>
    servicos?: boolean | ServicosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agendamentos"]>


  export type AgendamentosSelectScalar = {
    id?: boolean
    pet_id?: boolean
    id_horario?: boolean
    id_empresa?: boolean
    id_servico?: boolean
    user_id?: boolean
    data_agendamento?: boolean
    horario_agendamento?: boolean
    status?: boolean
    notificacoes_enviadas?: boolean
  }

  export type AgendamentosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pets?: boolean | PetDefaultArgs<ExtArgs>
    users?: boolean | UserDefaultArgs<ExtArgs>
    horarios?: boolean | HorariosDefaultArgs<ExtArgs>
    empresas?: boolean | EmpresaDefaultArgs<ExtArgs>
    servicos?: boolean | ServicosDefaultArgs<ExtArgs>
  }

  export type $AgendamentosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agendamentos"
    objects: {
      pets: Prisma.$PetPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>
      horarios: Prisma.$HorariosPayload<ExtArgs>
      empresas: Prisma.$EmpresaPayload<ExtArgs>
      servicos: Prisma.$ServicosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pet_id: string
      id_horario: string
      id_empresa: string
      id_servico: string
      user_id: string
      data_agendamento: string
      horario_agendamento: string
      status: number
      notificacoes_enviadas: string
    }, ExtArgs["result"]["agendamentos"]>
    composites: {}
  }

  type AgendamentosGetPayload<S extends boolean | null | undefined | AgendamentosDefaultArgs> = $Result.GetResult<Prisma.$AgendamentosPayload, S>

  type AgendamentosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgendamentosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgendamentosCountAggregateInputType | true
    }

  export interface AgendamentosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agendamentos'], meta: { name: 'Agendamentos' } }
    /**
     * Find zero or one Agendamentos that matches the filter.
     * @param {AgendamentosFindUniqueArgs} args - Arguments to find a Agendamentos
     * @example
     * // Get one Agendamentos
     * const agendamentos = await prisma.agendamentos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AgendamentosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentosFindUniqueArgs<ExtArgs>>
    ): Prisma__AgendamentosClient<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Agendamentos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgendamentosFindUniqueOrThrowArgs} args - Arguments to find a Agendamentos
     * @example
     * // Get one Agendamentos
     * const agendamentos = await prisma.agendamentos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AgendamentosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AgendamentosClient<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Agendamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentosFindFirstArgs} args - Arguments to find a Agendamentos
     * @example
     * // Get one Agendamentos
     * const agendamentos = await prisma.agendamentos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AgendamentosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentosFindFirstArgs<ExtArgs>>
    ): Prisma__AgendamentosClient<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Agendamentos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentosFindFirstOrThrowArgs} args - Arguments to find a Agendamentos
     * @example
     * // Get one Agendamentos
     * const agendamentos = await prisma.agendamentos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AgendamentosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AgendamentosClient<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Agendamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agendamentos
     * const agendamentos = await prisma.agendamentos.findMany()
     * 
     * // Get first 10 Agendamentos
     * const agendamentos = await prisma.agendamentos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agendamentosWithIdOnly = await prisma.agendamentos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AgendamentosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Agendamentos.
     * @param {AgendamentosCreateArgs} args - Arguments to create a Agendamentos.
     * @example
     * // Create one Agendamentos
     * const Agendamentos = await prisma.agendamentos.create({
     *   data: {
     *     // ... data to create a Agendamentos
     *   }
     * })
     * 
    **/
    create<T extends AgendamentosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentosCreateArgs<ExtArgs>>
    ): Prisma__AgendamentosClient<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Agendamentos.
     * @param {AgendamentosCreateManyArgs} args - Arguments to create many Agendamentos.
     * @example
     * // Create many Agendamentos
     * const agendamentos = await prisma.agendamentos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AgendamentosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Agendamentos.
     * @param {AgendamentosDeleteArgs} args - Arguments to delete one Agendamentos.
     * @example
     * // Delete one Agendamentos
     * const Agendamentos = await prisma.agendamentos.delete({
     *   where: {
     *     // ... filter to delete one Agendamentos
     *   }
     * })
     * 
    **/
    delete<T extends AgendamentosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentosDeleteArgs<ExtArgs>>
    ): Prisma__AgendamentosClient<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Agendamentos.
     * @param {AgendamentosUpdateArgs} args - Arguments to update one Agendamentos.
     * @example
     * // Update one Agendamentos
     * const agendamentos = await prisma.agendamentos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgendamentosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentosUpdateArgs<ExtArgs>>
    ): Prisma__AgendamentosClient<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Agendamentos.
     * @param {AgendamentosDeleteManyArgs} args - Arguments to filter Agendamentos to delete.
     * @example
     * // Delete a few Agendamentos
     * const { count } = await prisma.agendamentos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgendamentosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agendamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agendamentos
     * const agendamentos = await prisma.agendamentos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgendamentosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agendamentos.
     * @param {AgendamentosUpsertArgs} args - Arguments to update or create a Agendamentos.
     * @example
     * // Update or create a Agendamentos
     * const agendamentos = await prisma.agendamentos.upsert({
     *   create: {
     *     // ... data to create a Agendamentos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agendamentos we want to update
     *   }
     * })
    **/
    upsert<T extends AgendamentosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentosUpsertArgs<ExtArgs>>
    ): Prisma__AgendamentosClient<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Agendamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentosCountArgs} args - Arguments to filter Agendamentos to count.
     * @example
     * // Count the number of Agendamentos
     * const count = await prisma.agendamentos.count({
     *   where: {
     *     // ... the filter for the Agendamentos we want to count
     *   }
     * })
    **/
    count<T extends AgendamentosCountArgs>(
      args?: Subset<T, AgendamentosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgendamentosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agendamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgendamentosAggregateArgs>(args: Subset<T, AgendamentosAggregateArgs>): Prisma.PrismaPromise<GetAgendamentosAggregateType<T>>

    /**
     * Group by Agendamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgendamentosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgendamentosGroupByArgs['orderBy'] }
        : { orderBy?: AgendamentosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgendamentosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgendamentosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agendamentos model
   */
  readonly fields: AgendamentosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agendamentos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgendamentosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pets<T extends PetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PetDefaultArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    horarios<T extends HorariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HorariosDefaultArgs<ExtArgs>>): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    empresas<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    servicos<T extends ServicosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicosDefaultArgs<ExtArgs>>): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Agendamentos model
   */ 
  interface AgendamentosFieldRefs {
    readonly id: FieldRef<"Agendamentos", 'String'>
    readonly pet_id: FieldRef<"Agendamentos", 'String'>
    readonly id_horario: FieldRef<"Agendamentos", 'String'>
    readonly id_empresa: FieldRef<"Agendamentos", 'String'>
    readonly id_servico: FieldRef<"Agendamentos", 'String'>
    readonly user_id: FieldRef<"Agendamentos", 'String'>
    readonly data_agendamento: FieldRef<"Agendamentos", 'String'>
    readonly horario_agendamento: FieldRef<"Agendamentos", 'String'>
    readonly status: FieldRef<"Agendamentos", 'Int'>
    readonly notificacoes_enviadas: FieldRef<"Agendamentos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Agendamentos findUnique
   */
  export type AgendamentosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * Filter, which Agendamentos to fetch.
     */
    where: AgendamentosWhereUniqueInput
  }

  /**
   * Agendamentos findUniqueOrThrow
   */
  export type AgendamentosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * Filter, which Agendamentos to fetch.
     */
    where: AgendamentosWhereUniqueInput
  }

  /**
   * Agendamentos findFirst
   */
  export type AgendamentosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * Filter, which Agendamentos to fetch.
     */
    where?: AgendamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agendamentos.
     */
    cursor?: AgendamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agendamentos.
     */
    distinct?: AgendamentosScalarFieldEnum | AgendamentosScalarFieldEnum[]
  }

  /**
   * Agendamentos findFirstOrThrow
   */
  export type AgendamentosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * Filter, which Agendamentos to fetch.
     */
    where?: AgendamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agendamentos.
     */
    cursor?: AgendamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agendamentos.
     */
    distinct?: AgendamentosScalarFieldEnum | AgendamentosScalarFieldEnum[]
  }

  /**
   * Agendamentos findMany
   */
  export type AgendamentosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * Filter, which Agendamentos to fetch.
     */
    where?: AgendamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agendamentos.
     */
    cursor?: AgendamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    distinct?: AgendamentosScalarFieldEnum | AgendamentosScalarFieldEnum[]
  }

  /**
   * Agendamentos create
   */
  export type AgendamentosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * The data needed to create a Agendamentos.
     */
    data: XOR<AgendamentosCreateInput, AgendamentosUncheckedCreateInput>
  }

  /**
   * Agendamentos createMany
   */
  export type AgendamentosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agendamentos.
     */
    data: AgendamentosCreateManyInput | AgendamentosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agendamentos update
   */
  export type AgendamentosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * The data needed to update a Agendamentos.
     */
    data: XOR<AgendamentosUpdateInput, AgendamentosUncheckedUpdateInput>
    /**
     * Choose, which Agendamentos to update.
     */
    where: AgendamentosWhereUniqueInput
  }

  /**
   * Agendamentos updateMany
   */
  export type AgendamentosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agendamentos.
     */
    data: XOR<AgendamentosUpdateManyMutationInput, AgendamentosUncheckedUpdateManyInput>
    /**
     * Filter which Agendamentos to update
     */
    where?: AgendamentosWhereInput
  }

  /**
   * Agendamentos upsert
   */
  export type AgendamentosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * The filter to search for the Agendamentos to update in case it exists.
     */
    where: AgendamentosWhereUniqueInput
    /**
     * In case the Agendamentos found by the `where` argument doesn't exist, create a new Agendamentos with this data.
     */
    create: XOR<AgendamentosCreateInput, AgendamentosUncheckedCreateInput>
    /**
     * In case the Agendamentos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgendamentosUpdateInput, AgendamentosUncheckedUpdateInput>
  }

  /**
   * Agendamentos delete
   */
  export type AgendamentosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    /**
     * Filter which Agendamentos to delete.
     */
    where: AgendamentosWhereUniqueInput
  }

  /**
   * Agendamentos deleteMany
   */
  export type AgendamentosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agendamentos to delete
     */
    where?: AgendamentosWhereInput
  }

  /**
   * Agendamentos without action
   */
  export type AgendamentosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
  }


  /**
   * Model Servicos
   */

  export type AggregateServicos = {
    _count: ServicosCountAggregateOutputType | null
    _avg: ServicosAvgAggregateOutputType | null
    _sum: ServicosSumAggregateOutputType | null
    _min: ServicosMinAggregateOutputType | null
    _max: ServicosMaxAggregateOutputType | null
  }

  export type ServicosAvgAggregateOutputType = {
    tipo: number | null
    status: number | null
  }

  export type ServicosSumAggregateOutputType = {
    tipo: number | null
    status: number | null
  }

  export type ServicosMinAggregateOutputType = {
    id: string | null
    nome: string | null
    tipo: number | null
    status: number | null
  }

  export type ServicosMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    tipo: number | null
    status: number | null
  }

  export type ServicosCountAggregateOutputType = {
    id: number
    nome: number
    tipo: number
    status: number
    _all: number
  }


  export type ServicosAvgAggregateInputType = {
    tipo?: true
    status?: true
  }

  export type ServicosSumAggregateInputType = {
    tipo?: true
    status?: true
  }

  export type ServicosMinAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    status?: true
  }

  export type ServicosMaxAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    status?: true
  }

  export type ServicosCountAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    status?: true
    _all?: true
  }

  export type ServicosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicos to aggregate.
     */
    where?: ServicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicosOrderByWithRelationInput | ServicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servicos
    **/
    _count?: true | ServicosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicosMaxAggregateInputType
  }

  export type GetServicosAggregateType<T extends ServicosAggregateArgs> = {
        [P in keyof T & keyof AggregateServicos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicos[P]>
      : GetScalarType<T[P], AggregateServicos[P]>
  }




  export type ServicosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicosWhereInput
    orderBy?: ServicosOrderByWithAggregationInput | ServicosOrderByWithAggregationInput[]
    by: ServicosScalarFieldEnum[] | ServicosScalarFieldEnum
    having?: ServicosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicosCountAggregateInputType | true
    _avg?: ServicosAvgAggregateInputType
    _sum?: ServicosSumAggregateInputType
    _min?: ServicosMinAggregateInputType
    _max?: ServicosMaxAggregateInputType
  }

  export type ServicosGroupByOutputType = {
    id: string
    nome: string
    tipo: number
    status: number
    _count: ServicosCountAggregateOutputType | null
    _avg: ServicosAvgAggregateOutputType | null
    _sum: ServicosSumAggregateOutputType | null
    _min: ServicosMinAggregateOutputType | null
    _max: ServicosMaxAggregateOutputType | null
  }

  type GetServicosGroupByPayload<T extends ServicosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicosGroupByOutputType[P]>
            : GetScalarType<T[P], ServicosGroupByOutputType[P]>
        }
      >
    >


  export type ServicosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tipo?: boolean
    status?: boolean
    agendamentos?: boolean | Servicos$agendamentosArgs<ExtArgs>
    _count?: boolean | ServicosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicos"]>


  export type ServicosSelectScalar = {
    id?: boolean
    nome?: boolean
    tipo?: boolean
    status?: boolean
  }

  export type ServicosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agendamentos?: boolean | Servicos$agendamentosArgs<ExtArgs>
    _count?: boolean | ServicosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ServicosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servicos"
    objects: {
      agendamentos: Prisma.$AgendamentosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      tipo: number
      status: number
    }, ExtArgs["result"]["servicos"]>
    composites: {}
  }

  type ServicosGetPayload<S extends boolean | null | undefined | ServicosDefaultArgs> = $Result.GetResult<Prisma.$ServicosPayload, S>

  type ServicosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServicosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServicosCountAggregateInputType | true
    }

  export interface ServicosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servicos'], meta: { name: 'Servicos' } }
    /**
     * Find zero or one Servicos that matches the filter.
     * @param {ServicosFindUniqueArgs} args - Arguments to find a Servicos
     * @example
     * // Get one Servicos
     * const servicos = await prisma.servicos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServicosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServicosFindUniqueArgs<ExtArgs>>
    ): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Servicos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ServicosFindUniqueOrThrowArgs} args - Arguments to find a Servicos
     * @example
     * // Get one Servicos
     * const servicos = await prisma.servicos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServicosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Servicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicosFindFirstArgs} args - Arguments to find a Servicos
     * @example
     * // Get one Servicos
     * const servicos = await prisma.servicos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServicosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicosFindFirstArgs<ExtArgs>>
    ): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Servicos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicosFindFirstOrThrowArgs} args - Arguments to find a Servicos
     * @example
     * // Get one Servicos
     * const servicos = await prisma.servicos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServicosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Servicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicos
     * const servicos = await prisma.servicos.findMany()
     * 
     * // Get first 10 Servicos
     * const servicos = await prisma.servicos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicosWithIdOnly = await prisma.servicos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServicosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Servicos.
     * @param {ServicosCreateArgs} args - Arguments to create a Servicos.
     * @example
     * // Create one Servicos
     * const Servicos = await prisma.servicos.create({
     *   data: {
     *     // ... data to create a Servicos
     *   }
     * })
     * 
    **/
    create<T extends ServicosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServicosCreateArgs<ExtArgs>>
    ): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Servicos.
     * @param {ServicosCreateManyArgs} args - Arguments to create many Servicos.
     * @example
     * // Create many Servicos
     * const servicos = await prisma.servicos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ServicosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Servicos.
     * @param {ServicosDeleteArgs} args - Arguments to delete one Servicos.
     * @example
     * // Delete one Servicos
     * const Servicos = await prisma.servicos.delete({
     *   where: {
     *     // ... filter to delete one Servicos
     *   }
     * })
     * 
    **/
    delete<T extends ServicosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServicosDeleteArgs<ExtArgs>>
    ): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Servicos.
     * @param {ServicosUpdateArgs} args - Arguments to update one Servicos.
     * @example
     * // Update one Servicos
     * const servicos = await prisma.servicos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServicosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServicosUpdateArgs<ExtArgs>>
    ): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Servicos.
     * @param {ServicosDeleteManyArgs} args - Arguments to filter Servicos to delete.
     * @example
     * // Delete a few Servicos
     * const { count } = await prisma.servicos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServicosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicos
     * const servicos = await prisma.servicos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServicosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServicosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Servicos.
     * @param {ServicosUpsertArgs} args - Arguments to update or create a Servicos.
     * @example
     * // Update or create a Servicos
     * const servicos = await prisma.servicos.upsert({
     *   create: {
     *     // ... data to create a Servicos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servicos we want to update
     *   }
     * })
    **/
    upsert<T extends ServicosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServicosUpsertArgs<ExtArgs>>
    ): Prisma__ServicosClient<$Result.GetResult<Prisma.$ServicosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Servicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicosCountArgs} args - Arguments to filter Servicos to count.
     * @example
     * // Count the number of Servicos
     * const count = await prisma.servicos.count({
     *   where: {
     *     // ... the filter for the Servicos we want to count
     *   }
     * })
    **/
    count<T extends ServicosCountArgs>(
      args?: Subset<T, ServicosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicosAggregateArgs>(args: Subset<T, ServicosAggregateArgs>): Prisma.PrismaPromise<GetServicosAggregateType<T>>

    /**
     * Group by Servicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicosGroupByArgs['orderBy'] }
        : { orderBy?: ServicosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servicos model
   */
  readonly fields: ServicosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servicos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    agendamentos<T extends Servicos$agendamentosArgs<ExtArgs> = {}>(args?: Subset<T, Servicos$agendamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Servicos model
   */ 
  interface ServicosFieldRefs {
    readonly id: FieldRef<"Servicos", 'String'>
    readonly nome: FieldRef<"Servicos", 'String'>
    readonly tipo: FieldRef<"Servicos", 'Int'>
    readonly status: FieldRef<"Servicos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Servicos findUnique
   */
  export type ServicosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * Filter, which Servicos to fetch.
     */
    where: ServicosWhereUniqueInput
  }

  /**
   * Servicos findUniqueOrThrow
   */
  export type ServicosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * Filter, which Servicos to fetch.
     */
    where: ServicosWhereUniqueInput
  }

  /**
   * Servicos findFirst
   */
  export type ServicosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * Filter, which Servicos to fetch.
     */
    where?: ServicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicosOrderByWithRelationInput | ServicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicos.
     */
    cursor?: ServicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicos.
     */
    distinct?: ServicosScalarFieldEnum | ServicosScalarFieldEnum[]
  }

  /**
   * Servicos findFirstOrThrow
   */
  export type ServicosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * Filter, which Servicos to fetch.
     */
    where?: ServicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicosOrderByWithRelationInput | ServicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicos.
     */
    cursor?: ServicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicos.
     */
    distinct?: ServicosScalarFieldEnum | ServicosScalarFieldEnum[]
  }

  /**
   * Servicos findMany
   */
  export type ServicosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * Filter, which Servicos to fetch.
     */
    where?: ServicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicosOrderByWithRelationInput | ServicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servicos.
     */
    cursor?: ServicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    distinct?: ServicosScalarFieldEnum | ServicosScalarFieldEnum[]
  }

  /**
   * Servicos create
   */
  export type ServicosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * The data needed to create a Servicos.
     */
    data: XOR<ServicosCreateInput, ServicosUncheckedCreateInput>
  }

  /**
   * Servicos createMany
   */
  export type ServicosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servicos.
     */
    data: ServicosCreateManyInput | ServicosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Servicos update
   */
  export type ServicosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * The data needed to update a Servicos.
     */
    data: XOR<ServicosUpdateInput, ServicosUncheckedUpdateInput>
    /**
     * Choose, which Servicos to update.
     */
    where: ServicosWhereUniqueInput
  }

  /**
   * Servicos updateMany
   */
  export type ServicosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servicos.
     */
    data: XOR<ServicosUpdateManyMutationInput, ServicosUncheckedUpdateManyInput>
    /**
     * Filter which Servicos to update
     */
    where?: ServicosWhereInput
  }

  /**
   * Servicos upsert
   */
  export type ServicosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * The filter to search for the Servicos to update in case it exists.
     */
    where: ServicosWhereUniqueInput
    /**
     * In case the Servicos found by the `where` argument doesn't exist, create a new Servicos with this data.
     */
    create: XOR<ServicosCreateInput, ServicosUncheckedCreateInput>
    /**
     * In case the Servicos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicosUpdateInput, ServicosUncheckedUpdateInput>
  }

  /**
   * Servicos delete
   */
  export type ServicosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
    /**
     * Filter which Servicos to delete.
     */
    where: ServicosWhereUniqueInput
  }

  /**
   * Servicos deleteMany
   */
  export type ServicosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicos to delete
     */
    where?: ServicosWhereInput
  }

  /**
   * Servicos.agendamentos
   */
  export type Servicos$agendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    where?: AgendamentosWhereInput
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    cursor?: AgendamentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendamentosScalarFieldEnum | AgendamentosScalarFieldEnum[]
  }

  /**
   * Servicos without action
   */
  export type ServicosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicos
     */
    select?: ServicosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicosInclude<ExtArgs> | null
  }


  /**
   * Model Horarios
   */

  export type AggregateHorarios = {
    _count: HorariosCountAggregateOutputType | null
    _avg: HorariosAvgAggregateOutputType | null
    _sum: HorariosSumAggregateOutputType | null
    _min: HorariosMinAggregateOutputType | null
    _max: HorariosMaxAggregateOutputType | null
  }

  export type HorariosAvgAggregateOutputType = {
    tipo: number | null
    status: number | null
  }

  export type HorariosSumAggregateOutputType = {
    tipo: number | null
    status: number | null
  }

  export type HorariosMinAggregateOutputType = {
    id: string | null
    tipo: number | null
    sub_categoria: string | null
    id_clinica: string | null
    data_servico: string | null
    horario_servico: string | null
    status: number | null
  }

  export type HorariosMaxAggregateOutputType = {
    id: string | null
    tipo: number | null
    sub_categoria: string | null
    id_clinica: string | null
    data_servico: string | null
    horario_servico: string | null
    status: number | null
  }

  export type HorariosCountAggregateOutputType = {
    id: number
    tipo: number
    sub_categoria: number
    id_clinica: number
    data_servico: number
    horario_servico: number
    status: number
    _all: number
  }


  export type HorariosAvgAggregateInputType = {
    tipo?: true
    status?: true
  }

  export type HorariosSumAggregateInputType = {
    tipo?: true
    status?: true
  }

  export type HorariosMinAggregateInputType = {
    id?: true
    tipo?: true
    sub_categoria?: true
    id_clinica?: true
    data_servico?: true
    horario_servico?: true
    status?: true
  }

  export type HorariosMaxAggregateInputType = {
    id?: true
    tipo?: true
    sub_categoria?: true
    id_clinica?: true
    data_servico?: true
    horario_servico?: true
    status?: true
  }

  export type HorariosCountAggregateInputType = {
    id?: true
    tipo?: true
    sub_categoria?: true
    id_clinica?: true
    data_servico?: true
    horario_servico?: true
    status?: true
    _all?: true
  }

  export type HorariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Horarios to aggregate.
     */
    where?: HorariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Horarios to fetch.
     */
    orderBy?: HorariosOrderByWithRelationInput | HorariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HorariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Horarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Horarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Horarios
    **/
    _count?: true | HorariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HorariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HorariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HorariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HorariosMaxAggregateInputType
  }

  export type GetHorariosAggregateType<T extends HorariosAggregateArgs> = {
        [P in keyof T & keyof AggregateHorarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHorarios[P]>
      : GetScalarType<T[P], AggregateHorarios[P]>
  }




  export type HorariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HorariosWhereInput
    orderBy?: HorariosOrderByWithAggregationInput | HorariosOrderByWithAggregationInput[]
    by: HorariosScalarFieldEnum[] | HorariosScalarFieldEnum
    having?: HorariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HorariosCountAggregateInputType | true
    _avg?: HorariosAvgAggregateInputType
    _sum?: HorariosSumAggregateInputType
    _min?: HorariosMinAggregateInputType
    _max?: HorariosMaxAggregateInputType
  }

  export type HorariosGroupByOutputType = {
    id: string
    tipo: number
    sub_categoria: string | null
    id_clinica: string
    data_servico: string
    horario_servico: string
    status: number
    _count: HorariosCountAggregateOutputType | null
    _avg: HorariosAvgAggregateOutputType | null
    _sum: HorariosSumAggregateOutputType | null
    _min: HorariosMinAggregateOutputType | null
    _max: HorariosMaxAggregateOutputType | null
  }

  type GetHorariosGroupByPayload<T extends HorariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HorariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HorariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HorariosGroupByOutputType[P]>
            : GetScalarType<T[P], HorariosGroupByOutputType[P]>
        }
      >
    >


  export type HorariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    sub_categoria?: boolean
    id_clinica?: boolean
    data_servico?: boolean
    horario_servico?: boolean
    status?: boolean
    agendamentos?: boolean | Horarios$agendamentosArgs<ExtArgs>
    _count?: boolean | HorariosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["horarios"]>


  export type HorariosSelectScalar = {
    id?: boolean
    tipo?: boolean
    sub_categoria?: boolean
    id_clinica?: boolean
    data_servico?: boolean
    horario_servico?: boolean
    status?: boolean
  }

  export type HorariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agendamentos?: boolean | Horarios$agendamentosArgs<ExtArgs>
    _count?: boolean | HorariosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $HorariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Horarios"
    objects: {
      agendamentos: Prisma.$AgendamentosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tipo: number
      sub_categoria: string | null
      id_clinica: string
      data_servico: string
      horario_servico: string
      status: number
    }, ExtArgs["result"]["horarios"]>
    composites: {}
  }

  type HorariosGetPayload<S extends boolean | null | undefined | HorariosDefaultArgs> = $Result.GetResult<Prisma.$HorariosPayload, S>

  type HorariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HorariosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HorariosCountAggregateInputType | true
    }

  export interface HorariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Horarios'], meta: { name: 'Horarios' } }
    /**
     * Find zero or one Horarios that matches the filter.
     * @param {HorariosFindUniqueArgs} args - Arguments to find a Horarios
     * @example
     * // Get one Horarios
     * const horarios = await prisma.horarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HorariosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HorariosFindUniqueArgs<ExtArgs>>
    ): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Horarios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HorariosFindUniqueOrThrowArgs} args - Arguments to find a Horarios
     * @example
     * // Get one Horarios
     * const horarios = await prisma.horarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HorariosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HorariosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Horarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HorariosFindFirstArgs} args - Arguments to find a Horarios
     * @example
     * // Get one Horarios
     * const horarios = await prisma.horarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HorariosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HorariosFindFirstArgs<ExtArgs>>
    ): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Horarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HorariosFindFirstOrThrowArgs} args - Arguments to find a Horarios
     * @example
     * // Get one Horarios
     * const horarios = await prisma.horarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HorariosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HorariosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Horarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HorariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Horarios
     * const horarios = await prisma.horarios.findMany()
     * 
     * // Get first 10 Horarios
     * const horarios = await prisma.horarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const horariosWithIdOnly = await prisma.horarios.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HorariosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HorariosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Horarios.
     * @param {HorariosCreateArgs} args - Arguments to create a Horarios.
     * @example
     * // Create one Horarios
     * const Horarios = await prisma.horarios.create({
     *   data: {
     *     // ... data to create a Horarios
     *   }
     * })
     * 
    **/
    create<T extends HorariosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HorariosCreateArgs<ExtArgs>>
    ): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Horarios.
     * @param {HorariosCreateManyArgs} args - Arguments to create many Horarios.
     * @example
     * // Create many Horarios
     * const horarios = await prisma.horarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends HorariosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HorariosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Horarios.
     * @param {HorariosDeleteArgs} args - Arguments to delete one Horarios.
     * @example
     * // Delete one Horarios
     * const Horarios = await prisma.horarios.delete({
     *   where: {
     *     // ... filter to delete one Horarios
     *   }
     * })
     * 
    **/
    delete<T extends HorariosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HorariosDeleteArgs<ExtArgs>>
    ): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Horarios.
     * @param {HorariosUpdateArgs} args - Arguments to update one Horarios.
     * @example
     * // Update one Horarios
     * const horarios = await prisma.horarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HorariosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HorariosUpdateArgs<ExtArgs>>
    ): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Horarios.
     * @param {HorariosDeleteManyArgs} args - Arguments to filter Horarios to delete.
     * @example
     * // Delete a few Horarios
     * const { count } = await prisma.horarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HorariosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HorariosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Horarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HorariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Horarios
     * const horarios = await prisma.horarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HorariosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HorariosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Horarios.
     * @param {HorariosUpsertArgs} args - Arguments to update or create a Horarios.
     * @example
     * // Update or create a Horarios
     * const horarios = await prisma.horarios.upsert({
     *   create: {
     *     // ... data to create a Horarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Horarios we want to update
     *   }
     * })
    **/
    upsert<T extends HorariosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HorariosUpsertArgs<ExtArgs>>
    ): Prisma__HorariosClient<$Result.GetResult<Prisma.$HorariosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Horarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HorariosCountArgs} args - Arguments to filter Horarios to count.
     * @example
     * // Count the number of Horarios
     * const count = await prisma.horarios.count({
     *   where: {
     *     // ... the filter for the Horarios we want to count
     *   }
     * })
    **/
    count<T extends HorariosCountArgs>(
      args?: Subset<T, HorariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HorariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Horarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HorariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HorariosAggregateArgs>(args: Subset<T, HorariosAggregateArgs>): Prisma.PrismaPromise<GetHorariosAggregateType<T>>

    /**
     * Group by Horarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HorariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HorariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HorariosGroupByArgs['orderBy'] }
        : { orderBy?: HorariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HorariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHorariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Horarios model
   */
  readonly fields: HorariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Horarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HorariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    agendamentos<T extends Horarios$agendamentosArgs<ExtArgs> = {}>(args?: Subset<T, Horarios$agendamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Horarios model
   */ 
  interface HorariosFieldRefs {
    readonly id: FieldRef<"Horarios", 'String'>
    readonly tipo: FieldRef<"Horarios", 'Int'>
    readonly sub_categoria: FieldRef<"Horarios", 'String'>
    readonly id_clinica: FieldRef<"Horarios", 'String'>
    readonly data_servico: FieldRef<"Horarios", 'String'>
    readonly horario_servico: FieldRef<"Horarios", 'String'>
    readonly status: FieldRef<"Horarios", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Horarios findUnique
   */
  export type HorariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * Filter, which Horarios to fetch.
     */
    where: HorariosWhereUniqueInput
  }

  /**
   * Horarios findUniqueOrThrow
   */
  export type HorariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * Filter, which Horarios to fetch.
     */
    where: HorariosWhereUniqueInput
  }

  /**
   * Horarios findFirst
   */
  export type HorariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * Filter, which Horarios to fetch.
     */
    where?: HorariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Horarios to fetch.
     */
    orderBy?: HorariosOrderByWithRelationInput | HorariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Horarios.
     */
    cursor?: HorariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Horarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Horarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Horarios.
     */
    distinct?: HorariosScalarFieldEnum | HorariosScalarFieldEnum[]
  }

  /**
   * Horarios findFirstOrThrow
   */
  export type HorariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * Filter, which Horarios to fetch.
     */
    where?: HorariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Horarios to fetch.
     */
    orderBy?: HorariosOrderByWithRelationInput | HorariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Horarios.
     */
    cursor?: HorariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Horarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Horarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Horarios.
     */
    distinct?: HorariosScalarFieldEnum | HorariosScalarFieldEnum[]
  }

  /**
   * Horarios findMany
   */
  export type HorariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * Filter, which Horarios to fetch.
     */
    where?: HorariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Horarios to fetch.
     */
    orderBy?: HorariosOrderByWithRelationInput | HorariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Horarios.
     */
    cursor?: HorariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Horarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Horarios.
     */
    skip?: number
    distinct?: HorariosScalarFieldEnum | HorariosScalarFieldEnum[]
  }

  /**
   * Horarios create
   */
  export type HorariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * The data needed to create a Horarios.
     */
    data: XOR<HorariosCreateInput, HorariosUncheckedCreateInput>
  }

  /**
   * Horarios createMany
   */
  export type HorariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Horarios.
     */
    data: HorariosCreateManyInput | HorariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Horarios update
   */
  export type HorariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * The data needed to update a Horarios.
     */
    data: XOR<HorariosUpdateInput, HorariosUncheckedUpdateInput>
    /**
     * Choose, which Horarios to update.
     */
    where: HorariosWhereUniqueInput
  }

  /**
   * Horarios updateMany
   */
  export type HorariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Horarios.
     */
    data: XOR<HorariosUpdateManyMutationInput, HorariosUncheckedUpdateManyInput>
    /**
     * Filter which Horarios to update
     */
    where?: HorariosWhereInput
  }

  /**
   * Horarios upsert
   */
  export type HorariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * The filter to search for the Horarios to update in case it exists.
     */
    where: HorariosWhereUniqueInput
    /**
     * In case the Horarios found by the `where` argument doesn't exist, create a new Horarios with this data.
     */
    create: XOR<HorariosCreateInput, HorariosUncheckedCreateInput>
    /**
     * In case the Horarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HorariosUpdateInput, HorariosUncheckedUpdateInput>
  }

  /**
   * Horarios delete
   */
  export type HorariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
    /**
     * Filter which Horarios to delete.
     */
    where: HorariosWhereUniqueInput
  }

  /**
   * Horarios deleteMany
   */
  export type HorariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Horarios to delete
     */
    where?: HorariosWhereInput
  }

  /**
   * Horarios.agendamentos
   */
  export type Horarios$agendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    where?: AgendamentosWhereInput
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    cursor?: AgendamentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendamentosScalarFieldEnum | AgendamentosScalarFieldEnum[]
  }

  /**
   * Horarios without action
   */
  export type HorariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Horarios
     */
    select?: HorariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HorariosInclude<ExtArgs> | null
  }


  /**
   * Model Empresa
   */

  export type AggregateEmpresa = {
    _count: EmpresaCountAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  export type EmpresaMinAggregateOutputType = {
    id: string | null
    cnpj: string | null
    nome: string | null
  }

  export type EmpresaMaxAggregateOutputType = {
    id: string | null
    cnpj: string | null
    nome: string | null
  }

  export type EmpresaCountAggregateOutputType = {
    id: number
    cnpj: number
    nome: number
    _all: number
  }


  export type EmpresaMinAggregateInputType = {
    id?: true
    cnpj?: true
    nome?: true
  }

  export type EmpresaMaxAggregateInputType = {
    id?: true
    cnpj?: true
    nome?: true
  }

  export type EmpresaCountAggregateInputType = {
    id?: true
    cnpj?: true
    nome?: true
    _all?: true
  }

  export type EmpresaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Empresa to aggregate.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Empresas
    **/
    _count?: true | EmpresaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpresaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpresaMaxAggregateInputType
  }

  export type GetEmpresaAggregateType<T extends EmpresaAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpresa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpresa[P]>
      : GetScalarType<T[P], AggregateEmpresa[P]>
  }




  export type EmpresaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmpresaWhereInput
    orderBy?: EmpresaOrderByWithAggregationInput | EmpresaOrderByWithAggregationInput[]
    by: EmpresaScalarFieldEnum[] | EmpresaScalarFieldEnum
    having?: EmpresaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpresaCountAggregateInputType | true
    _min?: EmpresaMinAggregateInputType
    _max?: EmpresaMaxAggregateInputType
  }

  export type EmpresaGroupByOutputType = {
    id: string
    cnpj: string
    nome: string
    _count: EmpresaCountAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  type GetEmpresaGroupByPayload<T extends EmpresaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmpresaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpresaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
            : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
        }
      >
    >


  export type EmpresaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpj?: boolean
    nome?: boolean
    agendamentos?: boolean | Empresa$agendamentosArgs<ExtArgs>
    _count?: boolean | EmpresaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["empresa"]>


  export type EmpresaSelectScalar = {
    id?: boolean
    cnpj?: boolean
    nome?: boolean
  }

  export type EmpresaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agendamentos?: boolean | Empresa$agendamentosArgs<ExtArgs>
    _count?: boolean | EmpresaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmpresaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Empresa"
    objects: {
      agendamentos: Prisma.$AgendamentosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cnpj: string
      nome: string
    }, ExtArgs["result"]["empresa"]>
    composites: {}
  }

  type EmpresaGetPayload<S extends boolean | null | undefined | EmpresaDefaultArgs> = $Result.GetResult<Prisma.$EmpresaPayload, S>

  type EmpresaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmpresaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmpresaCountAggregateInputType | true
    }

  export interface EmpresaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Empresa'], meta: { name: 'Empresa' } }
    /**
     * Find zero or one Empresa that matches the filter.
     * @param {EmpresaFindUniqueArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmpresaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmpresaFindUniqueArgs<ExtArgs>>
    ): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Empresa that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmpresaFindUniqueOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmpresaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmpresaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Empresa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmpresaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmpresaFindFirstArgs<ExtArgs>>
    ): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Empresa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmpresaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmpresaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Empresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Empresas
     * const empresas = await prisma.empresa.findMany()
     * 
     * // Get first 10 Empresas
     * const empresas = await prisma.empresa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const empresaWithIdOnly = await prisma.empresa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmpresaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmpresaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Empresa.
     * @param {EmpresaCreateArgs} args - Arguments to create a Empresa.
     * @example
     * // Create one Empresa
     * const Empresa = await prisma.empresa.create({
     *   data: {
     *     // ... data to create a Empresa
     *   }
     * })
     * 
    **/
    create<T extends EmpresaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmpresaCreateArgs<ExtArgs>>
    ): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Empresas.
     * @param {EmpresaCreateManyArgs} args - Arguments to create many Empresas.
     * @example
     * // Create many Empresas
     * const empresa = await prisma.empresa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EmpresaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmpresaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Empresa.
     * @param {EmpresaDeleteArgs} args - Arguments to delete one Empresa.
     * @example
     * // Delete one Empresa
     * const Empresa = await prisma.empresa.delete({
     *   where: {
     *     // ... filter to delete one Empresa
     *   }
     * })
     * 
    **/
    delete<T extends EmpresaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmpresaDeleteArgs<ExtArgs>>
    ): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Empresa.
     * @param {EmpresaUpdateArgs} args - Arguments to update one Empresa.
     * @example
     * // Update one Empresa
     * const empresa = await prisma.empresa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmpresaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmpresaUpdateArgs<ExtArgs>>
    ): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Empresas.
     * @param {EmpresaDeleteManyArgs} args - Arguments to filter Empresas to delete.
     * @example
     * // Delete a few Empresas
     * const { count } = await prisma.empresa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmpresaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmpresaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Empresas
     * const empresa = await prisma.empresa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmpresaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmpresaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Empresa.
     * @param {EmpresaUpsertArgs} args - Arguments to update or create a Empresa.
     * @example
     * // Update or create a Empresa
     * const empresa = await prisma.empresa.upsert({
     *   create: {
     *     // ... data to create a Empresa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Empresa we want to update
     *   }
     * })
    **/
    upsert<T extends EmpresaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmpresaUpsertArgs<ExtArgs>>
    ): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaCountArgs} args - Arguments to filter Empresas to count.
     * @example
     * // Count the number of Empresas
     * const count = await prisma.empresa.count({
     *   where: {
     *     // ... the filter for the Empresas we want to count
     *   }
     * })
    **/
    count<T extends EmpresaCountArgs>(
      args?: Subset<T, EmpresaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpresaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpresaAggregateArgs>(args: Subset<T, EmpresaAggregateArgs>): Prisma.PrismaPromise<GetEmpresaAggregateType<T>>

    /**
     * Group by Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmpresaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmpresaGroupByArgs['orderBy'] }
        : { orderBy?: EmpresaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmpresaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Empresa model
   */
  readonly fields: EmpresaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Empresa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmpresaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    agendamentos<T extends Empresa$agendamentosArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$agendamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Empresa model
   */ 
  interface EmpresaFieldRefs {
    readonly id: FieldRef<"Empresa", 'String'>
    readonly cnpj: FieldRef<"Empresa", 'String'>
    readonly nome: FieldRef<"Empresa", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Empresa findUnique
   */
  export type EmpresaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa findUniqueOrThrow
   */
  export type EmpresaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa findFirst
   */
  export type EmpresaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa findFirstOrThrow
   */
  export type EmpresaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa findMany
   */
  export type EmpresaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresas to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa create
   */
  export type EmpresaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The data needed to create a Empresa.
     */
    data: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
  }

  /**
   * Empresa createMany
   */
  export type EmpresaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Empresas.
     */
    data: EmpresaCreateManyInput | EmpresaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Empresa update
   */
  export type EmpresaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The data needed to update a Empresa.
     */
    data: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
    /**
     * Choose, which Empresa to update.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa updateMany
   */
  export type EmpresaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Empresas.
     */
    data: XOR<EmpresaUpdateManyMutationInput, EmpresaUncheckedUpdateManyInput>
    /**
     * Filter which Empresas to update
     */
    where?: EmpresaWhereInput
  }

  /**
   * Empresa upsert
   */
  export type EmpresaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The filter to search for the Empresa to update in case it exists.
     */
    where: EmpresaWhereUniqueInput
    /**
     * In case the Empresa found by the `where` argument doesn't exist, create a new Empresa with this data.
     */
    create: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
    /**
     * In case the Empresa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
  }

  /**
   * Empresa delete
   */
  export type EmpresaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter which Empresa to delete.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa deleteMany
   */
  export type EmpresaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Empresas to delete
     */
    where?: EmpresaWhereInput
  }

  /**
   * Empresa.agendamentos
   */
  export type Empresa$agendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamentos
     */
    select?: AgendamentosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentosInclude<ExtArgs> | null
    where?: AgendamentosWhereInput
    orderBy?: AgendamentosOrderByWithRelationInput | AgendamentosOrderByWithRelationInput[]
    cursor?: AgendamentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendamentosScalarFieldEnum | AgendamentosScalarFieldEnum[]
  }

  /**
   * Empresa without action
   */
  export type EmpresaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
  }


  /**
   * Model ExpoToken
   */

  export type AggregateExpoToken = {
    _count: ExpoTokenCountAggregateOutputType | null
    _min: ExpoTokenMinAggregateOutputType | null
    _max: ExpoTokenMaxAggregateOutputType | null
  }

  export type ExpoTokenMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    token: string | null
    created_at: Date | null
  }

  export type ExpoTokenMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    token: string | null
    created_at: Date | null
  }

  export type ExpoTokenCountAggregateOutputType = {
    id: number
    user_id: number
    token: number
    created_at: number
    _all: number
  }


  export type ExpoTokenMinAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    created_at?: true
  }

  export type ExpoTokenMaxAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    created_at?: true
  }

  export type ExpoTokenCountAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    created_at?: true
    _all?: true
  }

  export type ExpoTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExpoToken to aggregate.
     */
    where?: ExpoTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpoTokens to fetch.
     */
    orderBy?: ExpoTokenOrderByWithRelationInput | ExpoTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpoTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpoTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpoTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExpoTokens
    **/
    _count?: true | ExpoTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpoTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpoTokenMaxAggregateInputType
  }

  export type GetExpoTokenAggregateType<T extends ExpoTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateExpoToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpoToken[P]>
      : GetScalarType<T[P], AggregateExpoToken[P]>
  }




  export type ExpoTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpoTokenWhereInput
    orderBy?: ExpoTokenOrderByWithAggregationInput | ExpoTokenOrderByWithAggregationInput[]
    by: ExpoTokenScalarFieldEnum[] | ExpoTokenScalarFieldEnum
    having?: ExpoTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpoTokenCountAggregateInputType | true
    _min?: ExpoTokenMinAggregateInputType
    _max?: ExpoTokenMaxAggregateInputType
  }

  export type ExpoTokenGroupByOutputType = {
    id: string
    user_id: string
    token: string
    created_at: Date | null
    _count: ExpoTokenCountAggregateOutputType | null
    _min: ExpoTokenMinAggregateOutputType | null
    _max: ExpoTokenMaxAggregateOutputType | null
  }

  type GetExpoTokenGroupByPayload<T extends ExpoTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpoTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpoTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpoTokenGroupByOutputType[P]>
            : GetScalarType<T[P], ExpoTokenGroupByOutputType[P]>
        }
      >
    >


  export type ExpoTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    token?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expoToken"]>


  export type ExpoTokenSelectScalar = {
    id?: boolean
    user_id?: boolean
    token?: boolean
    created_at?: boolean
  }

  export type ExpoTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ExpoTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExpoToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      token: string
      created_at: Date | null
    }, ExtArgs["result"]["expoToken"]>
    composites: {}
  }

  type ExpoTokenGetPayload<S extends boolean | null | undefined | ExpoTokenDefaultArgs> = $Result.GetResult<Prisma.$ExpoTokenPayload, S>

  type ExpoTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExpoTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExpoTokenCountAggregateInputType | true
    }

  export interface ExpoTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExpoToken'], meta: { name: 'ExpoToken' } }
    /**
     * Find zero or one ExpoToken that matches the filter.
     * @param {ExpoTokenFindUniqueArgs} args - Arguments to find a ExpoToken
     * @example
     * // Get one ExpoToken
     * const expoToken = await prisma.expoToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExpoTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExpoTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__ExpoTokenClient<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ExpoToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExpoTokenFindUniqueOrThrowArgs} args - Arguments to find a ExpoToken
     * @example
     * // Get one ExpoToken
     * const expoToken = await prisma.expoToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExpoTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpoTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExpoTokenClient<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ExpoToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpoTokenFindFirstArgs} args - Arguments to find a ExpoToken
     * @example
     * // Get one ExpoToken
     * const expoToken = await prisma.expoToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExpoTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpoTokenFindFirstArgs<ExtArgs>>
    ): Prisma__ExpoTokenClient<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ExpoToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpoTokenFindFirstOrThrowArgs} args - Arguments to find a ExpoToken
     * @example
     * // Get one ExpoToken
     * const expoToken = await prisma.expoToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExpoTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpoTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExpoTokenClient<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ExpoTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpoTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExpoTokens
     * const expoTokens = await prisma.expoToken.findMany()
     * 
     * // Get first 10 ExpoTokens
     * const expoTokens = await prisma.expoToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expoTokenWithIdOnly = await prisma.expoToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExpoTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpoTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ExpoToken.
     * @param {ExpoTokenCreateArgs} args - Arguments to create a ExpoToken.
     * @example
     * // Create one ExpoToken
     * const ExpoToken = await prisma.expoToken.create({
     *   data: {
     *     // ... data to create a ExpoToken
     *   }
     * })
     * 
    **/
    create<T extends ExpoTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExpoTokenCreateArgs<ExtArgs>>
    ): Prisma__ExpoTokenClient<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ExpoTokens.
     * @param {ExpoTokenCreateManyArgs} args - Arguments to create many ExpoTokens.
     * @example
     * // Create many ExpoTokens
     * const expoToken = await prisma.expoToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ExpoTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpoTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExpoToken.
     * @param {ExpoTokenDeleteArgs} args - Arguments to delete one ExpoToken.
     * @example
     * // Delete one ExpoToken
     * const ExpoToken = await prisma.expoToken.delete({
     *   where: {
     *     // ... filter to delete one ExpoToken
     *   }
     * })
     * 
    **/
    delete<T extends ExpoTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExpoTokenDeleteArgs<ExtArgs>>
    ): Prisma__ExpoTokenClient<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ExpoToken.
     * @param {ExpoTokenUpdateArgs} args - Arguments to update one ExpoToken.
     * @example
     * // Update one ExpoToken
     * const expoToken = await prisma.expoToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExpoTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExpoTokenUpdateArgs<ExtArgs>>
    ): Prisma__ExpoTokenClient<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ExpoTokens.
     * @param {ExpoTokenDeleteManyArgs} args - Arguments to filter ExpoTokens to delete.
     * @example
     * // Delete a few ExpoTokens
     * const { count } = await prisma.expoToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExpoTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpoTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExpoTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpoTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExpoTokens
     * const expoToken = await prisma.expoToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExpoTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExpoTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExpoToken.
     * @param {ExpoTokenUpsertArgs} args - Arguments to update or create a ExpoToken.
     * @example
     * // Update or create a ExpoToken
     * const expoToken = await prisma.expoToken.upsert({
     *   create: {
     *     // ... data to create a ExpoToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExpoToken we want to update
     *   }
     * })
    **/
    upsert<T extends ExpoTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExpoTokenUpsertArgs<ExtArgs>>
    ): Prisma__ExpoTokenClient<$Result.GetResult<Prisma.$ExpoTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ExpoTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpoTokenCountArgs} args - Arguments to filter ExpoTokens to count.
     * @example
     * // Count the number of ExpoTokens
     * const count = await prisma.expoToken.count({
     *   where: {
     *     // ... the filter for the ExpoTokens we want to count
     *   }
     * })
    **/
    count<T extends ExpoTokenCountArgs>(
      args?: Subset<T, ExpoTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpoTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExpoToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpoTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpoTokenAggregateArgs>(args: Subset<T, ExpoTokenAggregateArgs>): Prisma.PrismaPromise<GetExpoTokenAggregateType<T>>

    /**
     * Group by ExpoToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpoTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpoTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpoTokenGroupByArgs['orderBy'] }
        : { orderBy?: ExpoTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpoTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpoTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExpoToken model
   */
  readonly fields: ExpoTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExpoToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpoTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ExpoToken model
   */ 
  interface ExpoTokenFieldRefs {
    readonly id: FieldRef<"ExpoToken", 'String'>
    readonly user_id: FieldRef<"ExpoToken", 'String'>
    readonly token: FieldRef<"ExpoToken", 'String'>
    readonly created_at: FieldRef<"ExpoToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExpoToken findUnique
   */
  export type ExpoTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * Filter, which ExpoToken to fetch.
     */
    where: ExpoTokenWhereUniqueInput
  }

  /**
   * ExpoToken findUniqueOrThrow
   */
  export type ExpoTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * Filter, which ExpoToken to fetch.
     */
    where: ExpoTokenWhereUniqueInput
  }

  /**
   * ExpoToken findFirst
   */
  export type ExpoTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * Filter, which ExpoToken to fetch.
     */
    where?: ExpoTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpoTokens to fetch.
     */
    orderBy?: ExpoTokenOrderByWithRelationInput | ExpoTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExpoTokens.
     */
    cursor?: ExpoTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpoTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpoTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExpoTokens.
     */
    distinct?: ExpoTokenScalarFieldEnum | ExpoTokenScalarFieldEnum[]
  }

  /**
   * ExpoToken findFirstOrThrow
   */
  export type ExpoTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * Filter, which ExpoToken to fetch.
     */
    where?: ExpoTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpoTokens to fetch.
     */
    orderBy?: ExpoTokenOrderByWithRelationInput | ExpoTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExpoTokens.
     */
    cursor?: ExpoTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpoTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpoTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExpoTokens.
     */
    distinct?: ExpoTokenScalarFieldEnum | ExpoTokenScalarFieldEnum[]
  }

  /**
   * ExpoToken findMany
   */
  export type ExpoTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * Filter, which ExpoTokens to fetch.
     */
    where?: ExpoTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExpoTokens to fetch.
     */
    orderBy?: ExpoTokenOrderByWithRelationInput | ExpoTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExpoTokens.
     */
    cursor?: ExpoTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExpoTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExpoTokens.
     */
    skip?: number
    distinct?: ExpoTokenScalarFieldEnum | ExpoTokenScalarFieldEnum[]
  }

  /**
   * ExpoToken create
   */
  export type ExpoTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a ExpoToken.
     */
    data: XOR<ExpoTokenCreateInput, ExpoTokenUncheckedCreateInput>
  }

  /**
   * ExpoToken createMany
   */
  export type ExpoTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExpoTokens.
     */
    data: ExpoTokenCreateManyInput | ExpoTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExpoToken update
   */
  export type ExpoTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a ExpoToken.
     */
    data: XOR<ExpoTokenUpdateInput, ExpoTokenUncheckedUpdateInput>
    /**
     * Choose, which ExpoToken to update.
     */
    where: ExpoTokenWhereUniqueInput
  }

  /**
   * ExpoToken updateMany
   */
  export type ExpoTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExpoTokens.
     */
    data: XOR<ExpoTokenUpdateManyMutationInput, ExpoTokenUncheckedUpdateManyInput>
    /**
     * Filter which ExpoTokens to update
     */
    where?: ExpoTokenWhereInput
  }

  /**
   * ExpoToken upsert
   */
  export type ExpoTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the ExpoToken to update in case it exists.
     */
    where: ExpoTokenWhereUniqueInput
    /**
     * In case the ExpoToken found by the `where` argument doesn't exist, create a new ExpoToken with this data.
     */
    create: XOR<ExpoTokenCreateInput, ExpoTokenUncheckedCreateInput>
    /**
     * In case the ExpoToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpoTokenUpdateInput, ExpoTokenUncheckedUpdateInput>
  }

  /**
   * ExpoToken delete
   */
  export type ExpoTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
    /**
     * Filter which ExpoToken to delete.
     */
    where: ExpoTokenWhereUniqueInput
  }

  /**
   * ExpoToken deleteMany
   */
  export type ExpoTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExpoTokens to delete
     */
    where?: ExpoTokenWhereInput
  }

  /**
   * ExpoToken without action
   */
  export type ExpoTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpoToken
     */
    select?: ExpoTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpoTokenInclude<ExtArgs> | null
  }


  /**
   * Model Clinica
   */

  export type AggregateClinica = {
    _count: ClinicaCountAggregateOutputType | null
    _avg: ClinicaAvgAggregateOutputType | null
    _sum: ClinicaSumAggregateOutputType | null
    _min: ClinicaMinAggregateOutputType | null
    _max: ClinicaMaxAggregateOutputType | null
  }

  export type ClinicaAvgAggregateOutputType = {
    status: number | null
  }

  export type ClinicaSumAggregateOutputType = {
    status: number | null
  }

  export type ClinicaMinAggregateOutputType = {
    id: string | null
    responsavel: string | null
    razaoSocial: string | null
    password: string | null
    email: string | null
    telefone: string | null
    cnjp: string | null
    cep: string | null
    endereco: string | null
    numero: string | null
    uf: string | null
    cidade: string | null
    complemento: string | null
    img_clinica: string | null
    status: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClinicaMaxAggregateOutputType = {
    id: string | null
    responsavel: string | null
    razaoSocial: string | null
    password: string | null
    email: string | null
    telefone: string | null
    cnjp: string | null
    cep: string | null
    endereco: string | null
    numero: string | null
    uf: string | null
    cidade: string | null
    complemento: string | null
    img_clinica: string | null
    status: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClinicaCountAggregateOutputType = {
    id: number
    responsavel: number
    razaoSocial: number
    password: number
    email: number
    telefone: number
    cnjp: number
    cep: number
    endereco: number
    numero: number
    uf: number
    cidade: number
    complemento: number
    img_clinica: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ClinicaAvgAggregateInputType = {
    status?: true
  }

  export type ClinicaSumAggregateInputType = {
    status?: true
  }

  export type ClinicaMinAggregateInputType = {
    id?: true
    responsavel?: true
    razaoSocial?: true
    password?: true
    email?: true
    telefone?: true
    cnjp?: true
    cep?: true
    endereco?: true
    numero?: true
    uf?: true
    cidade?: true
    complemento?: true
    img_clinica?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type ClinicaMaxAggregateInputType = {
    id?: true
    responsavel?: true
    razaoSocial?: true
    password?: true
    email?: true
    telefone?: true
    cnjp?: true
    cep?: true
    endereco?: true
    numero?: true
    uf?: true
    cidade?: true
    complemento?: true
    img_clinica?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type ClinicaCountAggregateInputType = {
    id?: true
    responsavel?: true
    razaoSocial?: true
    password?: true
    email?: true
    telefone?: true
    cnjp?: true
    cep?: true
    endereco?: true
    numero?: true
    uf?: true
    cidade?: true
    complemento?: true
    img_clinica?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ClinicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clinica to aggregate.
     */
    where?: ClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinicas to fetch.
     */
    orderBy?: ClinicaOrderByWithRelationInput | ClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clinicas
    **/
    _count?: true | ClinicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClinicaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClinicaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClinicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClinicaMaxAggregateInputType
  }

  export type GetClinicaAggregateType<T extends ClinicaAggregateArgs> = {
        [P in keyof T & keyof AggregateClinica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClinica[P]>
      : GetScalarType<T[P], AggregateClinica[P]>
  }




  export type ClinicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicaWhereInput
    orderBy?: ClinicaOrderByWithAggregationInput | ClinicaOrderByWithAggregationInput[]
    by: ClinicaScalarFieldEnum[] | ClinicaScalarFieldEnum
    having?: ClinicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClinicaCountAggregateInputType | true
    _avg?: ClinicaAvgAggregateInputType
    _sum?: ClinicaSumAggregateInputType
    _min?: ClinicaMinAggregateInputType
    _max?: ClinicaMaxAggregateInputType
  }

  export type ClinicaGroupByOutputType = {
    id: string
    responsavel: string
    razaoSocial: string
    password: string
    email: string
    telefone: string
    cnjp: string
    cep: string
    endereco: string
    numero: string
    uf: string
    cidade: string
    complemento: string | null
    img_clinica: string | null
    status: number
    created_at: Date | null
    updated_at: Date | null
    _count: ClinicaCountAggregateOutputType | null
    _avg: ClinicaAvgAggregateOutputType | null
    _sum: ClinicaSumAggregateOutputType | null
    _min: ClinicaMinAggregateOutputType | null
    _max: ClinicaMaxAggregateOutputType | null
  }

  type GetClinicaGroupByPayload<T extends ClinicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClinicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClinicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClinicaGroupByOutputType[P]>
            : GetScalarType<T[P], ClinicaGroupByOutputType[P]>
        }
      >
    >


  export type ClinicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    responsavel?: boolean
    razaoSocial?: boolean
    password?: boolean
    email?: boolean
    telefone?: boolean
    cnjp?: boolean
    cep?: boolean
    endereco?: boolean
    numero?: boolean
    uf?: boolean
    cidade?: boolean
    complemento?: boolean
    img_clinica?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["clinica"]>


  export type ClinicaSelectScalar = {
    id?: boolean
    responsavel?: boolean
    razaoSocial?: boolean
    password?: boolean
    email?: boolean
    telefone?: boolean
    cnjp?: boolean
    cep?: boolean
    endereco?: boolean
    numero?: boolean
    uf?: boolean
    cidade?: boolean
    complemento?: boolean
    img_clinica?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $ClinicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clinica"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      responsavel: string
      razaoSocial: string
      password: string
      email: string
      telefone: string
      cnjp: string
      cep: string
      endereco: string
      numero: string
      uf: string
      cidade: string
      complemento: string | null
      img_clinica: string | null
      status: number
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["clinica"]>
    composites: {}
  }

  type ClinicaGetPayload<S extends boolean | null | undefined | ClinicaDefaultArgs> = $Result.GetResult<Prisma.$ClinicaPayload, S>

  type ClinicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClinicaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClinicaCountAggregateInputType | true
    }

  export interface ClinicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clinica'], meta: { name: 'Clinica' } }
    /**
     * Find zero or one Clinica that matches the filter.
     * @param {ClinicaFindUniqueArgs} args - Arguments to find a Clinica
     * @example
     * // Get one Clinica
     * const clinica = await prisma.clinica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClinicaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicaFindUniqueArgs<ExtArgs>>
    ): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Clinica that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClinicaFindUniqueOrThrowArgs} args - Arguments to find a Clinica
     * @example
     * // Get one Clinica
     * const clinica = await prisma.clinica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClinicaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Clinica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaFindFirstArgs} args - Arguments to find a Clinica
     * @example
     * // Get one Clinica
     * const clinica = await prisma.clinica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClinicaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicaFindFirstArgs<ExtArgs>>
    ): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Clinica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaFindFirstOrThrowArgs} args - Arguments to find a Clinica
     * @example
     * // Get one Clinica
     * const clinica = await prisma.clinica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClinicaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clinicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clinicas
     * const clinicas = await prisma.clinica.findMany()
     * 
     * // Get first 10 Clinicas
     * const clinicas = await prisma.clinica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clinicaWithIdOnly = await prisma.clinica.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClinicaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Clinica.
     * @param {ClinicaCreateArgs} args - Arguments to create a Clinica.
     * @example
     * // Create one Clinica
     * const Clinica = await prisma.clinica.create({
     *   data: {
     *     // ... data to create a Clinica
     *   }
     * })
     * 
    **/
    create<T extends ClinicaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicaCreateArgs<ExtArgs>>
    ): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clinicas.
     * @param {ClinicaCreateManyArgs} args - Arguments to create many Clinicas.
     * @example
     * // Create many Clinicas
     * const clinica = await prisma.clinica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ClinicaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clinica.
     * @param {ClinicaDeleteArgs} args - Arguments to delete one Clinica.
     * @example
     * // Delete one Clinica
     * const Clinica = await prisma.clinica.delete({
     *   where: {
     *     // ... filter to delete one Clinica
     *   }
     * })
     * 
    **/
    delete<T extends ClinicaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicaDeleteArgs<ExtArgs>>
    ): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Clinica.
     * @param {ClinicaUpdateArgs} args - Arguments to update one Clinica.
     * @example
     * // Update one Clinica
     * const clinica = await prisma.clinica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClinicaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicaUpdateArgs<ExtArgs>>
    ): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clinicas.
     * @param {ClinicaDeleteManyArgs} args - Arguments to filter Clinicas to delete.
     * @example
     * // Delete a few Clinicas
     * const { count } = await prisma.clinica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClinicaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clinicas
     * const clinica = await prisma.clinica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClinicaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clinica.
     * @param {ClinicaUpsertArgs} args - Arguments to update or create a Clinica.
     * @example
     * // Update or create a Clinica
     * const clinica = await prisma.clinica.upsert({
     *   create: {
     *     // ... data to create a Clinica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clinica we want to update
     *   }
     * })
    **/
    upsert<T extends ClinicaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicaUpsertArgs<ExtArgs>>
    ): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaCountArgs} args - Arguments to filter Clinicas to count.
     * @example
     * // Count the number of Clinicas
     * const count = await prisma.clinica.count({
     *   where: {
     *     // ... the filter for the Clinicas we want to count
     *   }
     * })
    **/
    count<T extends ClinicaCountArgs>(
      args?: Subset<T, ClinicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClinicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClinicaAggregateArgs>(args: Subset<T, ClinicaAggregateArgs>): Prisma.PrismaPromise<GetClinicaAggregateType<T>>

    /**
     * Group by Clinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClinicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClinicaGroupByArgs['orderBy'] }
        : { orderBy?: ClinicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClinicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clinica model
   */
  readonly fields: ClinicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clinica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClinicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Clinica model
   */ 
  interface ClinicaFieldRefs {
    readonly id: FieldRef<"Clinica", 'String'>
    readonly responsavel: FieldRef<"Clinica", 'String'>
    readonly razaoSocial: FieldRef<"Clinica", 'String'>
    readonly password: FieldRef<"Clinica", 'String'>
    readonly email: FieldRef<"Clinica", 'String'>
    readonly telefone: FieldRef<"Clinica", 'String'>
    readonly cnjp: FieldRef<"Clinica", 'String'>
    readonly cep: FieldRef<"Clinica", 'String'>
    readonly endereco: FieldRef<"Clinica", 'String'>
    readonly numero: FieldRef<"Clinica", 'String'>
    readonly uf: FieldRef<"Clinica", 'String'>
    readonly cidade: FieldRef<"Clinica", 'String'>
    readonly complemento: FieldRef<"Clinica", 'String'>
    readonly img_clinica: FieldRef<"Clinica", 'String'>
    readonly status: FieldRef<"Clinica", 'Int'>
    readonly created_at: FieldRef<"Clinica", 'DateTime'>
    readonly updated_at: FieldRef<"Clinica", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Clinica findUnique
   */
  export type ClinicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Filter, which Clinica to fetch.
     */
    where: ClinicaWhereUniqueInput
  }

  /**
   * Clinica findUniqueOrThrow
   */
  export type ClinicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Filter, which Clinica to fetch.
     */
    where: ClinicaWhereUniqueInput
  }

  /**
   * Clinica findFirst
   */
  export type ClinicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Filter, which Clinica to fetch.
     */
    where?: ClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinicas to fetch.
     */
    orderBy?: ClinicaOrderByWithRelationInput | ClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clinicas.
     */
    cursor?: ClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clinicas.
     */
    distinct?: ClinicaScalarFieldEnum | ClinicaScalarFieldEnum[]
  }

  /**
   * Clinica findFirstOrThrow
   */
  export type ClinicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Filter, which Clinica to fetch.
     */
    where?: ClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinicas to fetch.
     */
    orderBy?: ClinicaOrderByWithRelationInput | ClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clinicas.
     */
    cursor?: ClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clinicas.
     */
    distinct?: ClinicaScalarFieldEnum | ClinicaScalarFieldEnum[]
  }

  /**
   * Clinica findMany
   */
  export type ClinicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Filter, which Clinicas to fetch.
     */
    where?: ClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinicas to fetch.
     */
    orderBy?: ClinicaOrderByWithRelationInput | ClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clinicas.
     */
    cursor?: ClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinicas.
     */
    skip?: number
    distinct?: ClinicaScalarFieldEnum | ClinicaScalarFieldEnum[]
  }

  /**
   * Clinica create
   */
  export type ClinicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * The data needed to create a Clinica.
     */
    data: XOR<ClinicaCreateInput, ClinicaUncheckedCreateInput>
  }

  /**
   * Clinica createMany
   */
  export type ClinicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clinicas.
     */
    data: ClinicaCreateManyInput | ClinicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clinica update
   */
  export type ClinicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * The data needed to update a Clinica.
     */
    data: XOR<ClinicaUpdateInput, ClinicaUncheckedUpdateInput>
    /**
     * Choose, which Clinica to update.
     */
    where: ClinicaWhereUniqueInput
  }

  /**
   * Clinica updateMany
   */
  export type ClinicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clinicas.
     */
    data: XOR<ClinicaUpdateManyMutationInput, ClinicaUncheckedUpdateManyInput>
    /**
     * Filter which Clinicas to update
     */
    where?: ClinicaWhereInput
  }

  /**
   * Clinica upsert
   */
  export type ClinicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * The filter to search for the Clinica to update in case it exists.
     */
    where: ClinicaWhereUniqueInput
    /**
     * In case the Clinica found by the `where` argument doesn't exist, create a new Clinica with this data.
     */
    create: XOR<ClinicaCreateInput, ClinicaUncheckedCreateInput>
    /**
     * In case the Clinica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClinicaUpdateInput, ClinicaUncheckedUpdateInput>
  }

  /**
   * Clinica delete
   */
  export type ClinicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Filter which Clinica to delete.
     */
    where: ClinicaWhereUniqueInput
  }

  /**
   * Clinica deleteMany
   */
  export type ClinicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clinicas to delete
     */
    where?: ClinicaWhereInput
  }

  /**
   * Clinica without action
   */
  export type ClinicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at',
    bairro: 'bairro',
    cep: 'cep',
    cidade: 'cidade',
    complemento: 'complemento',
    cpfcnpj: 'cpfcnpj',
    endereco: 'endereco',
    estado: 'estado',
    numero: 'numero',
    telefone: 'telefone',
    status: 'status',
    img_usuario: 'img_usuario'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    description: 'description',
    banner: 'banner',
    created_at: 'created_at',
    updated_at: 'updated_at',
    category_id: 'category_id'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    table: 'table',
    status: 'status',
    draft: 'draft',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    created_at: 'created_at',
    updated_at: 'updated_at',
    order_id: 'order_id',
    product_id: 'product_id'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const PetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    apelido: 'apelido',
    data_nascimento: 'data_nascimento',
    especie: 'especie',
    idade: 'idade',
    meses: 'meses',
    raca: 'raca',
    chip: 'chip',
    sexo: 'sexo',
    temperamento: 'temperamento',
    tamanho: 'tamanho',
    detalhes: 'detalhes',
    user_id: 'user_id',
    img_perfil: 'img_perfil'
  };

  export type PetScalarFieldEnum = (typeof PetScalarFieldEnum)[keyof typeof PetScalarFieldEnum]


  export const CuriosidadeScalarFieldEnum: {
    id: 'id',
    conteudo: 'conteudo'
  };

  export type CuriosidadeScalarFieldEnum = (typeof CuriosidadeScalarFieldEnum)[keyof typeof CuriosidadeScalarFieldEnum]


  export const VacinaScalarFieldEnum: {
    id: 'id',
    data_vacinacao: 'data_vacinacao',
    vacina: 'vacina',
    clinica: 'clinica',
    intervalo: 'intervalo',
    observacao: 'observacao',
    pet_id: 'pet_id',
    user_id: 'user_id',
    img_lote: 'img_lote',
    proxima_aplicacao: 'proxima_aplicacao',
    notificacoes_enviadas: 'notificacoes_enviadas'
  };

  export type VacinaScalarFieldEnum = (typeof VacinaScalarFieldEnum)[keyof typeof VacinaScalarFieldEnum]


  export const ExameScalarFieldEnum: {
    id: 'id',
    data_exame: 'data_exame',
    exame: 'exame',
    clinica: 'clinica',
    observacao: 'observacao',
    pet_id: 'pet_id',
    img_laudo: 'img_laudo'
  };

  export type ExameScalarFieldEnum = (typeof ExameScalarFieldEnum)[keyof typeof ExameScalarFieldEnum]


  export const PublicacoesScalarFieldEnum: {
    id: 'id',
    pet_id: 'pet_id',
    conteudo: 'conteudo',
    img_blog: 'img_blog',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PublicacoesScalarFieldEnum = (typeof PublicacoesScalarFieldEnum)[keyof typeof PublicacoesScalarFieldEnum]


  export const AgendamentosScalarFieldEnum: {
    id: 'id',
    pet_id: 'pet_id',
    id_horario: 'id_horario',
    id_empresa: 'id_empresa',
    id_servico: 'id_servico',
    user_id: 'user_id',
    data_agendamento: 'data_agendamento',
    horario_agendamento: 'horario_agendamento',
    status: 'status',
    notificacoes_enviadas: 'notificacoes_enviadas'
  };

  export type AgendamentosScalarFieldEnum = (typeof AgendamentosScalarFieldEnum)[keyof typeof AgendamentosScalarFieldEnum]


  export const ServicosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    tipo: 'tipo',
    status: 'status'
  };

  export type ServicosScalarFieldEnum = (typeof ServicosScalarFieldEnum)[keyof typeof ServicosScalarFieldEnum]


  export const HorariosScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    sub_categoria: 'sub_categoria',
    id_clinica: 'id_clinica',
    data_servico: 'data_servico',
    horario_servico: 'horario_servico',
    status: 'status'
  };

  export type HorariosScalarFieldEnum = (typeof HorariosScalarFieldEnum)[keyof typeof HorariosScalarFieldEnum]


  export const EmpresaScalarFieldEnum: {
    id: 'id',
    cnpj: 'cnpj',
    nome: 'nome'
  };

  export type EmpresaScalarFieldEnum = (typeof EmpresaScalarFieldEnum)[keyof typeof EmpresaScalarFieldEnum]


  export const ExpoTokenScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    token: 'token',
    created_at: 'created_at'
  };

  export type ExpoTokenScalarFieldEnum = (typeof ExpoTokenScalarFieldEnum)[keyof typeof ExpoTokenScalarFieldEnum]


  export const ClinicaScalarFieldEnum: {
    id: 'id',
    responsavel: 'responsavel',
    razaoSocial: 'razaoSocial',
    password: 'password',
    email: 'email',
    telefone: 'telefone',
    cnjp: 'cnjp',
    cep: 'cep',
    endereco: 'endereco',
    numero: 'numero',
    uf: 'uf',
    cidade: 'cidade',
    complemento: 'complemento',
    img_clinica: 'img_clinica',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ClinicaScalarFieldEnum = (typeof ClinicaScalarFieldEnum)[keyof typeof ClinicaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    created_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    bairro?: StringNullableFilter<"User"> | string | null
    cep?: StringNullableFilter<"User"> | string | null
    cidade?: StringNullableFilter<"User"> | string | null
    complemento?: StringNullableFilter<"User"> | string | null
    cpfcnpj?: StringNullableFilter<"User"> | string | null
    endereco?: StringNullableFilter<"User"> | string | null
    estado?: StringNullableFilter<"User"> | string | null
    numero?: StringNullableFilter<"User"> | string | null
    telefone?: StringNullableFilter<"User"> | string | null
    status?: StringNullableFilter<"User"> | string | null
    img_usuario?: StringNullableFilter<"User"> | string | null
    pets?: PetListRelationFilter
    expo_token?: ExpoTokenListRelationFilter
    user_id?: AgendamentosListRelationFilter
    vacinas?: VacinaListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    bairro?: SortOrderInput | SortOrder
    cep?: SortOrderInput | SortOrder
    cidade?: SortOrderInput | SortOrder
    complemento?: SortOrderInput | SortOrder
    cpfcnpj?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    estado?: SortOrderInput | SortOrder
    numero?: SortOrderInput | SortOrder
    telefone?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    img_usuario?: SortOrderInput | SortOrder
    pets?: PetOrderByRelationAggregateInput
    expo_token?: ExpoTokenOrderByRelationAggregateInput
    user_id?: AgendamentosOrderByRelationAggregateInput
    vacinas?: VacinaOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    created_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    bairro?: StringNullableFilter<"User"> | string | null
    cep?: StringNullableFilter<"User"> | string | null
    cidade?: StringNullableFilter<"User"> | string | null
    complemento?: StringNullableFilter<"User"> | string | null
    cpfcnpj?: StringNullableFilter<"User"> | string | null
    endereco?: StringNullableFilter<"User"> | string | null
    estado?: StringNullableFilter<"User"> | string | null
    numero?: StringNullableFilter<"User"> | string | null
    telefone?: StringNullableFilter<"User"> | string | null
    status?: StringNullableFilter<"User"> | string | null
    img_usuario?: StringNullableFilter<"User"> | string | null
    pets?: PetListRelationFilter
    expo_token?: ExpoTokenListRelationFilter
    user_id?: AgendamentosListRelationFilter
    vacinas?: VacinaListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    bairro?: SortOrderInput | SortOrder
    cep?: SortOrderInput | SortOrder
    cidade?: SortOrderInput | SortOrder
    complemento?: SortOrderInput | SortOrder
    cpfcnpj?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    estado?: SortOrderInput | SortOrder
    numero?: SortOrderInput | SortOrder
    telefone?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    img_usuario?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    bairro?: StringNullableWithAggregatesFilter<"User"> | string | null
    cep?: StringNullableWithAggregatesFilter<"User"> | string | null
    cidade?: StringNullableWithAggregatesFilter<"User"> | string | null
    complemento?: StringNullableWithAggregatesFilter<"User"> | string | null
    cpfcnpj?: StringNullableWithAggregatesFilter<"User"> | string | null
    endereco?: StringNullableWithAggregatesFilter<"User"> | string | null
    estado?: StringNullableWithAggregatesFilter<"User"> | string | null
    numero?: StringNullableWithAggregatesFilter<"User"> | string | null
    telefone?: StringNullableWithAggregatesFilter<"User"> | string | null
    status?: StringNullableWithAggregatesFilter<"User"> | string | null
    img_usuario?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    created_at?: DateTimeNullableFilter<"Category"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Category"> | Date | string | null
    products?: ProductListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    products?: ProductOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    created_at?: DateTimeNullableFilter<"Category"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Category"> | Date | string | null
    products?: ProductListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"Category"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Category"> | Date | string | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    price?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    banner?: StringFilter<"Product"> | string
    created_at?: DateTimeNullableFilter<"Product"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Product"> | Date | string | null
    category_id?: StringFilter<"Product"> | string
    items?: ItemListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    category_id?: SortOrder
    items?: ItemOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    price?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    banner?: StringFilter<"Product"> | string
    created_at?: DateTimeNullableFilter<"Product"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Product"> | Date | string | null
    category_id?: StringFilter<"Product"> | string
    items?: ItemListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    category_id?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    price?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    banner?: StringWithAggregatesFilter<"Product"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    category_id?: StringWithAggregatesFilter<"Product"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    table?: IntFilter<"Order"> | number
    status?: BoolFilter<"Order"> | boolean
    draft?: BoolFilter<"Order"> | boolean
    name?: StringNullableFilter<"Order"> | string | null
    created_at?: DateTimeNullableFilter<"Order"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Order"> | Date | string | null
    items?: ItemListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    table?: SortOrder
    status?: SortOrder
    draft?: SortOrder
    name?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    items?: ItemOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    table?: IntFilter<"Order"> | number
    status?: BoolFilter<"Order"> | boolean
    draft?: BoolFilter<"Order"> | boolean
    name?: StringNullableFilter<"Order"> | string | null
    created_at?: DateTimeNullableFilter<"Order"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Order"> | Date | string | null
    items?: ItemListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    table?: SortOrder
    status?: SortOrder
    draft?: SortOrder
    name?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    table?: IntWithAggregatesFilter<"Order"> | number
    status?: BoolWithAggregatesFilter<"Order"> | boolean
    draft?: BoolWithAggregatesFilter<"Order"> | boolean
    name?: StringNullableWithAggregatesFilter<"Order"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: StringFilter<"Item"> | string
    amount?: IntFilter<"Item"> | number
    created_at?: DateTimeNullableFilter<"Item"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Item"> | Date | string | null
    order_id?: StringFilter<"Item"> | string
    product_id?: StringFilter<"Item"> | string
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    amount?: IntFilter<"Item"> | number
    created_at?: DateTimeNullableFilter<"Item"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Item"> | Date | string | null
    order_id?: StringFilter<"Item"> | string
    product_id?: StringFilter<"Item"> | string
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Item"> | string
    amount?: IntWithAggregatesFilter<"Item"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"Item"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Item"> | Date | string | null
    order_id?: StringWithAggregatesFilter<"Item"> | string
    product_id?: StringWithAggregatesFilter<"Item"> | string
  }

  export type PetWhereInput = {
    AND?: PetWhereInput | PetWhereInput[]
    OR?: PetWhereInput[]
    NOT?: PetWhereInput | PetWhereInput[]
    id?: StringFilter<"Pet"> | string
    name?: StringFilter<"Pet"> | string
    apelido?: StringFilter<"Pet"> | string
    data_nascimento?: DateTimeNullableFilter<"Pet"> | Date | string | null
    especie?: StringFilter<"Pet"> | string
    idade?: StringFilter<"Pet"> | string
    meses?: StringFilter<"Pet"> | string
    raca?: StringFilter<"Pet"> | string
    chip?: StringFilter<"Pet"> | string
    sexo?: StringFilter<"Pet"> | string
    temperamento?: StringFilter<"Pet"> | string
    tamanho?: StringFilter<"Pet"> | string
    detalhes?: StringNullableFilter<"Pet"> | string | null
    user_id?: StringFilter<"Pet"> | string
    img_perfil?: StringFilter<"Pet"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    vacinas?: VacinaListRelationFilter
    exames?: ExameListRelationFilter
    publicacos?: PublicacoesListRelationFilter
    agendamentos?: AgendamentosListRelationFilter
  }

  export type PetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    apelido?: SortOrder
    data_nascimento?: SortOrderInput | SortOrder
    especie?: SortOrder
    idade?: SortOrder
    meses?: SortOrder
    raca?: SortOrder
    chip?: SortOrder
    sexo?: SortOrder
    temperamento?: SortOrder
    tamanho?: SortOrder
    detalhes?: SortOrderInput | SortOrder
    user_id?: SortOrder
    img_perfil?: SortOrder
    user?: UserOrderByWithRelationInput
    vacinas?: VacinaOrderByRelationAggregateInput
    exames?: ExameOrderByRelationAggregateInput
    publicacos?: PublicacoesOrderByRelationAggregateInput
    agendamentos?: AgendamentosOrderByRelationAggregateInput
  }

  export type PetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PetWhereInput | PetWhereInput[]
    OR?: PetWhereInput[]
    NOT?: PetWhereInput | PetWhereInput[]
    name?: StringFilter<"Pet"> | string
    apelido?: StringFilter<"Pet"> | string
    data_nascimento?: DateTimeNullableFilter<"Pet"> | Date | string | null
    especie?: StringFilter<"Pet"> | string
    idade?: StringFilter<"Pet"> | string
    meses?: StringFilter<"Pet"> | string
    raca?: StringFilter<"Pet"> | string
    chip?: StringFilter<"Pet"> | string
    sexo?: StringFilter<"Pet"> | string
    temperamento?: StringFilter<"Pet"> | string
    tamanho?: StringFilter<"Pet"> | string
    detalhes?: StringNullableFilter<"Pet"> | string | null
    user_id?: StringFilter<"Pet"> | string
    img_perfil?: StringFilter<"Pet"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    vacinas?: VacinaListRelationFilter
    exames?: ExameListRelationFilter
    publicacos?: PublicacoesListRelationFilter
    agendamentos?: AgendamentosListRelationFilter
  }, "id">

  export type PetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    apelido?: SortOrder
    data_nascimento?: SortOrderInput | SortOrder
    especie?: SortOrder
    idade?: SortOrder
    meses?: SortOrder
    raca?: SortOrder
    chip?: SortOrder
    sexo?: SortOrder
    temperamento?: SortOrder
    tamanho?: SortOrder
    detalhes?: SortOrderInput | SortOrder
    user_id?: SortOrder
    img_perfil?: SortOrder
    _count?: PetCountOrderByAggregateInput
    _max?: PetMaxOrderByAggregateInput
    _min?: PetMinOrderByAggregateInput
  }

  export type PetScalarWhereWithAggregatesInput = {
    AND?: PetScalarWhereWithAggregatesInput | PetScalarWhereWithAggregatesInput[]
    OR?: PetScalarWhereWithAggregatesInput[]
    NOT?: PetScalarWhereWithAggregatesInput | PetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pet"> | string
    name?: StringWithAggregatesFilter<"Pet"> | string
    apelido?: StringWithAggregatesFilter<"Pet"> | string
    data_nascimento?: DateTimeNullableWithAggregatesFilter<"Pet"> | Date | string | null
    especie?: StringWithAggregatesFilter<"Pet"> | string
    idade?: StringWithAggregatesFilter<"Pet"> | string
    meses?: StringWithAggregatesFilter<"Pet"> | string
    raca?: StringWithAggregatesFilter<"Pet"> | string
    chip?: StringWithAggregatesFilter<"Pet"> | string
    sexo?: StringWithAggregatesFilter<"Pet"> | string
    temperamento?: StringWithAggregatesFilter<"Pet"> | string
    tamanho?: StringWithAggregatesFilter<"Pet"> | string
    detalhes?: StringNullableWithAggregatesFilter<"Pet"> | string | null
    user_id?: StringWithAggregatesFilter<"Pet"> | string
    img_perfil?: StringWithAggregatesFilter<"Pet"> | string
  }

  export type CuriosidadeWhereInput = {
    AND?: CuriosidadeWhereInput | CuriosidadeWhereInput[]
    OR?: CuriosidadeWhereInput[]
    NOT?: CuriosidadeWhereInput | CuriosidadeWhereInput[]
    id?: StringFilter<"Curiosidade"> | string
    conteudo?: StringFilter<"Curiosidade"> | string
  }

  export type CuriosidadeOrderByWithRelationInput = {
    id?: SortOrder
    conteudo?: SortOrder
  }

  export type CuriosidadeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CuriosidadeWhereInput | CuriosidadeWhereInput[]
    OR?: CuriosidadeWhereInput[]
    NOT?: CuriosidadeWhereInput | CuriosidadeWhereInput[]
    conteudo?: StringFilter<"Curiosidade"> | string
  }, "id">

  export type CuriosidadeOrderByWithAggregationInput = {
    id?: SortOrder
    conteudo?: SortOrder
    _count?: CuriosidadeCountOrderByAggregateInput
    _max?: CuriosidadeMaxOrderByAggregateInput
    _min?: CuriosidadeMinOrderByAggregateInput
  }

  export type CuriosidadeScalarWhereWithAggregatesInput = {
    AND?: CuriosidadeScalarWhereWithAggregatesInput | CuriosidadeScalarWhereWithAggregatesInput[]
    OR?: CuriosidadeScalarWhereWithAggregatesInput[]
    NOT?: CuriosidadeScalarWhereWithAggregatesInput | CuriosidadeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Curiosidade"> | string
    conteudo?: StringWithAggregatesFilter<"Curiosidade"> | string
  }

  export type VacinaWhereInput = {
    AND?: VacinaWhereInput | VacinaWhereInput[]
    OR?: VacinaWhereInput[]
    NOT?: VacinaWhereInput | VacinaWhereInput[]
    id?: StringFilter<"Vacina"> | string
    data_vacinacao?: StringFilter<"Vacina"> | string
    vacina?: StringFilter<"Vacina"> | string
    clinica?: StringFilter<"Vacina"> | string
    intervalo?: StringFilter<"Vacina"> | string
    observacao?: StringFilter<"Vacina"> | string
    pet_id?: StringFilter<"Vacina"> | string
    user_id?: StringFilter<"Vacina"> | string
    img_lote?: StringFilter<"Vacina"> | string
    proxima_aplicacao?: StringNullableFilter<"Vacina"> | string | null
    notificacoes_enviadas?: StringFilter<"Vacina"> | string
    pets?: XOR<PetRelationFilter, PetWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type VacinaOrderByWithRelationInput = {
    id?: SortOrder
    data_vacinacao?: SortOrder
    vacina?: SortOrder
    clinica?: SortOrder
    intervalo?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    user_id?: SortOrder
    img_lote?: SortOrder
    proxima_aplicacao?: SortOrderInput | SortOrder
    notificacoes_enviadas?: SortOrder
    pets?: PetOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type VacinaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VacinaWhereInput | VacinaWhereInput[]
    OR?: VacinaWhereInput[]
    NOT?: VacinaWhereInput | VacinaWhereInput[]
    data_vacinacao?: StringFilter<"Vacina"> | string
    vacina?: StringFilter<"Vacina"> | string
    clinica?: StringFilter<"Vacina"> | string
    intervalo?: StringFilter<"Vacina"> | string
    observacao?: StringFilter<"Vacina"> | string
    pet_id?: StringFilter<"Vacina"> | string
    user_id?: StringFilter<"Vacina"> | string
    img_lote?: StringFilter<"Vacina"> | string
    proxima_aplicacao?: StringNullableFilter<"Vacina"> | string | null
    notificacoes_enviadas?: StringFilter<"Vacina"> | string
    pets?: XOR<PetRelationFilter, PetWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type VacinaOrderByWithAggregationInput = {
    id?: SortOrder
    data_vacinacao?: SortOrder
    vacina?: SortOrder
    clinica?: SortOrder
    intervalo?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    user_id?: SortOrder
    img_lote?: SortOrder
    proxima_aplicacao?: SortOrderInput | SortOrder
    notificacoes_enviadas?: SortOrder
    _count?: VacinaCountOrderByAggregateInput
    _max?: VacinaMaxOrderByAggregateInput
    _min?: VacinaMinOrderByAggregateInput
  }

  export type VacinaScalarWhereWithAggregatesInput = {
    AND?: VacinaScalarWhereWithAggregatesInput | VacinaScalarWhereWithAggregatesInput[]
    OR?: VacinaScalarWhereWithAggregatesInput[]
    NOT?: VacinaScalarWhereWithAggregatesInput | VacinaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vacina"> | string
    data_vacinacao?: StringWithAggregatesFilter<"Vacina"> | string
    vacina?: StringWithAggregatesFilter<"Vacina"> | string
    clinica?: StringWithAggregatesFilter<"Vacina"> | string
    intervalo?: StringWithAggregatesFilter<"Vacina"> | string
    observacao?: StringWithAggregatesFilter<"Vacina"> | string
    pet_id?: StringWithAggregatesFilter<"Vacina"> | string
    user_id?: StringWithAggregatesFilter<"Vacina"> | string
    img_lote?: StringWithAggregatesFilter<"Vacina"> | string
    proxima_aplicacao?: StringNullableWithAggregatesFilter<"Vacina"> | string | null
    notificacoes_enviadas?: StringWithAggregatesFilter<"Vacina"> | string
  }

  export type ExameWhereInput = {
    AND?: ExameWhereInput | ExameWhereInput[]
    OR?: ExameWhereInput[]
    NOT?: ExameWhereInput | ExameWhereInput[]
    id?: StringFilter<"Exame"> | string
    data_exame?: StringFilter<"Exame"> | string
    exame?: StringFilter<"Exame"> | string
    clinica?: StringFilter<"Exame"> | string
    observacao?: StringFilter<"Exame"> | string
    pet_id?: StringFilter<"Exame"> | string
    img_laudo?: StringFilter<"Exame"> | string
    pet?: XOR<PetRelationFilter, PetWhereInput>
  }

  export type ExameOrderByWithRelationInput = {
    id?: SortOrder
    data_exame?: SortOrder
    exame?: SortOrder
    clinica?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    img_laudo?: SortOrder
    pet?: PetOrderByWithRelationInput
  }

  export type ExameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExameWhereInput | ExameWhereInput[]
    OR?: ExameWhereInput[]
    NOT?: ExameWhereInput | ExameWhereInput[]
    data_exame?: StringFilter<"Exame"> | string
    exame?: StringFilter<"Exame"> | string
    clinica?: StringFilter<"Exame"> | string
    observacao?: StringFilter<"Exame"> | string
    pet_id?: StringFilter<"Exame"> | string
    img_laudo?: StringFilter<"Exame"> | string
    pet?: XOR<PetRelationFilter, PetWhereInput>
  }, "id">

  export type ExameOrderByWithAggregationInput = {
    id?: SortOrder
    data_exame?: SortOrder
    exame?: SortOrder
    clinica?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    img_laudo?: SortOrder
    _count?: ExameCountOrderByAggregateInput
    _max?: ExameMaxOrderByAggregateInput
    _min?: ExameMinOrderByAggregateInput
  }

  export type ExameScalarWhereWithAggregatesInput = {
    AND?: ExameScalarWhereWithAggregatesInput | ExameScalarWhereWithAggregatesInput[]
    OR?: ExameScalarWhereWithAggregatesInput[]
    NOT?: ExameScalarWhereWithAggregatesInput | ExameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exame"> | string
    data_exame?: StringWithAggregatesFilter<"Exame"> | string
    exame?: StringWithAggregatesFilter<"Exame"> | string
    clinica?: StringWithAggregatesFilter<"Exame"> | string
    observacao?: StringWithAggregatesFilter<"Exame"> | string
    pet_id?: StringWithAggregatesFilter<"Exame"> | string
    img_laudo?: StringWithAggregatesFilter<"Exame"> | string
  }

  export type PublicacoesWhereInput = {
    AND?: PublicacoesWhereInput | PublicacoesWhereInput[]
    OR?: PublicacoesWhereInput[]
    NOT?: PublicacoesWhereInput | PublicacoesWhereInput[]
    id?: StringFilter<"Publicacoes"> | string
    pet_id?: StringFilter<"Publicacoes"> | string
    conteudo?: StringFilter<"Publicacoes"> | string
    img_blog?: StringFilter<"Publicacoes"> | string
    created_at?: DateTimeNullableFilter<"Publicacoes"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Publicacoes"> | Date | string | null
    pet?: XOR<PetRelationFilter, PetWhereInput>
  }

  export type PublicacoesOrderByWithRelationInput = {
    id?: SortOrder
    pet_id?: SortOrder
    conteudo?: SortOrder
    img_blog?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    pet?: PetOrderByWithRelationInput
  }

  export type PublicacoesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PublicacoesWhereInput | PublicacoesWhereInput[]
    OR?: PublicacoesWhereInput[]
    NOT?: PublicacoesWhereInput | PublicacoesWhereInput[]
    pet_id?: StringFilter<"Publicacoes"> | string
    conteudo?: StringFilter<"Publicacoes"> | string
    img_blog?: StringFilter<"Publicacoes"> | string
    created_at?: DateTimeNullableFilter<"Publicacoes"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Publicacoes"> | Date | string | null
    pet?: XOR<PetRelationFilter, PetWhereInput>
  }, "id">

  export type PublicacoesOrderByWithAggregationInput = {
    id?: SortOrder
    pet_id?: SortOrder
    conteudo?: SortOrder
    img_blog?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: PublicacoesCountOrderByAggregateInput
    _max?: PublicacoesMaxOrderByAggregateInput
    _min?: PublicacoesMinOrderByAggregateInput
  }

  export type PublicacoesScalarWhereWithAggregatesInput = {
    AND?: PublicacoesScalarWhereWithAggregatesInput | PublicacoesScalarWhereWithAggregatesInput[]
    OR?: PublicacoesScalarWhereWithAggregatesInput[]
    NOT?: PublicacoesScalarWhereWithAggregatesInput | PublicacoesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Publicacoes"> | string
    pet_id?: StringWithAggregatesFilter<"Publicacoes"> | string
    conteudo?: StringWithAggregatesFilter<"Publicacoes"> | string
    img_blog?: StringWithAggregatesFilter<"Publicacoes"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"Publicacoes"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Publicacoes"> | Date | string | null
  }

  export type AgendamentosWhereInput = {
    AND?: AgendamentosWhereInput | AgendamentosWhereInput[]
    OR?: AgendamentosWhereInput[]
    NOT?: AgendamentosWhereInput | AgendamentosWhereInput[]
    id?: StringFilter<"Agendamentos"> | string
    pet_id?: StringFilter<"Agendamentos"> | string
    id_horario?: StringFilter<"Agendamentos"> | string
    id_empresa?: StringFilter<"Agendamentos"> | string
    id_servico?: StringFilter<"Agendamentos"> | string
    user_id?: StringFilter<"Agendamentos"> | string
    data_agendamento?: StringFilter<"Agendamentos"> | string
    horario_agendamento?: StringFilter<"Agendamentos"> | string
    status?: IntFilter<"Agendamentos"> | number
    notificacoes_enviadas?: StringFilter<"Agendamentos"> | string
    pets?: XOR<PetRelationFilter, PetWhereInput>
    users?: XOR<UserRelationFilter, UserWhereInput>
    horarios?: XOR<HorariosRelationFilter, HorariosWhereInput>
    empresas?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    servicos?: XOR<ServicosRelationFilter, ServicosWhereInput>
  }

  export type AgendamentosOrderByWithRelationInput = {
    id?: SortOrder
    pet_id?: SortOrder
    id_horario?: SortOrder
    id_empresa?: SortOrder
    id_servico?: SortOrder
    user_id?: SortOrder
    data_agendamento?: SortOrder
    horario_agendamento?: SortOrder
    status?: SortOrder
    notificacoes_enviadas?: SortOrder
    pets?: PetOrderByWithRelationInput
    users?: UserOrderByWithRelationInput
    horarios?: HorariosOrderByWithRelationInput
    empresas?: EmpresaOrderByWithRelationInput
    servicos?: ServicosOrderByWithRelationInput
  }

  export type AgendamentosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgendamentosWhereInput | AgendamentosWhereInput[]
    OR?: AgendamentosWhereInput[]
    NOT?: AgendamentosWhereInput | AgendamentosWhereInput[]
    pet_id?: StringFilter<"Agendamentos"> | string
    id_horario?: StringFilter<"Agendamentos"> | string
    id_empresa?: StringFilter<"Agendamentos"> | string
    id_servico?: StringFilter<"Agendamentos"> | string
    user_id?: StringFilter<"Agendamentos"> | string
    data_agendamento?: StringFilter<"Agendamentos"> | string
    horario_agendamento?: StringFilter<"Agendamentos"> | string
    status?: IntFilter<"Agendamentos"> | number
    notificacoes_enviadas?: StringFilter<"Agendamentos"> | string
    pets?: XOR<PetRelationFilter, PetWhereInput>
    users?: XOR<UserRelationFilter, UserWhereInput>
    horarios?: XOR<HorariosRelationFilter, HorariosWhereInput>
    empresas?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    servicos?: XOR<ServicosRelationFilter, ServicosWhereInput>
  }, "id">

  export type AgendamentosOrderByWithAggregationInput = {
    id?: SortOrder
    pet_id?: SortOrder
    id_horario?: SortOrder
    id_empresa?: SortOrder
    id_servico?: SortOrder
    user_id?: SortOrder
    data_agendamento?: SortOrder
    horario_agendamento?: SortOrder
    status?: SortOrder
    notificacoes_enviadas?: SortOrder
    _count?: AgendamentosCountOrderByAggregateInput
    _avg?: AgendamentosAvgOrderByAggregateInput
    _max?: AgendamentosMaxOrderByAggregateInput
    _min?: AgendamentosMinOrderByAggregateInput
    _sum?: AgendamentosSumOrderByAggregateInput
  }

  export type AgendamentosScalarWhereWithAggregatesInput = {
    AND?: AgendamentosScalarWhereWithAggregatesInput | AgendamentosScalarWhereWithAggregatesInput[]
    OR?: AgendamentosScalarWhereWithAggregatesInput[]
    NOT?: AgendamentosScalarWhereWithAggregatesInput | AgendamentosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agendamentos"> | string
    pet_id?: StringWithAggregatesFilter<"Agendamentos"> | string
    id_horario?: StringWithAggregatesFilter<"Agendamentos"> | string
    id_empresa?: StringWithAggregatesFilter<"Agendamentos"> | string
    id_servico?: StringWithAggregatesFilter<"Agendamentos"> | string
    user_id?: StringWithAggregatesFilter<"Agendamentos"> | string
    data_agendamento?: StringWithAggregatesFilter<"Agendamentos"> | string
    horario_agendamento?: StringWithAggregatesFilter<"Agendamentos"> | string
    status?: IntWithAggregatesFilter<"Agendamentos"> | number
    notificacoes_enviadas?: StringWithAggregatesFilter<"Agendamentos"> | string
  }

  export type ServicosWhereInput = {
    AND?: ServicosWhereInput | ServicosWhereInput[]
    OR?: ServicosWhereInput[]
    NOT?: ServicosWhereInput | ServicosWhereInput[]
    id?: StringFilter<"Servicos"> | string
    nome?: StringFilter<"Servicos"> | string
    tipo?: IntFilter<"Servicos"> | number
    status?: IntFilter<"Servicos"> | number
    agendamentos?: AgendamentosListRelationFilter
  }

  export type ServicosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
    agendamentos?: AgendamentosOrderByRelationAggregateInput
  }

  export type ServicosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServicosWhereInput | ServicosWhereInput[]
    OR?: ServicosWhereInput[]
    NOT?: ServicosWhereInput | ServicosWhereInput[]
    nome?: StringFilter<"Servicos"> | string
    tipo?: IntFilter<"Servicos"> | number
    status?: IntFilter<"Servicos"> | number
    agendamentos?: AgendamentosListRelationFilter
  }, "id">

  export type ServicosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
    _count?: ServicosCountOrderByAggregateInput
    _avg?: ServicosAvgOrderByAggregateInput
    _max?: ServicosMaxOrderByAggregateInput
    _min?: ServicosMinOrderByAggregateInput
    _sum?: ServicosSumOrderByAggregateInput
  }

  export type ServicosScalarWhereWithAggregatesInput = {
    AND?: ServicosScalarWhereWithAggregatesInput | ServicosScalarWhereWithAggregatesInput[]
    OR?: ServicosScalarWhereWithAggregatesInput[]
    NOT?: ServicosScalarWhereWithAggregatesInput | ServicosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Servicos"> | string
    nome?: StringWithAggregatesFilter<"Servicos"> | string
    tipo?: IntWithAggregatesFilter<"Servicos"> | number
    status?: IntWithAggregatesFilter<"Servicos"> | number
  }

  export type HorariosWhereInput = {
    AND?: HorariosWhereInput | HorariosWhereInput[]
    OR?: HorariosWhereInput[]
    NOT?: HorariosWhereInput | HorariosWhereInput[]
    id?: StringFilter<"Horarios"> | string
    tipo?: IntFilter<"Horarios"> | number
    sub_categoria?: StringNullableFilter<"Horarios"> | string | null
    id_clinica?: StringFilter<"Horarios"> | string
    data_servico?: StringFilter<"Horarios"> | string
    horario_servico?: StringFilter<"Horarios"> | string
    status?: IntFilter<"Horarios"> | number
    agendamentos?: AgendamentosListRelationFilter
  }

  export type HorariosOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    sub_categoria?: SortOrderInput | SortOrder
    id_clinica?: SortOrder
    data_servico?: SortOrder
    horario_servico?: SortOrder
    status?: SortOrder
    agendamentos?: AgendamentosOrderByRelationAggregateInput
  }

  export type HorariosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HorariosWhereInput | HorariosWhereInput[]
    OR?: HorariosWhereInput[]
    NOT?: HorariosWhereInput | HorariosWhereInput[]
    tipo?: IntFilter<"Horarios"> | number
    sub_categoria?: StringNullableFilter<"Horarios"> | string | null
    id_clinica?: StringFilter<"Horarios"> | string
    data_servico?: StringFilter<"Horarios"> | string
    horario_servico?: StringFilter<"Horarios"> | string
    status?: IntFilter<"Horarios"> | number
    agendamentos?: AgendamentosListRelationFilter
  }, "id">

  export type HorariosOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    sub_categoria?: SortOrderInput | SortOrder
    id_clinica?: SortOrder
    data_servico?: SortOrder
    horario_servico?: SortOrder
    status?: SortOrder
    _count?: HorariosCountOrderByAggregateInput
    _avg?: HorariosAvgOrderByAggregateInput
    _max?: HorariosMaxOrderByAggregateInput
    _min?: HorariosMinOrderByAggregateInput
    _sum?: HorariosSumOrderByAggregateInput
  }

  export type HorariosScalarWhereWithAggregatesInput = {
    AND?: HorariosScalarWhereWithAggregatesInput | HorariosScalarWhereWithAggregatesInput[]
    OR?: HorariosScalarWhereWithAggregatesInput[]
    NOT?: HorariosScalarWhereWithAggregatesInput | HorariosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Horarios"> | string
    tipo?: IntWithAggregatesFilter<"Horarios"> | number
    sub_categoria?: StringNullableWithAggregatesFilter<"Horarios"> | string | null
    id_clinica?: StringWithAggregatesFilter<"Horarios"> | string
    data_servico?: StringWithAggregatesFilter<"Horarios"> | string
    horario_servico?: StringWithAggregatesFilter<"Horarios"> | string
    status?: IntWithAggregatesFilter<"Horarios"> | number
  }

  export type EmpresaWhereInput = {
    AND?: EmpresaWhereInput | EmpresaWhereInput[]
    OR?: EmpresaWhereInput[]
    NOT?: EmpresaWhereInput | EmpresaWhereInput[]
    id?: StringFilter<"Empresa"> | string
    cnpj?: StringFilter<"Empresa"> | string
    nome?: StringFilter<"Empresa"> | string
    agendamentos?: AgendamentosListRelationFilter
  }

  export type EmpresaOrderByWithRelationInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
    agendamentos?: AgendamentosOrderByRelationAggregateInput
  }

  export type EmpresaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmpresaWhereInput | EmpresaWhereInput[]
    OR?: EmpresaWhereInput[]
    NOT?: EmpresaWhereInput | EmpresaWhereInput[]
    cnpj?: StringFilter<"Empresa"> | string
    nome?: StringFilter<"Empresa"> | string
    agendamentos?: AgendamentosListRelationFilter
  }, "id">

  export type EmpresaOrderByWithAggregationInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
    _count?: EmpresaCountOrderByAggregateInput
    _max?: EmpresaMaxOrderByAggregateInput
    _min?: EmpresaMinOrderByAggregateInput
  }

  export type EmpresaScalarWhereWithAggregatesInput = {
    AND?: EmpresaScalarWhereWithAggregatesInput | EmpresaScalarWhereWithAggregatesInput[]
    OR?: EmpresaScalarWhereWithAggregatesInput[]
    NOT?: EmpresaScalarWhereWithAggregatesInput | EmpresaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Empresa"> | string
    cnpj?: StringWithAggregatesFilter<"Empresa"> | string
    nome?: StringWithAggregatesFilter<"Empresa"> | string
  }

  export type ExpoTokenWhereInput = {
    AND?: ExpoTokenWhereInput | ExpoTokenWhereInput[]
    OR?: ExpoTokenWhereInput[]
    NOT?: ExpoTokenWhereInput | ExpoTokenWhereInput[]
    id?: StringFilter<"ExpoToken"> | string
    user_id?: StringFilter<"ExpoToken"> | string
    token?: StringFilter<"ExpoToken"> | string
    created_at?: DateTimeNullableFilter<"ExpoToken"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ExpoTokenOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    created_at?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ExpoTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    AND?: ExpoTokenWhereInput | ExpoTokenWhereInput[]
    OR?: ExpoTokenWhereInput[]
    NOT?: ExpoTokenWhereInput | ExpoTokenWhereInput[]
    token?: StringFilter<"ExpoToken"> | string
    created_at?: DateTimeNullableFilter<"ExpoToken"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type ExpoTokenOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: ExpoTokenCountOrderByAggregateInput
    _max?: ExpoTokenMaxOrderByAggregateInput
    _min?: ExpoTokenMinOrderByAggregateInput
  }

  export type ExpoTokenScalarWhereWithAggregatesInput = {
    AND?: ExpoTokenScalarWhereWithAggregatesInput | ExpoTokenScalarWhereWithAggregatesInput[]
    OR?: ExpoTokenScalarWhereWithAggregatesInput[]
    NOT?: ExpoTokenScalarWhereWithAggregatesInput | ExpoTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExpoToken"> | string
    user_id?: StringWithAggregatesFilter<"ExpoToken"> | string
    token?: StringWithAggregatesFilter<"ExpoToken"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"ExpoToken"> | Date | string | null
  }

  export type ClinicaWhereInput = {
    AND?: ClinicaWhereInput | ClinicaWhereInput[]
    OR?: ClinicaWhereInput[]
    NOT?: ClinicaWhereInput | ClinicaWhereInput[]
    id?: StringFilter<"Clinica"> | string
    responsavel?: StringFilter<"Clinica"> | string
    razaoSocial?: StringFilter<"Clinica"> | string
    password?: StringFilter<"Clinica"> | string
    email?: StringFilter<"Clinica"> | string
    telefone?: StringFilter<"Clinica"> | string
    cnjp?: StringFilter<"Clinica"> | string
    cep?: StringFilter<"Clinica"> | string
    endereco?: StringFilter<"Clinica"> | string
    numero?: StringFilter<"Clinica"> | string
    uf?: StringFilter<"Clinica"> | string
    cidade?: StringFilter<"Clinica"> | string
    complemento?: StringNullableFilter<"Clinica"> | string | null
    img_clinica?: StringNullableFilter<"Clinica"> | string | null
    status?: IntFilter<"Clinica"> | number
    created_at?: DateTimeNullableFilter<"Clinica"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Clinica"> | Date | string | null
  }

  export type ClinicaOrderByWithRelationInput = {
    id?: SortOrder
    responsavel?: SortOrder
    razaoSocial?: SortOrder
    password?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    cnjp?: SortOrder
    cep?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    complemento?: SortOrderInput | SortOrder
    img_clinica?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
  }

  export type ClinicaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClinicaWhereInput | ClinicaWhereInput[]
    OR?: ClinicaWhereInput[]
    NOT?: ClinicaWhereInput | ClinicaWhereInput[]
    responsavel?: StringFilter<"Clinica"> | string
    razaoSocial?: StringFilter<"Clinica"> | string
    password?: StringFilter<"Clinica"> | string
    email?: StringFilter<"Clinica"> | string
    telefone?: StringFilter<"Clinica"> | string
    cnjp?: StringFilter<"Clinica"> | string
    cep?: StringFilter<"Clinica"> | string
    endereco?: StringFilter<"Clinica"> | string
    numero?: StringFilter<"Clinica"> | string
    uf?: StringFilter<"Clinica"> | string
    cidade?: StringFilter<"Clinica"> | string
    complemento?: StringNullableFilter<"Clinica"> | string | null
    img_clinica?: StringNullableFilter<"Clinica"> | string | null
    status?: IntFilter<"Clinica"> | number
    created_at?: DateTimeNullableFilter<"Clinica"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Clinica"> | Date | string | null
  }, "id">

  export type ClinicaOrderByWithAggregationInput = {
    id?: SortOrder
    responsavel?: SortOrder
    razaoSocial?: SortOrder
    password?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    cnjp?: SortOrder
    cep?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    complemento?: SortOrderInput | SortOrder
    img_clinica?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: ClinicaCountOrderByAggregateInput
    _avg?: ClinicaAvgOrderByAggregateInput
    _max?: ClinicaMaxOrderByAggregateInput
    _min?: ClinicaMinOrderByAggregateInput
    _sum?: ClinicaSumOrderByAggregateInput
  }

  export type ClinicaScalarWhereWithAggregatesInput = {
    AND?: ClinicaScalarWhereWithAggregatesInput | ClinicaScalarWhereWithAggregatesInput[]
    OR?: ClinicaScalarWhereWithAggregatesInput[]
    NOT?: ClinicaScalarWhereWithAggregatesInput | ClinicaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Clinica"> | string
    responsavel?: StringWithAggregatesFilter<"Clinica"> | string
    razaoSocial?: StringWithAggregatesFilter<"Clinica"> | string
    password?: StringWithAggregatesFilter<"Clinica"> | string
    email?: StringWithAggregatesFilter<"Clinica"> | string
    telefone?: StringWithAggregatesFilter<"Clinica"> | string
    cnjp?: StringWithAggregatesFilter<"Clinica"> | string
    cep?: StringWithAggregatesFilter<"Clinica"> | string
    endereco?: StringWithAggregatesFilter<"Clinica"> | string
    numero?: StringWithAggregatesFilter<"Clinica"> | string
    uf?: StringWithAggregatesFilter<"Clinica"> | string
    cidade?: StringWithAggregatesFilter<"Clinica"> | string
    complemento?: StringNullableWithAggregatesFilter<"Clinica"> | string | null
    img_clinica?: StringNullableWithAggregatesFilter<"Clinica"> | string | null
    status?: IntWithAggregatesFilter<"Clinica"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"Clinica"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Clinica"> | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    pets?: PetCreateNestedManyWithoutUserInput
    expo_token?: ExpoTokenCreateNestedManyWithoutUserInput
    user_id?: AgendamentosCreateNestedManyWithoutUsersInput
    vacinas?: VacinaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    pets?: PetUncheckedCreateNestedManyWithoutUserInput
    expo_token?: ExpoTokenUncheckedCreateNestedManyWithoutUserInput
    user_id?: AgendamentosUncheckedCreateNestedManyWithoutUsersInput
    vacinas?: VacinaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    pets?: PetUpdateManyWithoutUserNestedInput
    expo_token?: ExpoTokenUpdateManyWithoutUserNestedInput
    user_id?: AgendamentosUpdateManyWithoutUsersNestedInput
    vacinas?: VacinaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    pets?: PetUncheckedUpdateManyWithoutUserNestedInput
    expo_token?: ExpoTokenUncheckedUpdateManyWithoutUserNestedInput
    user_id?: AgendamentosUncheckedUpdateManyWithoutUsersNestedInput
    vacinas?: VacinaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    price: string
    description: string
    banner: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    items?: ItemCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    price: string
    description: string
    banner: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    category_id: string
    items?: ItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: ItemUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    items?: ItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    price: string
    description: string
    banner: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    category_id: string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category_id?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    id?: string
    table: number
    status?: boolean
    draft?: boolean
    name?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    items?: ItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    table: number
    status?: boolean
    draft?: boolean
    name?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    items?: ItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    table?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    draft?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: ItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    table?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    draft?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: ItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    table: number
    status?: boolean
    draft?: boolean
    name?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    table?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    draft?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    table?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    draft?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ItemCreateInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order: OrderCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id: string
    product_id: string
  }

  export type ItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
  }

  export type ItemCreateManyInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id: string
    product_id: string
  }

  export type ItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
  }

  export type PetCreateInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    img_perfil: string
    user: UserCreateNestedOneWithoutPetsInput
    vacinas?: VacinaCreateNestedManyWithoutPetsInput
    exames?: ExameCreateNestedManyWithoutPetInput
    publicacos?: PublicacoesCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosCreateNestedManyWithoutPetsInput
  }

  export type PetUncheckedCreateInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    user_id: string
    img_perfil: string
    vacinas?: VacinaUncheckedCreateNestedManyWithoutPetsInput
    exames?: ExameUncheckedCreateNestedManyWithoutPetInput
    publicacos?: PublicacoesUncheckedCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosUncheckedCreateNestedManyWithoutPetsInput
  }

  export type PetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPetsNestedInput
    vacinas?: VacinaUpdateManyWithoutPetsNestedInput
    exames?: ExameUpdateManyWithoutPetNestedInput
    publicacos?: PublicacoesUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUpdateManyWithoutPetsNestedInput
  }

  export type PetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    img_perfil?: StringFieldUpdateOperationsInput | string
    vacinas?: VacinaUncheckedUpdateManyWithoutPetsNestedInput
    exames?: ExameUncheckedUpdateManyWithoutPetNestedInput
    publicacos?: PublicacoesUncheckedUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUncheckedUpdateManyWithoutPetsNestedInput
  }

  export type PetCreateManyInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    user_id: string
    img_perfil: string
  }

  export type PetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
  }

  export type PetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    img_perfil?: StringFieldUpdateOperationsInput | string
  }

  export type CuriosidadeCreateInput = {
    id?: string
    conteudo: string
  }

  export type CuriosidadeUncheckedCreateInput = {
    id?: string
    conteudo: string
  }

  export type CuriosidadeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
  }

  export type CuriosidadeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
  }

  export type CuriosidadeCreateManyInput = {
    id?: string
    conteudo: string
  }

  export type CuriosidadeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
  }

  export type CuriosidadeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
  }

  export type VacinaCreateInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
    pets: PetCreateNestedOneWithoutVacinasInput
    user: UserCreateNestedOneWithoutVacinasInput
  }

  export type VacinaUncheckedCreateInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    pet_id: string
    user_id: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
  }

  export type VacinaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    pets?: PetUpdateOneRequiredWithoutVacinasNestedInput
    user?: UserUpdateOneRequiredWithoutVacinasNestedInput
  }

  export type VacinaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type VacinaCreateManyInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    pet_id: string
    user_id: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
  }

  export type VacinaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type VacinaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type ExameCreateInput = {
    id?: string
    data_exame: string
    exame: string
    clinica: string
    observacao: string
    img_laudo: string
    pet: PetCreateNestedOneWithoutExamesInput
  }

  export type ExameUncheckedCreateInput = {
    id?: string
    data_exame: string
    exame: string
    clinica: string
    observacao: string
    pet_id: string
    img_laudo: string
  }

  export type ExameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_exame?: StringFieldUpdateOperationsInput | string
    exame?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_laudo?: StringFieldUpdateOperationsInput | string
    pet?: PetUpdateOneRequiredWithoutExamesNestedInput
  }

  export type ExameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_exame?: StringFieldUpdateOperationsInput | string
    exame?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    img_laudo?: StringFieldUpdateOperationsInput | string
  }

  export type ExameCreateManyInput = {
    id?: string
    data_exame: string
    exame: string
    clinica: string
    observacao: string
    pet_id: string
    img_laudo: string
  }

  export type ExameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_exame?: StringFieldUpdateOperationsInput | string
    exame?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_laudo?: StringFieldUpdateOperationsInput | string
  }

  export type ExameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_exame?: StringFieldUpdateOperationsInput | string
    exame?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    img_laudo?: StringFieldUpdateOperationsInput | string
  }

  export type PublicacoesCreateInput = {
    id?: string
    conteudo: string
    img_blog: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    pet: PetCreateNestedOneWithoutPublicacosInput
  }

  export type PublicacoesUncheckedCreateInput = {
    id?: string
    pet_id: string
    conteudo: string
    img_blog: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type PublicacoesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    img_blog?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pet?: PetUpdateOneRequiredWithoutPublicacosNestedInput
  }

  export type PublicacoesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    img_blog?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublicacoesCreateManyInput = {
    id?: string
    pet_id: string
    conteudo: string
    img_blog: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type PublicacoesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    img_blog?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublicacoesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    img_blog?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgendamentosCreateInput = {
    id?: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
    pets: PetCreateNestedOneWithoutAgendamentosInput
    users: UserCreateNestedOneWithoutUser_idInput
    horarios: HorariosCreateNestedOneWithoutAgendamentosInput
    empresas: EmpresaCreateNestedOneWithoutAgendamentosInput
    servicos: ServicosCreateNestedOneWithoutAgendamentosInput
  }

  export type AgendamentosUncheckedCreateInput = {
    id?: string
    pet_id: string
    id_horario: string
    id_empresa: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    pets?: PetUpdateOneRequiredWithoutAgendamentosNestedInput
    users?: UserUpdateOneRequiredWithoutUser_idNestedInput
    horarios?: HorariosUpdateOneRequiredWithoutAgendamentosNestedInput
    empresas?: EmpresaUpdateOneRequiredWithoutAgendamentosNestedInput
    servicos?: ServicosUpdateOneRequiredWithoutAgendamentosNestedInput
  }

  export type AgendamentosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosCreateManyInput = {
    id?: string
    pet_id: string
    id_horario: string
    id_empresa: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type ServicosCreateInput = {
    id?: string
    nome: string
    tipo: number
    status: number
    agendamentos?: AgendamentosCreateNestedManyWithoutServicosInput
  }

  export type ServicosUncheckedCreateInput = {
    id?: string
    nome: string
    tipo: number
    status: number
    agendamentos?: AgendamentosUncheckedCreateNestedManyWithoutServicosInput
  }

  export type ServicosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    agendamentos?: AgendamentosUpdateManyWithoutServicosNestedInput
  }

  export type ServicosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    agendamentos?: AgendamentosUncheckedUpdateManyWithoutServicosNestedInput
  }

  export type ServicosCreateManyInput = {
    id?: string
    nome: string
    tipo: number
    status: number
  }

  export type ServicosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ServicosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type HorariosCreateInput = {
    id?: string
    tipo: number
    sub_categoria?: string | null
    id_clinica: string
    data_servico: string
    horario_servico: string
    status: number
    agendamentos?: AgendamentosCreateNestedManyWithoutHorariosInput
  }

  export type HorariosUncheckedCreateInput = {
    id?: string
    tipo: number
    sub_categoria?: string | null
    id_clinica: string
    data_servico: string
    horario_servico: string
    status: number
    agendamentos?: AgendamentosUncheckedCreateNestedManyWithoutHorariosInput
  }

  export type HorariosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    sub_categoria?: NullableStringFieldUpdateOperationsInput | string | null
    id_clinica?: StringFieldUpdateOperationsInput | string
    data_servico?: StringFieldUpdateOperationsInput | string
    horario_servico?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    agendamentos?: AgendamentosUpdateManyWithoutHorariosNestedInput
  }

  export type HorariosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    sub_categoria?: NullableStringFieldUpdateOperationsInput | string | null
    id_clinica?: StringFieldUpdateOperationsInput | string
    data_servico?: StringFieldUpdateOperationsInput | string
    horario_servico?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    agendamentos?: AgendamentosUncheckedUpdateManyWithoutHorariosNestedInput
  }

  export type HorariosCreateManyInput = {
    id?: string
    tipo: number
    sub_categoria?: string | null
    id_clinica: string
    data_servico: string
    horario_servico: string
    status: number
  }

  export type HorariosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    sub_categoria?: NullableStringFieldUpdateOperationsInput | string | null
    id_clinica?: StringFieldUpdateOperationsInput | string
    data_servico?: StringFieldUpdateOperationsInput | string
    horario_servico?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type HorariosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    sub_categoria?: NullableStringFieldUpdateOperationsInput | string | null
    id_clinica?: StringFieldUpdateOperationsInput | string
    data_servico?: StringFieldUpdateOperationsInput | string
    horario_servico?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type EmpresaCreateInput = {
    id?: string
    cnpj: string
    nome: string
    agendamentos?: AgendamentosCreateNestedManyWithoutEmpresasInput
  }

  export type EmpresaUncheckedCreateInput = {
    id?: string
    cnpj: string
    nome: string
    agendamentos?: AgendamentosUncheckedCreateNestedManyWithoutEmpresasInput
  }

  export type EmpresaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    agendamentos?: AgendamentosUpdateManyWithoutEmpresasNestedInput
  }

  export type EmpresaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    agendamentos?: AgendamentosUncheckedUpdateManyWithoutEmpresasNestedInput
  }

  export type EmpresaCreateManyInput = {
    id?: string
    cnpj: string
    nome: string
  }

  export type EmpresaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type EmpresaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ExpoTokenCreateInput = {
    id?: string
    token: string
    created_at?: Date | string | null
    user: UserCreateNestedOneWithoutExpo_tokenInput
  }

  export type ExpoTokenUncheckedCreateInput = {
    id?: string
    user_id: string
    token: string
    created_at?: Date | string | null
  }

  export type ExpoTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutExpo_tokenNestedInput
  }

  export type ExpoTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpoTokenCreateManyInput = {
    id?: string
    user_id: string
    token: string
    created_at?: Date | string | null
  }

  export type ExpoTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpoTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClinicaCreateInput = {
    id?: string
    responsavel: string
    razaoSocial: string
    password: string
    email: string
    telefone: string
    cnjp: string
    cep: string
    endereco: string
    numero: string
    uf: string
    cidade: string
    complemento?: string | null
    img_clinica?: string | null
    status?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ClinicaUncheckedCreateInput = {
    id?: string
    responsavel: string
    razaoSocial: string
    password: string
    email: string
    telefone: string
    cnjp: string
    cep: string
    endereco: string
    numero: string
    uf: string
    cidade: string
    complemento?: string | null
    img_clinica?: string | null
    status?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ClinicaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cnjp?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    img_clinica?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClinicaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cnjp?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    img_clinica?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClinicaCreateManyInput = {
    id?: string
    responsavel: string
    razaoSocial: string
    password: string
    email: string
    telefone: string
    cnjp: string
    cep: string
    endereco: string
    numero: string
    uf: string
    cidade: string
    complemento?: string | null
    img_clinica?: string | null
    status?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ClinicaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cnjp?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    img_clinica?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClinicaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    responsavel?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cnjp?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    img_clinica?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PetListRelationFilter = {
    every?: PetWhereInput
    some?: PetWhereInput
    none?: PetWhereInput
  }

  export type ExpoTokenListRelationFilter = {
    every?: ExpoTokenWhereInput
    some?: ExpoTokenWhereInput
    none?: ExpoTokenWhereInput
  }

  export type AgendamentosListRelationFilter = {
    every?: AgendamentosWhereInput
    some?: AgendamentosWhereInput
    none?: AgendamentosWhereInput
  }

  export type VacinaListRelationFilter = {
    every?: VacinaWhereInput
    some?: VacinaWhereInput
    none?: VacinaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExpoTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgendamentosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VacinaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    bairro?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    complemento?: SortOrder
    cpfcnpj?: SortOrder
    endereco?: SortOrder
    estado?: SortOrder
    numero?: SortOrder
    telefone?: SortOrder
    status?: SortOrder
    img_usuario?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    bairro?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    complemento?: SortOrder
    cpfcnpj?: SortOrder
    endereco?: SortOrder
    estado?: SortOrder
    numero?: SortOrder
    telefone?: SortOrder
    status?: SortOrder
    img_usuario?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    bairro?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    complemento?: SortOrder
    cpfcnpj?: SortOrder
    endereco?: SortOrder
    estado?: SortOrder
    numero?: SortOrder
    telefone?: SortOrder
    status?: SortOrder
    img_usuario?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    category_id?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    category_id?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    category_id?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    table?: SortOrder
    status?: SortOrder
    draft?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    table?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    table?: SortOrder
    status?: SortOrder
    draft?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    table?: SortOrder
    status?: SortOrder
    draft?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    table?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ExameListRelationFilter = {
    every?: ExameWhereInput
    some?: ExameWhereInput
    none?: ExameWhereInput
  }

  export type PublicacoesListRelationFilter = {
    every?: PublicacoesWhereInput
    some?: PublicacoesWhereInput
    none?: PublicacoesWhereInput
  }

  export type ExameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PublicacoesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    apelido?: SortOrder
    data_nascimento?: SortOrder
    especie?: SortOrder
    idade?: SortOrder
    meses?: SortOrder
    raca?: SortOrder
    chip?: SortOrder
    sexo?: SortOrder
    temperamento?: SortOrder
    tamanho?: SortOrder
    detalhes?: SortOrder
    user_id?: SortOrder
    img_perfil?: SortOrder
  }

  export type PetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    apelido?: SortOrder
    data_nascimento?: SortOrder
    especie?: SortOrder
    idade?: SortOrder
    meses?: SortOrder
    raca?: SortOrder
    chip?: SortOrder
    sexo?: SortOrder
    temperamento?: SortOrder
    tamanho?: SortOrder
    detalhes?: SortOrder
    user_id?: SortOrder
    img_perfil?: SortOrder
  }

  export type PetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    apelido?: SortOrder
    data_nascimento?: SortOrder
    especie?: SortOrder
    idade?: SortOrder
    meses?: SortOrder
    raca?: SortOrder
    chip?: SortOrder
    sexo?: SortOrder
    temperamento?: SortOrder
    tamanho?: SortOrder
    detalhes?: SortOrder
    user_id?: SortOrder
    img_perfil?: SortOrder
  }

  export type CuriosidadeCountOrderByAggregateInput = {
    id?: SortOrder
    conteudo?: SortOrder
  }

  export type CuriosidadeMaxOrderByAggregateInput = {
    id?: SortOrder
    conteudo?: SortOrder
  }

  export type CuriosidadeMinOrderByAggregateInput = {
    id?: SortOrder
    conteudo?: SortOrder
  }

  export type PetRelationFilter = {
    is?: PetWhereInput
    isNot?: PetWhereInput
  }

  export type VacinaCountOrderByAggregateInput = {
    id?: SortOrder
    data_vacinacao?: SortOrder
    vacina?: SortOrder
    clinica?: SortOrder
    intervalo?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    user_id?: SortOrder
    img_lote?: SortOrder
    proxima_aplicacao?: SortOrder
    notificacoes_enviadas?: SortOrder
  }

  export type VacinaMaxOrderByAggregateInput = {
    id?: SortOrder
    data_vacinacao?: SortOrder
    vacina?: SortOrder
    clinica?: SortOrder
    intervalo?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    user_id?: SortOrder
    img_lote?: SortOrder
    proxima_aplicacao?: SortOrder
    notificacoes_enviadas?: SortOrder
  }

  export type VacinaMinOrderByAggregateInput = {
    id?: SortOrder
    data_vacinacao?: SortOrder
    vacina?: SortOrder
    clinica?: SortOrder
    intervalo?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    user_id?: SortOrder
    img_lote?: SortOrder
    proxima_aplicacao?: SortOrder
    notificacoes_enviadas?: SortOrder
  }

  export type ExameCountOrderByAggregateInput = {
    id?: SortOrder
    data_exame?: SortOrder
    exame?: SortOrder
    clinica?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    img_laudo?: SortOrder
  }

  export type ExameMaxOrderByAggregateInput = {
    id?: SortOrder
    data_exame?: SortOrder
    exame?: SortOrder
    clinica?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    img_laudo?: SortOrder
  }

  export type ExameMinOrderByAggregateInput = {
    id?: SortOrder
    data_exame?: SortOrder
    exame?: SortOrder
    clinica?: SortOrder
    observacao?: SortOrder
    pet_id?: SortOrder
    img_laudo?: SortOrder
  }

  export type PublicacoesCountOrderByAggregateInput = {
    id?: SortOrder
    pet_id?: SortOrder
    conteudo?: SortOrder
    img_blog?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PublicacoesMaxOrderByAggregateInput = {
    id?: SortOrder
    pet_id?: SortOrder
    conteudo?: SortOrder
    img_blog?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PublicacoesMinOrderByAggregateInput = {
    id?: SortOrder
    pet_id?: SortOrder
    conteudo?: SortOrder
    img_blog?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type HorariosRelationFilter = {
    is?: HorariosWhereInput
    isNot?: HorariosWhereInput
  }

  export type EmpresaRelationFilter = {
    is?: EmpresaWhereInput
    isNot?: EmpresaWhereInput
  }

  export type ServicosRelationFilter = {
    is?: ServicosWhereInput
    isNot?: ServicosWhereInput
  }

  export type AgendamentosCountOrderByAggregateInput = {
    id?: SortOrder
    pet_id?: SortOrder
    id_horario?: SortOrder
    id_empresa?: SortOrder
    id_servico?: SortOrder
    user_id?: SortOrder
    data_agendamento?: SortOrder
    horario_agendamento?: SortOrder
    status?: SortOrder
    notificacoes_enviadas?: SortOrder
  }

  export type AgendamentosAvgOrderByAggregateInput = {
    status?: SortOrder
  }

  export type AgendamentosMaxOrderByAggregateInput = {
    id?: SortOrder
    pet_id?: SortOrder
    id_horario?: SortOrder
    id_empresa?: SortOrder
    id_servico?: SortOrder
    user_id?: SortOrder
    data_agendamento?: SortOrder
    horario_agendamento?: SortOrder
    status?: SortOrder
    notificacoes_enviadas?: SortOrder
  }

  export type AgendamentosMinOrderByAggregateInput = {
    id?: SortOrder
    pet_id?: SortOrder
    id_horario?: SortOrder
    id_empresa?: SortOrder
    id_servico?: SortOrder
    user_id?: SortOrder
    data_agendamento?: SortOrder
    horario_agendamento?: SortOrder
    status?: SortOrder
    notificacoes_enviadas?: SortOrder
  }

  export type AgendamentosSumOrderByAggregateInput = {
    status?: SortOrder
  }

  export type ServicosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
  }

  export type ServicosAvgOrderByAggregateInput = {
    tipo?: SortOrder
    status?: SortOrder
  }

  export type ServicosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
  }

  export type ServicosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
  }

  export type ServicosSumOrderByAggregateInput = {
    tipo?: SortOrder
    status?: SortOrder
  }

  export type HorariosCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    sub_categoria?: SortOrder
    id_clinica?: SortOrder
    data_servico?: SortOrder
    horario_servico?: SortOrder
    status?: SortOrder
  }

  export type HorariosAvgOrderByAggregateInput = {
    tipo?: SortOrder
    status?: SortOrder
  }

  export type HorariosMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    sub_categoria?: SortOrder
    id_clinica?: SortOrder
    data_servico?: SortOrder
    horario_servico?: SortOrder
    status?: SortOrder
  }

  export type HorariosMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    sub_categoria?: SortOrder
    id_clinica?: SortOrder
    data_servico?: SortOrder
    horario_servico?: SortOrder
    status?: SortOrder
  }

  export type HorariosSumOrderByAggregateInput = {
    tipo?: SortOrder
    status?: SortOrder
  }

  export type EmpresaCountOrderByAggregateInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
  }

  export type EmpresaMaxOrderByAggregateInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
  }

  export type EmpresaMinOrderByAggregateInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
  }

  export type ExpoTokenCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    created_at?: SortOrder
  }

  export type ExpoTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    created_at?: SortOrder
  }

  export type ExpoTokenMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    created_at?: SortOrder
  }

  export type ClinicaCountOrderByAggregateInput = {
    id?: SortOrder
    responsavel?: SortOrder
    razaoSocial?: SortOrder
    password?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    cnjp?: SortOrder
    cep?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    complemento?: SortOrder
    img_clinica?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClinicaAvgOrderByAggregateInput = {
    status?: SortOrder
  }

  export type ClinicaMaxOrderByAggregateInput = {
    id?: SortOrder
    responsavel?: SortOrder
    razaoSocial?: SortOrder
    password?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    cnjp?: SortOrder
    cep?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    complemento?: SortOrder
    img_clinica?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClinicaMinOrderByAggregateInput = {
    id?: SortOrder
    responsavel?: SortOrder
    razaoSocial?: SortOrder
    password?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    cnjp?: SortOrder
    cep?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    complemento?: SortOrder
    img_clinica?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClinicaSumOrderByAggregateInput = {
    status?: SortOrder
  }

  export type PetCreateNestedManyWithoutUserInput = {
    create?: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput> | PetCreateWithoutUserInput[] | PetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PetCreateOrConnectWithoutUserInput | PetCreateOrConnectWithoutUserInput[]
    createMany?: PetCreateManyUserInputEnvelope
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
  }

  export type ExpoTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<ExpoTokenCreateWithoutUserInput, ExpoTokenUncheckedCreateWithoutUserInput> | ExpoTokenCreateWithoutUserInput[] | ExpoTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExpoTokenCreateOrConnectWithoutUserInput | ExpoTokenCreateOrConnectWithoutUserInput[]
    createMany?: ExpoTokenCreateManyUserInputEnvelope
    connect?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
  }

  export type AgendamentosCreateNestedManyWithoutUsersInput = {
    create?: XOR<AgendamentosCreateWithoutUsersInput, AgendamentosUncheckedCreateWithoutUsersInput> | AgendamentosCreateWithoutUsersInput[] | AgendamentosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutUsersInput | AgendamentosCreateOrConnectWithoutUsersInput[]
    createMany?: AgendamentosCreateManyUsersInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type VacinaCreateNestedManyWithoutUserInput = {
    create?: XOR<VacinaCreateWithoutUserInput, VacinaUncheckedCreateWithoutUserInput> | VacinaCreateWithoutUserInput[] | VacinaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VacinaCreateOrConnectWithoutUserInput | VacinaCreateOrConnectWithoutUserInput[]
    createMany?: VacinaCreateManyUserInputEnvelope
    connect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
  }

  export type PetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput> | PetCreateWithoutUserInput[] | PetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PetCreateOrConnectWithoutUserInput | PetCreateOrConnectWithoutUserInput[]
    createMany?: PetCreateManyUserInputEnvelope
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
  }

  export type ExpoTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ExpoTokenCreateWithoutUserInput, ExpoTokenUncheckedCreateWithoutUserInput> | ExpoTokenCreateWithoutUserInput[] | ExpoTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExpoTokenCreateOrConnectWithoutUserInput | ExpoTokenCreateOrConnectWithoutUserInput[]
    createMany?: ExpoTokenCreateManyUserInputEnvelope
    connect?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
  }

  export type AgendamentosUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<AgendamentosCreateWithoutUsersInput, AgendamentosUncheckedCreateWithoutUsersInput> | AgendamentosCreateWithoutUsersInput[] | AgendamentosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutUsersInput | AgendamentosCreateOrConnectWithoutUsersInput[]
    createMany?: AgendamentosCreateManyUsersInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type VacinaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VacinaCreateWithoutUserInput, VacinaUncheckedCreateWithoutUserInput> | VacinaCreateWithoutUserInput[] | VacinaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VacinaCreateOrConnectWithoutUserInput | VacinaCreateOrConnectWithoutUserInput[]
    createMany?: VacinaCreateManyUserInputEnvelope
    connect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PetUpdateManyWithoutUserNestedInput = {
    create?: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput> | PetCreateWithoutUserInput[] | PetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PetCreateOrConnectWithoutUserInput | PetCreateOrConnectWithoutUserInput[]
    upsert?: PetUpsertWithWhereUniqueWithoutUserInput | PetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PetCreateManyUserInputEnvelope
    set?: PetWhereUniqueInput | PetWhereUniqueInput[]
    disconnect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    delete?: PetWhereUniqueInput | PetWhereUniqueInput[]
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    update?: PetUpdateWithWhereUniqueWithoutUserInput | PetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PetUpdateManyWithWhereWithoutUserInput | PetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PetScalarWhereInput | PetScalarWhereInput[]
  }

  export type ExpoTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExpoTokenCreateWithoutUserInput, ExpoTokenUncheckedCreateWithoutUserInput> | ExpoTokenCreateWithoutUserInput[] | ExpoTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExpoTokenCreateOrConnectWithoutUserInput | ExpoTokenCreateOrConnectWithoutUserInput[]
    upsert?: ExpoTokenUpsertWithWhereUniqueWithoutUserInput | ExpoTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExpoTokenCreateManyUserInputEnvelope
    set?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
    disconnect?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
    delete?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
    connect?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
    update?: ExpoTokenUpdateWithWhereUniqueWithoutUserInput | ExpoTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExpoTokenUpdateManyWithWhereWithoutUserInput | ExpoTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExpoTokenScalarWhereInput | ExpoTokenScalarWhereInput[]
  }

  export type AgendamentosUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AgendamentosCreateWithoutUsersInput, AgendamentosUncheckedCreateWithoutUsersInput> | AgendamentosCreateWithoutUsersInput[] | AgendamentosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutUsersInput | AgendamentosCreateOrConnectWithoutUsersInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutUsersInput | AgendamentosUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: AgendamentosCreateManyUsersInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutUsersInput | AgendamentosUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutUsersInput | AgendamentosUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type VacinaUpdateManyWithoutUserNestedInput = {
    create?: XOR<VacinaCreateWithoutUserInput, VacinaUncheckedCreateWithoutUserInput> | VacinaCreateWithoutUserInput[] | VacinaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VacinaCreateOrConnectWithoutUserInput | VacinaCreateOrConnectWithoutUserInput[]
    upsert?: VacinaUpsertWithWhereUniqueWithoutUserInput | VacinaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VacinaCreateManyUserInputEnvelope
    set?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    disconnect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    delete?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    connect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    update?: VacinaUpdateWithWhereUniqueWithoutUserInput | VacinaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VacinaUpdateManyWithWhereWithoutUserInput | VacinaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VacinaScalarWhereInput | VacinaScalarWhereInput[]
  }

  export type PetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput> | PetCreateWithoutUserInput[] | PetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PetCreateOrConnectWithoutUserInput | PetCreateOrConnectWithoutUserInput[]
    upsert?: PetUpsertWithWhereUniqueWithoutUserInput | PetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PetCreateManyUserInputEnvelope
    set?: PetWhereUniqueInput | PetWhereUniqueInput[]
    disconnect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    delete?: PetWhereUniqueInput | PetWhereUniqueInput[]
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    update?: PetUpdateWithWhereUniqueWithoutUserInput | PetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PetUpdateManyWithWhereWithoutUserInput | PetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PetScalarWhereInput | PetScalarWhereInput[]
  }

  export type ExpoTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExpoTokenCreateWithoutUserInput, ExpoTokenUncheckedCreateWithoutUserInput> | ExpoTokenCreateWithoutUserInput[] | ExpoTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExpoTokenCreateOrConnectWithoutUserInput | ExpoTokenCreateOrConnectWithoutUserInput[]
    upsert?: ExpoTokenUpsertWithWhereUniqueWithoutUserInput | ExpoTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExpoTokenCreateManyUserInputEnvelope
    set?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
    disconnect?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
    delete?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
    connect?: ExpoTokenWhereUniqueInput | ExpoTokenWhereUniqueInput[]
    update?: ExpoTokenUpdateWithWhereUniqueWithoutUserInput | ExpoTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExpoTokenUpdateManyWithWhereWithoutUserInput | ExpoTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExpoTokenScalarWhereInput | ExpoTokenScalarWhereInput[]
  }

  export type AgendamentosUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AgendamentosCreateWithoutUsersInput, AgendamentosUncheckedCreateWithoutUsersInput> | AgendamentosCreateWithoutUsersInput[] | AgendamentosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutUsersInput | AgendamentosCreateOrConnectWithoutUsersInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutUsersInput | AgendamentosUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: AgendamentosCreateManyUsersInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutUsersInput | AgendamentosUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutUsersInput | AgendamentosUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type VacinaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VacinaCreateWithoutUserInput, VacinaUncheckedCreateWithoutUserInput> | VacinaCreateWithoutUserInput[] | VacinaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VacinaCreateOrConnectWithoutUserInput | VacinaCreateOrConnectWithoutUserInput[]
    upsert?: VacinaUpsertWithWhereUniqueWithoutUserInput | VacinaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VacinaCreateManyUserInputEnvelope
    set?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    disconnect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    delete?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    connect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    update?: VacinaUpdateWithWhereUniqueWithoutUserInput | VacinaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VacinaUpdateManyWithWhereWithoutUserInput | VacinaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VacinaScalarWhereInput | VacinaScalarWhereInput[]
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ItemCreateNestedManyWithoutProductInput = {
    create?: XOR<ItemCreateWithoutProductInput, ItemUncheckedCreateWithoutProductInput> | ItemCreateWithoutProductInput[] | ItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutProductInput | ItemCreateOrConnectWithoutProductInput[]
    createMany?: ItemCreateManyProductInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    connect?: CategoryWhereUniqueInput
  }

  export type ItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ItemCreateWithoutProductInput, ItemUncheckedCreateWithoutProductInput> | ItemCreateWithoutProductInput[] | ItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutProductInput | ItemCreateOrConnectWithoutProductInput[]
    createMany?: ItemCreateManyProductInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type ItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<ItemCreateWithoutProductInput, ItemUncheckedCreateWithoutProductInput> | ItemCreateWithoutProductInput[] | ItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutProductInput | ItemCreateOrConnectWithoutProductInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutProductInput | ItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ItemCreateManyProductInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutProductInput | ItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutProductInput | ItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type CategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    upsert?: CategoryUpsertWithoutProductsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductsInput, CategoryUpdateWithoutProductsInput>, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type ItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ItemCreateWithoutProductInput, ItemUncheckedCreateWithoutProductInput> | ItemCreateWithoutProductInput[] | ItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutProductInput | ItemCreateOrConnectWithoutProductInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutProductInput | ItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ItemCreateManyProductInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutProductInput | ItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutProductInput | ItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<ItemCreateWithoutOrderInput, ItemUncheckedCreateWithoutOrderInput> | ItemCreateWithoutOrderInput[] | ItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutOrderInput | ItemCreateOrConnectWithoutOrderInput[]
    createMany?: ItemCreateManyOrderInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<ItemCreateWithoutOrderInput, ItemUncheckedCreateWithoutOrderInput> | ItemCreateWithoutOrderInput[] | ItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutOrderInput | ItemCreateOrConnectWithoutOrderInput[]
    createMany?: ItemCreateManyOrderInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ItemCreateWithoutOrderInput, ItemUncheckedCreateWithoutOrderInput> | ItemCreateWithoutOrderInput[] | ItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutOrderInput | ItemCreateOrConnectWithoutOrderInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutOrderInput | ItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ItemCreateManyOrderInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutOrderInput | ItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutOrderInput | ItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ItemCreateWithoutOrderInput, ItemUncheckedCreateWithoutOrderInput> | ItemCreateWithoutOrderInput[] | ItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutOrderInput | ItemCreateOrConnectWithoutOrderInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutOrderInput | ItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ItemCreateManyOrderInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutOrderInput | ItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutOrderInput | ItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutItemsInput = {
    create?: XOR<ProductCreateWithoutItemsInput, ProductUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    upsert?: OrderUpsertWithoutItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutItemsInput, OrderUpdateWithoutItemsInput>, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ProductCreateWithoutItemsInput, ProductUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutItemsInput
    upsert?: ProductUpsertWithoutItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutItemsInput, ProductUpdateWithoutItemsInput>, ProductUncheckedUpdateWithoutItemsInput>
  }

  export type UserCreateNestedOneWithoutPetsInput = {
    create?: XOR<UserCreateWithoutPetsInput, UserUncheckedCreateWithoutPetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPetsInput
    connect?: UserWhereUniqueInput
  }

  export type VacinaCreateNestedManyWithoutPetsInput = {
    create?: XOR<VacinaCreateWithoutPetsInput, VacinaUncheckedCreateWithoutPetsInput> | VacinaCreateWithoutPetsInput[] | VacinaUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: VacinaCreateOrConnectWithoutPetsInput | VacinaCreateOrConnectWithoutPetsInput[]
    createMany?: VacinaCreateManyPetsInputEnvelope
    connect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
  }

  export type ExameCreateNestedManyWithoutPetInput = {
    create?: XOR<ExameCreateWithoutPetInput, ExameUncheckedCreateWithoutPetInput> | ExameCreateWithoutPetInput[] | ExameUncheckedCreateWithoutPetInput[]
    connectOrCreate?: ExameCreateOrConnectWithoutPetInput | ExameCreateOrConnectWithoutPetInput[]
    createMany?: ExameCreateManyPetInputEnvelope
    connect?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
  }

  export type PublicacoesCreateNestedManyWithoutPetInput = {
    create?: XOR<PublicacoesCreateWithoutPetInput, PublicacoesUncheckedCreateWithoutPetInput> | PublicacoesCreateWithoutPetInput[] | PublicacoesUncheckedCreateWithoutPetInput[]
    connectOrCreate?: PublicacoesCreateOrConnectWithoutPetInput | PublicacoesCreateOrConnectWithoutPetInput[]
    createMany?: PublicacoesCreateManyPetInputEnvelope
    connect?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
  }

  export type AgendamentosCreateNestedManyWithoutPetsInput = {
    create?: XOR<AgendamentosCreateWithoutPetsInput, AgendamentosUncheckedCreateWithoutPetsInput> | AgendamentosCreateWithoutPetsInput[] | AgendamentosUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutPetsInput | AgendamentosCreateOrConnectWithoutPetsInput[]
    createMany?: AgendamentosCreateManyPetsInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type VacinaUncheckedCreateNestedManyWithoutPetsInput = {
    create?: XOR<VacinaCreateWithoutPetsInput, VacinaUncheckedCreateWithoutPetsInput> | VacinaCreateWithoutPetsInput[] | VacinaUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: VacinaCreateOrConnectWithoutPetsInput | VacinaCreateOrConnectWithoutPetsInput[]
    createMany?: VacinaCreateManyPetsInputEnvelope
    connect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
  }

  export type ExameUncheckedCreateNestedManyWithoutPetInput = {
    create?: XOR<ExameCreateWithoutPetInput, ExameUncheckedCreateWithoutPetInput> | ExameCreateWithoutPetInput[] | ExameUncheckedCreateWithoutPetInput[]
    connectOrCreate?: ExameCreateOrConnectWithoutPetInput | ExameCreateOrConnectWithoutPetInput[]
    createMany?: ExameCreateManyPetInputEnvelope
    connect?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
  }

  export type PublicacoesUncheckedCreateNestedManyWithoutPetInput = {
    create?: XOR<PublicacoesCreateWithoutPetInput, PublicacoesUncheckedCreateWithoutPetInput> | PublicacoesCreateWithoutPetInput[] | PublicacoesUncheckedCreateWithoutPetInput[]
    connectOrCreate?: PublicacoesCreateOrConnectWithoutPetInput | PublicacoesCreateOrConnectWithoutPetInput[]
    createMany?: PublicacoesCreateManyPetInputEnvelope
    connect?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
  }

  export type AgendamentosUncheckedCreateNestedManyWithoutPetsInput = {
    create?: XOR<AgendamentosCreateWithoutPetsInput, AgendamentosUncheckedCreateWithoutPetsInput> | AgendamentosCreateWithoutPetsInput[] | AgendamentosUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutPetsInput | AgendamentosCreateOrConnectWithoutPetsInput[]
    createMany?: AgendamentosCreateManyPetsInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPetsNestedInput = {
    create?: XOR<UserCreateWithoutPetsInput, UserUncheckedCreateWithoutPetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPetsInput
    upsert?: UserUpsertWithoutPetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPetsInput, UserUpdateWithoutPetsInput>, UserUncheckedUpdateWithoutPetsInput>
  }

  export type VacinaUpdateManyWithoutPetsNestedInput = {
    create?: XOR<VacinaCreateWithoutPetsInput, VacinaUncheckedCreateWithoutPetsInput> | VacinaCreateWithoutPetsInput[] | VacinaUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: VacinaCreateOrConnectWithoutPetsInput | VacinaCreateOrConnectWithoutPetsInput[]
    upsert?: VacinaUpsertWithWhereUniqueWithoutPetsInput | VacinaUpsertWithWhereUniqueWithoutPetsInput[]
    createMany?: VacinaCreateManyPetsInputEnvelope
    set?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    disconnect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    delete?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    connect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    update?: VacinaUpdateWithWhereUniqueWithoutPetsInput | VacinaUpdateWithWhereUniqueWithoutPetsInput[]
    updateMany?: VacinaUpdateManyWithWhereWithoutPetsInput | VacinaUpdateManyWithWhereWithoutPetsInput[]
    deleteMany?: VacinaScalarWhereInput | VacinaScalarWhereInput[]
  }

  export type ExameUpdateManyWithoutPetNestedInput = {
    create?: XOR<ExameCreateWithoutPetInput, ExameUncheckedCreateWithoutPetInput> | ExameCreateWithoutPetInput[] | ExameUncheckedCreateWithoutPetInput[]
    connectOrCreate?: ExameCreateOrConnectWithoutPetInput | ExameCreateOrConnectWithoutPetInput[]
    upsert?: ExameUpsertWithWhereUniqueWithoutPetInput | ExameUpsertWithWhereUniqueWithoutPetInput[]
    createMany?: ExameCreateManyPetInputEnvelope
    set?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
    disconnect?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
    delete?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
    connect?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
    update?: ExameUpdateWithWhereUniqueWithoutPetInput | ExameUpdateWithWhereUniqueWithoutPetInput[]
    updateMany?: ExameUpdateManyWithWhereWithoutPetInput | ExameUpdateManyWithWhereWithoutPetInput[]
    deleteMany?: ExameScalarWhereInput | ExameScalarWhereInput[]
  }

  export type PublicacoesUpdateManyWithoutPetNestedInput = {
    create?: XOR<PublicacoesCreateWithoutPetInput, PublicacoesUncheckedCreateWithoutPetInput> | PublicacoesCreateWithoutPetInput[] | PublicacoesUncheckedCreateWithoutPetInput[]
    connectOrCreate?: PublicacoesCreateOrConnectWithoutPetInput | PublicacoesCreateOrConnectWithoutPetInput[]
    upsert?: PublicacoesUpsertWithWhereUniqueWithoutPetInput | PublicacoesUpsertWithWhereUniqueWithoutPetInput[]
    createMany?: PublicacoesCreateManyPetInputEnvelope
    set?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
    disconnect?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
    delete?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
    connect?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
    update?: PublicacoesUpdateWithWhereUniqueWithoutPetInput | PublicacoesUpdateWithWhereUniqueWithoutPetInput[]
    updateMany?: PublicacoesUpdateManyWithWhereWithoutPetInput | PublicacoesUpdateManyWithWhereWithoutPetInput[]
    deleteMany?: PublicacoesScalarWhereInput | PublicacoesScalarWhereInput[]
  }

  export type AgendamentosUpdateManyWithoutPetsNestedInput = {
    create?: XOR<AgendamentosCreateWithoutPetsInput, AgendamentosUncheckedCreateWithoutPetsInput> | AgendamentosCreateWithoutPetsInput[] | AgendamentosUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutPetsInput | AgendamentosCreateOrConnectWithoutPetsInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutPetsInput | AgendamentosUpsertWithWhereUniqueWithoutPetsInput[]
    createMany?: AgendamentosCreateManyPetsInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutPetsInput | AgendamentosUpdateWithWhereUniqueWithoutPetsInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutPetsInput | AgendamentosUpdateManyWithWhereWithoutPetsInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type VacinaUncheckedUpdateManyWithoutPetsNestedInput = {
    create?: XOR<VacinaCreateWithoutPetsInput, VacinaUncheckedCreateWithoutPetsInput> | VacinaCreateWithoutPetsInput[] | VacinaUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: VacinaCreateOrConnectWithoutPetsInput | VacinaCreateOrConnectWithoutPetsInput[]
    upsert?: VacinaUpsertWithWhereUniqueWithoutPetsInput | VacinaUpsertWithWhereUniqueWithoutPetsInput[]
    createMany?: VacinaCreateManyPetsInputEnvelope
    set?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    disconnect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    delete?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    connect?: VacinaWhereUniqueInput | VacinaWhereUniqueInput[]
    update?: VacinaUpdateWithWhereUniqueWithoutPetsInput | VacinaUpdateWithWhereUniqueWithoutPetsInput[]
    updateMany?: VacinaUpdateManyWithWhereWithoutPetsInput | VacinaUpdateManyWithWhereWithoutPetsInput[]
    deleteMany?: VacinaScalarWhereInput | VacinaScalarWhereInput[]
  }

  export type ExameUncheckedUpdateManyWithoutPetNestedInput = {
    create?: XOR<ExameCreateWithoutPetInput, ExameUncheckedCreateWithoutPetInput> | ExameCreateWithoutPetInput[] | ExameUncheckedCreateWithoutPetInput[]
    connectOrCreate?: ExameCreateOrConnectWithoutPetInput | ExameCreateOrConnectWithoutPetInput[]
    upsert?: ExameUpsertWithWhereUniqueWithoutPetInput | ExameUpsertWithWhereUniqueWithoutPetInput[]
    createMany?: ExameCreateManyPetInputEnvelope
    set?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
    disconnect?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
    delete?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
    connect?: ExameWhereUniqueInput | ExameWhereUniqueInput[]
    update?: ExameUpdateWithWhereUniqueWithoutPetInput | ExameUpdateWithWhereUniqueWithoutPetInput[]
    updateMany?: ExameUpdateManyWithWhereWithoutPetInput | ExameUpdateManyWithWhereWithoutPetInput[]
    deleteMany?: ExameScalarWhereInput | ExameScalarWhereInput[]
  }

  export type PublicacoesUncheckedUpdateManyWithoutPetNestedInput = {
    create?: XOR<PublicacoesCreateWithoutPetInput, PublicacoesUncheckedCreateWithoutPetInput> | PublicacoesCreateWithoutPetInput[] | PublicacoesUncheckedCreateWithoutPetInput[]
    connectOrCreate?: PublicacoesCreateOrConnectWithoutPetInput | PublicacoesCreateOrConnectWithoutPetInput[]
    upsert?: PublicacoesUpsertWithWhereUniqueWithoutPetInput | PublicacoesUpsertWithWhereUniqueWithoutPetInput[]
    createMany?: PublicacoesCreateManyPetInputEnvelope
    set?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
    disconnect?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
    delete?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
    connect?: PublicacoesWhereUniqueInput | PublicacoesWhereUniqueInput[]
    update?: PublicacoesUpdateWithWhereUniqueWithoutPetInput | PublicacoesUpdateWithWhereUniqueWithoutPetInput[]
    updateMany?: PublicacoesUpdateManyWithWhereWithoutPetInput | PublicacoesUpdateManyWithWhereWithoutPetInput[]
    deleteMany?: PublicacoesScalarWhereInput | PublicacoesScalarWhereInput[]
  }

  export type AgendamentosUncheckedUpdateManyWithoutPetsNestedInput = {
    create?: XOR<AgendamentosCreateWithoutPetsInput, AgendamentosUncheckedCreateWithoutPetsInput> | AgendamentosCreateWithoutPetsInput[] | AgendamentosUncheckedCreateWithoutPetsInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutPetsInput | AgendamentosCreateOrConnectWithoutPetsInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutPetsInput | AgendamentosUpsertWithWhereUniqueWithoutPetsInput[]
    createMany?: AgendamentosCreateManyPetsInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutPetsInput | AgendamentosUpdateWithWhereUniqueWithoutPetsInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutPetsInput | AgendamentosUpdateManyWithWhereWithoutPetsInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type PetCreateNestedOneWithoutVacinasInput = {
    create?: XOR<PetCreateWithoutVacinasInput, PetUncheckedCreateWithoutVacinasInput>
    connectOrCreate?: PetCreateOrConnectWithoutVacinasInput
    connect?: PetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVacinasInput = {
    create?: XOR<UserCreateWithoutVacinasInput, UserUncheckedCreateWithoutVacinasInput>
    connectOrCreate?: UserCreateOrConnectWithoutVacinasInput
    connect?: UserWhereUniqueInput
  }

  export type PetUpdateOneRequiredWithoutVacinasNestedInput = {
    create?: XOR<PetCreateWithoutVacinasInput, PetUncheckedCreateWithoutVacinasInput>
    connectOrCreate?: PetCreateOrConnectWithoutVacinasInput
    upsert?: PetUpsertWithoutVacinasInput
    connect?: PetWhereUniqueInput
    update?: XOR<XOR<PetUpdateToOneWithWhereWithoutVacinasInput, PetUpdateWithoutVacinasInput>, PetUncheckedUpdateWithoutVacinasInput>
  }

  export type UserUpdateOneRequiredWithoutVacinasNestedInput = {
    create?: XOR<UserCreateWithoutVacinasInput, UserUncheckedCreateWithoutVacinasInput>
    connectOrCreate?: UserCreateOrConnectWithoutVacinasInput
    upsert?: UserUpsertWithoutVacinasInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVacinasInput, UserUpdateWithoutVacinasInput>, UserUncheckedUpdateWithoutVacinasInput>
  }

  export type PetCreateNestedOneWithoutExamesInput = {
    create?: XOR<PetCreateWithoutExamesInput, PetUncheckedCreateWithoutExamesInput>
    connectOrCreate?: PetCreateOrConnectWithoutExamesInput
    connect?: PetWhereUniqueInput
  }

  export type PetUpdateOneRequiredWithoutExamesNestedInput = {
    create?: XOR<PetCreateWithoutExamesInput, PetUncheckedCreateWithoutExamesInput>
    connectOrCreate?: PetCreateOrConnectWithoutExamesInput
    upsert?: PetUpsertWithoutExamesInput
    connect?: PetWhereUniqueInput
    update?: XOR<XOR<PetUpdateToOneWithWhereWithoutExamesInput, PetUpdateWithoutExamesInput>, PetUncheckedUpdateWithoutExamesInput>
  }

  export type PetCreateNestedOneWithoutPublicacosInput = {
    create?: XOR<PetCreateWithoutPublicacosInput, PetUncheckedCreateWithoutPublicacosInput>
    connectOrCreate?: PetCreateOrConnectWithoutPublicacosInput
    connect?: PetWhereUniqueInput
  }

  export type PetUpdateOneRequiredWithoutPublicacosNestedInput = {
    create?: XOR<PetCreateWithoutPublicacosInput, PetUncheckedCreateWithoutPublicacosInput>
    connectOrCreate?: PetCreateOrConnectWithoutPublicacosInput
    upsert?: PetUpsertWithoutPublicacosInput
    connect?: PetWhereUniqueInput
    update?: XOR<XOR<PetUpdateToOneWithWhereWithoutPublicacosInput, PetUpdateWithoutPublicacosInput>, PetUncheckedUpdateWithoutPublicacosInput>
  }

  export type PetCreateNestedOneWithoutAgendamentosInput = {
    create?: XOR<PetCreateWithoutAgendamentosInput, PetUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: PetCreateOrConnectWithoutAgendamentosInput
    connect?: PetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUser_idInput = {
    create?: XOR<UserCreateWithoutUser_idInput, UserUncheckedCreateWithoutUser_idInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_idInput
    connect?: UserWhereUniqueInput
  }

  export type HorariosCreateNestedOneWithoutAgendamentosInput = {
    create?: XOR<HorariosCreateWithoutAgendamentosInput, HorariosUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: HorariosCreateOrConnectWithoutAgendamentosInput
    connect?: HorariosWhereUniqueInput
  }

  export type EmpresaCreateNestedOneWithoutAgendamentosInput = {
    create?: XOR<EmpresaCreateWithoutAgendamentosInput, EmpresaUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutAgendamentosInput
    connect?: EmpresaWhereUniqueInput
  }

  export type ServicosCreateNestedOneWithoutAgendamentosInput = {
    create?: XOR<ServicosCreateWithoutAgendamentosInput, ServicosUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: ServicosCreateOrConnectWithoutAgendamentosInput
    connect?: ServicosWhereUniqueInput
  }

  export type PetUpdateOneRequiredWithoutAgendamentosNestedInput = {
    create?: XOR<PetCreateWithoutAgendamentosInput, PetUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: PetCreateOrConnectWithoutAgendamentosInput
    upsert?: PetUpsertWithoutAgendamentosInput
    connect?: PetWhereUniqueInput
    update?: XOR<XOR<PetUpdateToOneWithWhereWithoutAgendamentosInput, PetUpdateWithoutAgendamentosInput>, PetUncheckedUpdateWithoutAgendamentosInput>
  }

  export type UserUpdateOneRequiredWithoutUser_idNestedInput = {
    create?: XOR<UserCreateWithoutUser_idInput, UserUncheckedCreateWithoutUser_idInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_idInput
    upsert?: UserUpsertWithoutUser_idInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUser_idInput, UserUpdateWithoutUser_idInput>, UserUncheckedUpdateWithoutUser_idInput>
  }

  export type HorariosUpdateOneRequiredWithoutAgendamentosNestedInput = {
    create?: XOR<HorariosCreateWithoutAgendamentosInput, HorariosUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: HorariosCreateOrConnectWithoutAgendamentosInput
    upsert?: HorariosUpsertWithoutAgendamentosInput
    connect?: HorariosWhereUniqueInput
    update?: XOR<XOR<HorariosUpdateToOneWithWhereWithoutAgendamentosInput, HorariosUpdateWithoutAgendamentosInput>, HorariosUncheckedUpdateWithoutAgendamentosInput>
  }

  export type EmpresaUpdateOneRequiredWithoutAgendamentosNestedInput = {
    create?: XOR<EmpresaCreateWithoutAgendamentosInput, EmpresaUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutAgendamentosInput
    upsert?: EmpresaUpsertWithoutAgendamentosInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutAgendamentosInput, EmpresaUpdateWithoutAgendamentosInput>, EmpresaUncheckedUpdateWithoutAgendamentosInput>
  }

  export type ServicosUpdateOneRequiredWithoutAgendamentosNestedInput = {
    create?: XOR<ServicosCreateWithoutAgendamentosInput, ServicosUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: ServicosCreateOrConnectWithoutAgendamentosInput
    upsert?: ServicosUpsertWithoutAgendamentosInput
    connect?: ServicosWhereUniqueInput
    update?: XOR<XOR<ServicosUpdateToOneWithWhereWithoutAgendamentosInput, ServicosUpdateWithoutAgendamentosInput>, ServicosUncheckedUpdateWithoutAgendamentosInput>
  }

  export type AgendamentosCreateNestedManyWithoutServicosInput = {
    create?: XOR<AgendamentosCreateWithoutServicosInput, AgendamentosUncheckedCreateWithoutServicosInput> | AgendamentosCreateWithoutServicosInput[] | AgendamentosUncheckedCreateWithoutServicosInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutServicosInput | AgendamentosCreateOrConnectWithoutServicosInput[]
    createMany?: AgendamentosCreateManyServicosInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type AgendamentosUncheckedCreateNestedManyWithoutServicosInput = {
    create?: XOR<AgendamentosCreateWithoutServicosInput, AgendamentosUncheckedCreateWithoutServicosInput> | AgendamentosCreateWithoutServicosInput[] | AgendamentosUncheckedCreateWithoutServicosInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutServicosInput | AgendamentosCreateOrConnectWithoutServicosInput[]
    createMany?: AgendamentosCreateManyServicosInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type AgendamentosUpdateManyWithoutServicosNestedInput = {
    create?: XOR<AgendamentosCreateWithoutServicosInput, AgendamentosUncheckedCreateWithoutServicosInput> | AgendamentosCreateWithoutServicosInput[] | AgendamentosUncheckedCreateWithoutServicosInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutServicosInput | AgendamentosCreateOrConnectWithoutServicosInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutServicosInput | AgendamentosUpsertWithWhereUniqueWithoutServicosInput[]
    createMany?: AgendamentosCreateManyServicosInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutServicosInput | AgendamentosUpdateWithWhereUniqueWithoutServicosInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutServicosInput | AgendamentosUpdateManyWithWhereWithoutServicosInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type AgendamentosUncheckedUpdateManyWithoutServicosNestedInput = {
    create?: XOR<AgendamentosCreateWithoutServicosInput, AgendamentosUncheckedCreateWithoutServicosInput> | AgendamentosCreateWithoutServicosInput[] | AgendamentosUncheckedCreateWithoutServicosInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutServicosInput | AgendamentosCreateOrConnectWithoutServicosInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutServicosInput | AgendamentosUpsertWithWhereUniqueWithoutServicosInput[]
    createMany?: AgendamentosCreateManyServicosInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutServicosInput | AgendamentosUpdateWithWhereUniqueWithoutServicosInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutServicosInput | AgendamentosUpdateManyWithWhereWithoutServicosInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type AgendamentosCreateNestedManyWithoutHorariosInput = {
    create?: XOR<AgendamentosCreateWithoutHorariosInput, AgendamentosUncheckedCreateWithoutHorariosInput> | AgendamentosCreateWithoutHorariosInput[] | AgendamentosUncheckedCreateWithoutHorariosInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutHorariosInput | AgendamentosCreateOrConnectWithoutHorariosInput[]
    createMany?: AgendamentosCreateManyHorariosInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type AgendamentosUncheckedCreateNestedManyWithoutHorariosInput = {
    create?: XOR<AgendamentosCreateWithoutHorariosInput, AgendamentosUncheckedCreateWithoutHorariosInput> | AgendamentosCreateWithoutHorariosInput[] | AgendamentosUncheckedCreateWithoutHorariosInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutHorariosInput | AgendamentosCreateOrConnectWithoutHorariosInput[]
    createMany?: AgendamentosCreateManyHorariosInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type AgendamentosUpdateManyWithoutHorariosNestedInput = {
    create?: XOR<AgendamentosCreateWithoutHorariosInput, AgendamentosUncheckedCreateWithoutHorariosInput> | AgendamentosCreateWithoutHorariosInput[] | AgendamentosUncheckedCreateWithoutHorariosInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutHorariosInput | AgendamentosCreateOrConnectWithoutHorariosInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutHorariosInput | AgendamentosUpsertWithWhereUniqueWithoutHorariosInput[]
    createMany?: AgendamentosCreateManyHorariosInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutHorariosInput | AgendamentosUpdateWithWhereUniqueWithoutHorariosInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutHorariosInput | AgendamentosUpdateManyWithWhereWithoutHorariosInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type AgendamentosUncheckedUpdateManyWithoutHorariosNestedInput = {
    create?: XOR<AgendamentosCreateWithoutHorariosInput, AgendamentosUncheckedCreateWithoutHorariosInput> | AgendamentosCreateWithoutHorariosInput[] | AgendamentosUncheckedCreateWithoutHorariosInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutHorariosInput | AgendamentosCreateOrConnectWithoutHorariosInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutHorariosInput | AgendamentosUpsertWithWhereUniqueWithoutHorariosInput[]
    createMany?: AgendamentosCreateManyHorariosInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutHorariosInput | AgendamentosUpdateWithWhereUniqueWithoutHorariosInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutHorariosInput | AgendamentosUpdateManyWithWhereWithoutHorariosInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type AgendamentosCreateNestedManyWithoutEmpresasInput = {
    create?: XOR<AgendamentosCreateWithoutEmpresasInput, AgendamentosUncheckedCreateWithoutEmpresasInput> | AgendamentosCreateWithoutEmpresasInput[] | AgendamentosUncheckedCreateWithoutEmpresasInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutEmpresasInput | AgendamentosCreateOrConnectWithoutEmpresasInput[]
    createMany?: AgendamentosCreateManyEmpresasInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type AgendamentosUncheckedCreateNestedManyWithoutEmpresasInput = {
    create?: XOR<AgendamentosCreateWithoutEmpresasInput, AgendamentosUncheckedCreateWithoutEmpresasInput> | AgendamentosCreateWithoutEmpresasInput[] | AgendamentosUncheckedCreateWithoutEmpresasInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutEmpresasInput | AgendamentosCreateOrConnectWithoutEmpresasInput[]
    createMany?: AgendamentosCreateManyEmpresasInputEnvelope
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
  }

  export type AgendamentosUpdateManyWithoutEmpresasNestedInput = {
    create?: XOR<AgendamentosCreateWithoutEmpresasInput, AgendamentosUncheckedCreateWithoutEmpresasInput> | AgendamentosCreateWithoutEmpresasInput[] | AgendamentosUncheckedCreateWithoutEmpresasInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutEmpresasInput | AgendamentosCreateOrConnectWithoutEmpresasInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutEmpresasInput | AgendamentosUpsertWithWhereUniqueWithoutEmpresasInput[]
    createMany?: AgendamentosCreateManyEmpresasInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutEmpresasInput | AgendamentosUpdateWithWhereUniqueWithoutEmpresasInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutEmpresasInput | AgendamentosUpdateManyWithWhereWithoutEmpresasInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type AgendamentosUncheckedUpdateManyWithoutEmpresasNestedInput = {
    create?: XOR<AgendamentosCreateWithoutEmpresasInput, AgendamentosUncheckedCreateWithoutEmpresasInput> | AgendamentosCreateWithoutEmpresasInput[] | AgendamentosUncheckedCreateWithoutEmpresasInput[]
    connectOrCreate?: AgendamentosCreateOrConnectWithoutEmpresasInput | AgendamentosCreateOrConnectWithoutEmpresasInput[]
    upsert?: AgendamentosUpsertWithWhereUniqueWithoutEmpresasInput | AgendamentosUpsertWithWhereUniqueWithoutEmpresasInput[]
    createMany?: AgendamentosCreateManyEmpresasInputEnvelope
    set?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    disconnect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    delete?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    connect?: AgendamentosWhereUniqueInput | AgendamentosWhereUniqueInput[]
    update?: AgendamentosUpdateWithWhereUniqueWithoutEmpresasInput | AgendamentosUpdateWithWhereUniqueWithoutEmpresasInput[]
    updateMany?: AgendamentosUpdateManyWithWhereWithoutEmpresasInput | AgendamentosUpdateManyWithWhereWithoutEmpresasInput[]
    deleteMany?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutExpo_tokenInput = {
    create?: XOR<UserCreateWithoutExpo_tokenInput, UserUncheckedCreateWithoutExpo_tokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutExpo_tokenInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutExpo_tokenNestedInput = {
    create?: XOR<UserCreateWithoutExpo_tokenInput, UserUncheckedCreateWithoutExpo_tokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutExpo_tokenInput
    upsert?: UserUpsertWithoutExpo_tokenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExpo_tokenInput, UserUpdateWithoutExpo_tokenInput>, UserUncheckedUpdateWithoutExpo_tokenInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PetCreateWithoutUserInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    img_perfil: string
    vacinas?: VacinaCreateNestedManyWithoutPetsInput
    exames?: ExameCreateNestedManyWithoutPetInput
    publicacos?: PublicacoesCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosCreateNestedManyWithoutPetsInput
  }

  export type PetUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    img_perfil: string
    vacinas?: VacinaUncheckedCreateNestedManyWithoutPetsInput
    exames?: ExameUncheckedCreateNestedManyWithoutPetInput
    publicacos?: PublicacoesUncheckedCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosUncheckedCreateNestedManyWithoutPetsInput
  }

  export type PetCreateOrConnectWithoutUserInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput>
  }

  export type PetCreateManyUserInputEnvelope = {
    data: PetCreateManyUserInput | PetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ExpoTokenCreateWithoutUserInput = {
    id?: string
    token: string
    created_at?: Date | string | null
  }

  export type ExpoTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    created_at?: Date | string | null
  }

  export type ExpoTokenCreateOrConnectWithoutUserInput = {
    where: ExpoTokenWhereUniqueInput
    create: XOR<ExpoTokenCreateWithoutUserInput, ExpoTokenUncheckedCreateWithoutUserInput>
  }

  export type ExpoTokenCreateManyUserInputEnvelope = {
    data: ExpoTokenCreateManyUserInput | ExpoTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AgendamentosCreateWithoutUsersInput = {
    id?: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
    pets: PetCreateNestedOneWithoutAgendamentosInput
    horarios: HorariosCreateNestedOneWithoutAgendamentosInput
    empresas: EmpresaCreateNestedOneWithoutAgendamentosInput
    servicos: ServicosCreateNestedOneWithoutAgendamentosInput
  }

  export type AgendamentosUncheckedCreateWithoutUsersInput = {
    id?: string
    pet_id: string
    id_horario: string
    id_empresa: string
    id_servico: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosCreateOrConnectWithoutUsersInput = {
    where: AgendamentosWhereUniqueInput
    create: XOR<AgendamentosCreateWithoutUsersInput, AgendamentosUncheckedCreateWithoutUsersInput>
  }

  export type AgendamentosCreateManyUsersInputEnvelope = {
    data: AgendamentosCreateManyUsersInput | AgendamentosCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type VacinaCreateWithoutUserInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
    pets: PetCreateNestedOneWithoutVacinasInput
  }

  export type VacinaUncheckedCreateWithoutUserInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    pet_id: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
  }

  export type VacinaCreateOrConnectWithoutUserInput = {
    where: VacinaWhereUniqueInput
    create: XOR<VacinaCreateWithoutUserInput, VacinaUncheckedCreateWithoutUserInput>
  }

  export type VacinaCreateManyUserInputEnvelope = {
    data: VacinaCreateManyUserInput | VacinaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PetUpsertWithWhereUniqueWithoutUserInput = {
    where: PetWhereUniqueInput
    update: XOR<PetUpdateWithoutUserInput, PetUncheckedUpdateWithoutUserInput>
    create: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput>
  }

  export type PetUpdateWithWhereUniqueWithoutUserInput = {
    where: PetWhereUniqueInput
    data: XOR<PetUpdateWithoutUserInput, PetUncheckedUpdateWithoutUserInput>
  }

  export type PetUpdateManyWithWhereWithoutUserInput = {
    where: PetScalarWhereInput
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyWithoutUserInput>
  }

  export type PetScalarWhereInput = {
    AND?: PetScalarWhereInput | PetScalarWhereInput[]
    OR?: PetScalarWhereInput[]
    NOT?: PetScalarWhereInput | PetScalarWhereInput[]
    id?: StringFilter<"Pet"> | string
    name?: StringFilter<"Pet"> | string
    apelido?: StringFilter<"Pet"> | string
    data_nascimento?: DateTimeNullableFilter<"Pet"> | Date | string | null
    especie?: StringFilter<"Pet"> | string
    idade?: StringFilter<"Pet"> | string
    meses?: StringFilter<"Pet"> | string
    raca?: StringFilter<"Pet"> | string
    chip?: StringFilter<"Pet"> | string
    sexo?: StringFilter<"Pet"> | string
    temperamento?: StringFilter<"Pet"> | string
    tamanho?: StringFilter<"Pet"> | string
    detalhes?: StringNullableFilter<"Pet"> | string | null
    user_id?: StringFilter<"Pet"> | string
    img_perfil?: StringFilter<"Pet"> | string
  }

  export type ExpoTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: ExpoTokenWhereUniqueInput
    update: XOR<ExpoTokenUpdateWithoutUserInput, ExpoTokenUncheckedUpdateWithoutUserInput>
    create: XOR<ExpoTokenCreateWithoutUserInput, ExpoTokenUncheckedCreateWithoutUserInput>
  }

  export type ExpoTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: ExpoTokenWhereUniqueInput
    data: XOR<ExpoTokenUpdateWithoutUserInput, ExpoTokenUncheckedUpdateWithoutUserInput>
  }

  export type ExpoTokenUpdateManyWithWhereWithoutUserInput = {
    where: ExpoTokenScalarWhereInput
    data: XOR<ExpoTokenUpdateManyMutationInput, ExpoTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type ExpoTokenScalarWhereInput = {
    AND?: ExpoTokenScalarWhereInput | ExpoTokenScalarWhereInput[]
    OR?: ExpoTokenScalarWhereInput[]
    NOT?: ExpoTokenScalarWhereInput | ExpoTokenScalarWhereInput[]
    id?: StringFilter<"ExpoToken"> | string
    user_id?: StringFilter<"ExpoToken"> | string
    token?: StringFilter<"ExpoToken"> | string
    created_at?: DateTimeNullableFilter<"ExpoToken"> | Date | string | null
  }

  export type AgendamentosUpsertWithWhereUniqueWithoutUsersInput = {
    where: AgendamentosWhereUniqueInput
    update: XOR<AgendamentosUpdateWithoutUsersInput, AgendamentosUncheckedUpdateWithoutUsersInput>
    create: XOR<AgendamentosCreateWithoutUsersInput, AgendamentosUncheckedCreateWithoutUsersInput>
  }

  export type AgendamentosUpdateWithWhereUniqueWithoutUsersInput = {
    where: AgendamentosWhereUniqueInput
    data: XOR<AgendamentosUpdateWithoutUsersInput, AgendamentosUncheckedUpdateWithoutUsersInput>
  }

  export type AgendamentosUpdateManyWithWhereWithoutUsersInput = {
    where: AgendamentosScalarWhereInput
    data: XOR<AgendamentosUpdateManyMutationInput, AgendamentosUncheckedUpdateManyWithoutUsersInput>
  }

  export type AgendamentosScalarWhereInput = {
    AND?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
    OR?: AgendamentosScalarWhereInput[]
    NOT?: AgendamentosScalarWhereInput | AgendamentosScalarWhereInput[]
    id?: StringFilter<"Agendamentos"> | string
    pet_id?: StringFilter<"Agendamentos"> | string
    id_horario?: StringFilter<"Agendamentos"> | string
    id_empresa?: StringFilter<"Agendamentos"> | string
    id_servico?: StringFilter<"Agendamentos"> | string
    user_id?: StringFilter<"Agendamentos"> | string
    data_agendamento?: StringFilter<"Agendamentos"> | string
    horario_agendamento?: StringFilter<"Agendamentos"> | string
    status?: IntFilter<"Agendamentos"> | number
    notificacoes_enviadas?: StringFilter<"Agendamentos"> | string
  }

  export type VacinaUpsertWithWhereUniqueWithoutUserInput = {
    where: VacinaWhereUniqueInput
    update: XOR<VacinaUpdateWithoutUserInput, VacinaUncheckedUpdateWithoutUserInput>
    create: XOR<VacinaCreateWithoutUserInput, VacinaUncheckedCreateWithoutUserInput>
  }

  export type VacinaUpdateWithWhereUniqueWithoutUserInput = {
    where: VacinaWhereUniqueInput
    data: XOR<VacinaUpdateWithoutUserInput, VacinaUncheckedUpdateWithoutUserInput>
  }

  export type VacinaUpdateManyWithWhereWithoutUserInput = {
    where: VacinaScalarWhereInput
    data: XOR<VacinaUpdateManyMutationInput, VacinaUncheckedUpdateManyWithoutUserInput>
  }

  export type VacinaScalarWhereInput = {
    AND?: VacinaScalarWhereInput | VacinaScalarWhereInput[]
    OR?: VacinaScalarWhereInput[]
    NOT?: VacinaScalarWhereInput | VacinaScalarWhereInput[]
    id?: StringFilter<"Vacina"> | string
    data_vacinacao?: StringFilter<"Vacina"> | string
    vacina?: StringFilter<"Vacina"> | string
    clinica?: StringFilter<"Vacina"> | string
    intervalo?: StringFilter<"Vacina"> | string
    observacao?: StringFilter<"Vacina"> | string
    pet_id?: StringFilter<"Vacina"> | string
    user_id?: StringFilter<"Vacina"> | string
    img_lote?: StringFilter<"Vacina"> | string
    proxima_aplicacao?: StringNullableFilter<"Vacina"> | string | null
    notificacoes_enviadas?: StringFilter<"Vacina"> | string
  }

  export type ProductCreateWithoutCategoryInput = {
    id?: string
    name: string
    price: string
    description: string
    banner: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    items?: ItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    price: string
    description: string
    banner: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    items?: ItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    price?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    banner?: StringFilter<"Product"> | string
    created_at?: DateTimeNullableFilter<"Product"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Product"> | Date | string | null
    category_id?: StringFilter<"Product"> | string
  }

  export type ItemCreateWithoutProductInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order: OrderCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateWithoutProductInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id: string
  }

  export type ItemCreateOrConnectWithoutProductInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutProductInput, ItemUncheckedCreateWithoutProductInput>
  }

  export type ItemCreateManyProductInputEnvelope = {
    data: ItemCreateManyProductInput | ItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutProductsInput = {
    id?: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type ItemUpsertWithWhereUniqueWithoutProductInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutProductInput, ItemUncheckedUpdateWithoutProductInput>
    create: XOR<ItemCreateWithoutProductInput, ItemUncheckedCreateWithoutProductInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutProductInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutProductInput, ItemUncheckedUpdateWithoutProductInput>
  }

  export type ItemUpdateManyWithWhereWithoutProductInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutProductInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: StringFilter<"Item"> | string
    amount?: IntFilter<"Item"> | number
    created_at?: DateTimeNullableFilter<"Item"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Item"> | Date | string | null
    order_id?: StringFilter<"Item"> | string
    product_id?: StringFilter<"Item"> | string
  }

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ItemCreateWithoutOrderInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    product: ProductCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateWithoutOrderInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    product_id: string
  }

  export type ItemCreateOrConnectWithoutOrderInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutOrderInput, ItemUncheckedCreateWithoutOrderInput>
  }

  export type ItemCreateManyOrderInputEnvelope = {
    data: ItemCreateManyOrderInput | ItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type ItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutOrderInput, ItemUncheckedUpdateWithoutOrderInput>
    create: XOR<ItemCreateWithoutOrderInput, ItemUncheckedCreateWithoutOrderInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutOrderInput, ItemUncheckedUpdateWithoutOrderInput>
  }

  export type ItemUpdateManyWithWhereWithoutOrderInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutItemsInput = {
    id?: string
    table: number
    status?: boolean
    draft?: boolean
    name?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type OrderUncheckedCreateWithoutItemsInput = {
    id?: string
    table: number
    status?: boolean
    draft?: boolean
    name?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type OrderCreateOrConnectWithoutItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
  }

  export type ProductCreateWithoutItemsInput = {
    id?: string
    name: string
    price: string
    description: string
    banner: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    category: CategoryCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutItemsInput = {
    id?: string
    name: string
    price: string
    description: string
    banner: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    category_id: string
  }

  export type ProductCreateOrConnectWithoutItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutItemsInput, ProductUncheckedCreateWithoutItemsInput>
  }

  export type OrderUpsertWithoutItemsInput = {
    update: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type OrderUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    table?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    draft?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    table?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    draft?: BoolFieldUpdateOperationsInput | boolean
    name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductUpsertWithoutItemsInput = {
    update: XOR<ProductUpdateWithoutItemsInput, ProductUncheckedUpdateWithoutItemsInput>
    create: XOR<ProductCreateWithoutItemsInput, ProductUncheckedCreateWithoutItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutItemsInput, ProductUncheckedUpdateWithoutItemsInput>
  }

  export type ProductUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutPetsInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    expo_token?: ExpoTokenCreateNestedManyWithoutUserInput
    user_id?: AgendamentosCreateNestedManyWithoutUsersInput
    vacinas?: VacinaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPetsInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    expo_token?: ExpoTokenUncheckedCreateNestedManyWithoutUserInput
    user_id?: AgendamentosUncheckedCreateNestedManyWithoutUsersInput
    vacinas?: VacinaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPetsInput, UserUncheckedCreateWithoutPetsInput>
  }

  export type VacinaCreateWithoutPetsInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
    user: UserCreateNestedOneWithoutVacinasInput
  }

  export type VacinaUncheckedCreateWithoutPetsInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    user_id: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
  }

  export type VacinaCreateOrConnectWithoutPetsInput = {
    where: VacinaWhereUniqueInput
    create: XOR<VacinaCreateWithoutPetsInput, VacinaUncheckedCreateWithoutPetsInput>
  }

  export type VacinaCreateManyPetsInputEnvelope = {
    data: VacinaCreateManyPetsInput | VacinaCreateManyPetsInput[]
    skipDuplicates?: boolean
  }

  export type ExameCreateWithoutPetInput = {
    id?: string
    data_exame: string
    exame: string
    clinica: string
    observacao: string
    img_laudo: string
  }

  export type ExameUncheckedCreateWithoutPetInput = {
    id?: string
    data_exame: string
    exame: string
    clinica: string
    observacao: string
    img_laudo: string
  }

  export type ExameCreateOrConnectWithoutPetInput = {
    where: ExameWhereUniqueInput
    create: XOR<ExameCreateWithoutPetInput, ExameUncheckedCreateWithoutPetInput>
  }

  export type ExameCreateManyPetInputEnvelope = {
    data: ExameCreateManyPetInput | ExameCreateManyPetInput[]
    skipDuplicates?: boolean
  }

  export type PublicacoesCreateWithoutPetInput = {
    id?: string
    conteudo: string
    img_blog: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type PublicacoesUncheckedCreateWithoutPetInput = {
    id?: string
    conteudo: string
    img_blog: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type PublicacoesCreateOrConnectWithoutPetInput = {
    where: PublicacoesWhereUniqueInput
    create: XOR<PublicacoesCreateWithoutPetInput, PublicacoesUncheckedCreateWithoutPetInput>
  }

  export type PublicacoesCreateManyPetInputEnvelope = {
    data: PublicacoesCreateManyPetInput | PublicacoesCreateManyPetInput[]
    skipDuplicates?: boolean
  }

  export type AgendamentosCreateWithoutPetsInput = {
    id?: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
    users: UserCreateNestedOneWithoutUser_idInput
    horarios: HorariosCreateNestedOneWithoutAgendamentosInput
    empresas: EmpresaCreateNestedOneWithoutAgendamentosInput
    servicos: ServicosCreateNestedOneWithoutAgendamentosInput
  }

  export type AgendamentosUncheckedCreateWithoutPetsInput = {
    id?: string
    id_horario: string
    id_empresa: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosCreateOrConnectWithoutPetsInput = {
    where: AgendamentosWhereUniqueInput
    create: XOR<AgendamentosCreateWithoutPetsInput, AgendamentosUncheckedCreateWithoutPetsInput>
  }

  export type AgendamentosCreateManyPetsInputEnvelope = {
    data: AgendamentosCreateManyPetsInput | AgendamentosCreateManyPetsInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPetsInput = {
    update: XOR<UserUpdateWithoutPetsInput, UserUncheckedUpdateWithoutPetsInput>
    create: XOR<UserCreateWithoutPetsInput, UserUncheckedCreateWithoutPetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPetsInput, UserUncheckedUpdateWithoutPetsInput>
  }

  export type UserUpdateWithoutPetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    expo_token?: ExpoTokenUpdateManyWithoutUserNestedInput
    user_id?: AgendamentosUpdateManyWithoutUsersNestedInput
    vacinas?: VacinaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    expo_token?: ExpoTokenUncheckedUpdateManyWithoutUserNestedInput
    user_id?: AgendamentosUncheckedUpdateManyWithoutUsersNestedInput
    vacinas?: VacinaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VacinaUpsertWithWhereUniqueWithoutPetsInput = {
    where: VacinaWhereUniqueInput
    update: XOR<VacinaUpdateWithoutPetsInput, VacinaUncheckedUpdateWithoutPetsInput>
    create: XOR<VacinaCreateWithoutPetsInput, VacinaUncheckedCreateWithoutPetsInput>
  }

  export type VacinaUpdateWithWhereUniqueWithoutPetsInput = {
    where: VacinaWhereUniqueInput
    data: XOR<VacinaUpdateWithoutPetsInput, VacinaUncheckedUpdateWithoutPetsInput>
  }

  export type VacinaUpdateManyWithWhereWithoutPetsInput = {
    where: VacinaScalarWhereInput
    data: XOR<VacinaUpdateManyMutationInput, VacinaUncheckedUpdateManyWithoutPetsInput>
  }

  export type ExameUpsertWithWhereUniqueWithoutPetInput = {
    where: ExameWhereUniqueInput
    update: XOR<ExameUpdateWithoutPetInput, ExameUncheckedUpdateWithoutPetInput>
    create: XOR<ExameCreateWithoutPetInput, ExameUncheckedCreateWithoutPetInput>
  }

  export type ExameUpdateWithWhereUniqueWithoutPetInput = {
    where: ExameWhereUniqueInput
    data: XOR<ExameUpdateWithoutPetInput, ExameUncheckedUpdateWithoutPetInput>
  }

  export type ExameUpdateManyWithWhereWithoutPetInput = {
    where: ExameScalarWhereInput
    data: XOR<ExameUpdateManyMutationInput, ExameUncheckedUpdateManyWithoutPetInput>
  }

  export type ExameScalarWhereInput = {
    AND?: ExameScalarWhereInput | ExameScalarWhereInput[]
    OR?: ExameScalarWhereInput[]
    NOT?: ExameScalarWhereInput | ExameScalarWhereInput[]
    id?: StringFilter<"Exame"> | string
    data_exame?: StringFilter<"Exame"> | string
    exame?: StringFilter<"Exame"> | string
    clinica?: StringFilter<"Exame"> | string
    observacao?: StringFilter<"Exame"> | string
    pet_id?: StringFilter<"Exame"> | string
    img_laudo?: StringFilter<"Exame"> | string
  }

  export type PublicacoesUpsertWithWhereUniqueWithoutPetInput = {
    where: PublicacoesWhereUniqueInput
    update: XOR<PublicacoesUpdateWithoutPetInput, PublicacoesUncheckedUpdateWithoutPetInput>
    create: XOR<PublicacoesCreateWithoutPetInput, PublicacoesUncheckedCreateWithoutPetInput>
  }

  export type PublicacoesUpdateWithWhereUniqueWithoutPetInput = {
    where: PublicacoesWhereUniqueInput
    data: XOR<PublicacoesUpdateWithoutPetInput, PublicacoesUncheckedUpdateWithoutPetInput>
  }

  export type PublicacoesUpdateManyWithWhereWithoutPetInput = {
    where: PublicacoesScalarWhereInput
    data: XOR<PublicacoesUpdateManyMutationInput, PublicacoesUncheckedUpdateManyWithoutPetInput>
  }

  export type PublicacoesScalarWhereInput = {
    AND?: PublicacoesScalarWhereInput | PublicacoesScalarWhereInput[]
    OR?: PublicacoesScalarWhereInput[]
    NOT?: PublicacoesScalarWhereInput | PublicacoesScalarWhereInput[]
    id?: StringFilter<"Publicacoes"> | string
    pet_id?: StringFilter<"Publicacoes"> | string
    conteudo?: StringFilter<"Publicacoes"> | string
    img_blog?: StringFilter<"Publicacoes"> | string
    created_at?: DateTimeNullableFilter<"Publicacoes"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Publicacoes"> | Date | string | null
  }

  export type AgendamentosUpsertWithWhereUniqueWithoutPetsInput = {
    where: AgendamentosWhereUniqueInput
    update: XOR<AgendamentosUpdateWithoutPetsInput, AgendamentosUncheckedUpdateWithoutPetsInput>
    create: XOR<AgendamentosCreateWithoutPetsInput, AgendamentosUncheckedCreateWithoutPetsInput>
  }

  export type AgendamentosUpdateWithWhereUniqueWithoutPetsInput = {
    where: AgendamentosWhereUniqueInput
    data: XOR<AgendamentosUpdateWithoutPetsInput, AgendamentosUncheckedUpdateWithoutPetsInput>
  }

  export type AgendamentosUpdateManyWithWhereWithoutPetsInput = {
    where: AgendamentosScalarWhereInput
    data: XOR<AgendamentosUpdateManyMutationInput, AgendamentosUncheckedUpdateManyWithoutPetsInput>
  }

  export type PetCreateWithoutVacinasInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    img_perfil: string
    user: UserCreateNestedOneWithoutPetsInput
    exames?: ExameCreateNestedManyWithoutPetInput
    publicacos?: PublicacoesCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosCreateNestedManyWithoutPetsInput
  }

  export type PetUncheckedCreateWithoutVacinasInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    user_id: string
    img_perfil: string
    exames?: ExameUncheckedCreateNestedManyWithoutPetInput
    publicacos?: PublicacoesUncheckedCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosUncheckedCreateNestedManyWithoutPetsInput
  }

  export type PetCreateOrConnectWithoutVacinasInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutVacinasInput, PetUncheckedCreateWithoutVacinasInput>
  }

  export type UserCreateWithoutVacinasInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    pets?: PetCreateNestedManyWithoutUserInput
    expo_token?: ExpoTokenCreateNestedManyWithoutUserInput
    user_id?: AgendamentosCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutVacinasInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    pets?: PetUncheckedCreateNestedManyWithoutUserInput
    expo_token?: ExpoTokenUncheckedCreateNestedManyWithoutUserInput
    user_id?: AgendamentosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutVacinasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVacinasInput, UserUncheckedCreateWithoutVacinasInput>
  }

  export type PetUpsertWithoutVacinasInput = {
    update: XOR<PetUpdateWithoutVacinasInput, PetUncheckedUpdateWithoutVacinasInput>
    create: XOR<PetCreateWithoutVacinasInput, PetUncheckedCreateWithoutVacinasInput>
    where?: PetWhereInput
  }

  export type PetUpdateToOneWithWhereWithoutVacinasInput = {
    where?: PetWhereInput
    data: XOR<PetUpdateWithoutVacinasInput, PetUncheckedUpdateWithoutVacinasInput>
  }

  export type PetUpdateWithoutVacinasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPetsNestedInput
    exames?: ExameUpdateManyWithoutPetNestedInput
    publicacos?: PublicacoesUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUpdateManyWithoutPetsNestedInput
  }

  export type PetUncheckedUpdateWithoutVacinasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    img_perfil?: StringFieldUpdateOperationsInput | string
    exames?: ExameUncheckedUpdateManyWithoutPetNestedInput
    publicacos?: PublicacoesUncheckedUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUncheckedUpdateManyWithoutPetsNestedInput
  }

  export type UserUpsertWithoutVacinasInput = {
    update: XOR<UserUpdateWithoutVacinasInput, UserUncheckedUpdateWithoutVacinasInput>
    create: XOR<UserCreateWithoutVacinasInput, UserUncheckedCreateWithoutVacinasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVacinasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVacinasInput, UserUncheckedUpdateWithoutVacinasInput>
  }

  export type UserUpdateWithoutVacinasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    pets?: PetUpdateManyWithoutUserNestedInput
    expo_token?: ExpoTokenUpdateManyWithoutUserNestedInput
    user_id?: AgendamentosUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutVacinasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    pets?: PetUncheckedUpdateManyWithoutUserNestedInput
    expo_token?: ExpoTokenUncheckedUpdateManyWithoutUserNestedInput
    user_id?: AgendamentosUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type PetCreateWithoutExamesInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    img_perfil: string
    user: UserCreateNestedOneWithoutPetsInput
    vacinas?: VacinaCreateNestedManyWithoutPetsInput
    publicacos?: PublicacoesCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosCreateNestedManyWithoutPetsInput
  }

  export type PetUncheckedCreateWithoutExamesInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    user_id: string
    img_perfil: string
    vacinas?: VacinaUncheckedCreateNestedManyWithoutPetsInput
    publicacos?: PublicacoesUncheckedCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosUncheckedCreateNestedManyWithoutPetsInput
  }

  export type PetCreateOrConnectWithoutExamesInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutExamesInput, PetUncheckedCreateWithoutExamesInput>
  }

  export type PetUpsertWithoutExamesInput = {
    update: XOR<PetUpdateWithoutExamesInput, PetUncheckedUpdateWithoutExamesInput>
    create: XOR<PetCreateWithoutExamesInput, PetUncheckedCreateWithoutExamesInput>
    where?: PetWhereInput
  }

  export type PetUpdateToOneWithWhereWithoutExamesInput = {
    where?: PetWhereInput
    data: XOR<PetUpdateWithoutExamesInput, PetUncheckedUpdateWithoutExamesInput>
  }

  export type PetUpdateWithoutExamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPetsNestedInput
    vacinas?: VacinaUpdateManyWithoutPetsNestedInput
    publicacos?: PublicacoesUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUpdateManyWithoutPetsNestedInput
  }

  export type PetUncheckedUpdateWithoutExamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    img_perfil?: StringFieldUpdateOperationsInput | string
    vacinas?: VacinaUncheckedUpdateManyWithoutPetsNestedInput
    publicacos?: PublicacoesUncheckedUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUncheckedUpdateManyWithoutPetsNestedInput
  }

  export type PetCreateWithoutPublicacosInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    img_perfil: string
    user: UserCreateNestedOneWithoutPetsInput
    vacinas?: VacinaCreateNestedManyWithoutPetsInput
    exames?: ExameCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosCreateNestedManyWithoutPetsInput
  }

  export type PetUncheckedCreateWithoutPublicacosInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    user_id: string
    img_perfil: string
    vacinas?: VacinaUncheckedCreateNestedManyWithoutPetsInput
    exames?: ExameUncheckedCreateNestedManyWithoutPetInput
    agendamentos?: AgendamentosUncheckedCreateNestedManyWithoutPetsInput
  }

  export type PetCreateOrConnectWithoutPublicacosInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutPublicacosInput, PetUncheckedCreateWithoutPublicacosInput>
  }

  export type PetUpsertWithoutPublicacosInput = {
    update: XOR<PetUpdateWithoutPublicacosInput, PetUncheckedUpdateWithoutPublicacosInput>
    create: XOR<PetCreateWithoutPublicacosInput, PetUncheckedCreateWithoutPublicacosInput>
    where?: PetWhereInput
  }

  export type PetUpdateToOneWithWhereWithoutPublicacosInput = {
    where?: PetWhereInput
    data: XOR<PetUpdateWithoutPublicacosInput, PetUncheckedUpdateWithoutPublicacosInput>
  }

  export type PetUpdateWithoutPublicacosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPetsNestedInput
    vacinas?: VacinaUpdateManyWithoutPetsNestedInput
    exames?: ExameUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUpdateManyWithoutPetsNestedInput
  }

  export type PetUncheckedUpdateWithoutPublicacosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    img_perfil?: StringFieldUpdateOperationsInput | string
    vacinas?: VacinaUncheckedUpdateManyWithoutPetsNestedInput
    exames?: ExameUncheckedUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUncheckedUpdateManyWithoutPetsNestedInput
  }

  export type PetCreateWithoutAgendamentosInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    img_perfil: string
    user: UserCreateNestedOneWithoutPetsInput
    vacinas?: VacinaCreateNestedManyWithoutPetsInput
    exames?: ExameCreateNestedManyWithoutPetInput
    publicacos?: PublicacoesCreateNestedManyWithoutPetInput
  }

  export type PetUncheckedCreateWithoutAgendamentosInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    user_id: string
    img_perfil: string
    vacinas?: VacinaUncheckedCreateNestedManyWithoutPetsInput
    exames?: ExameUncheckedCreateNestedManyWithoutPetInput
    publicacos?: PublicacoesUncheckedCreateNestedManyWithoutPetInput
  }

  export type PetCreateOrConnectWithoutAgendamentosInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutAgendamentosInput, PetUncheckedCreateWithoutAgendamentosInput>
  }

  export type UserCreateWithoutUser_idInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    pets?: PetCreateNestedManyWithoutUserInput
    expo_token?: ExpoTokenCreateNestedManyWithoutUserInput
    vacinas?: VacinaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUser_idInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    pets?: PetUncheckedCreateNestedManyWithoutUserInput
    expo_token?: ExpoTokenUncheckedCreateNestedManyWithoutUserInput
    vacinas?: VacinaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUser_idInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser_idInput, UserUncheckedCreateWithoutUser_idInput>
  }

  export type HorariosCreateWithoutAgendamentosInput = {
    id?: string
    tipo: number
    sub_categoria?: string | null
    id_clinica: string
    data_servico: string
    horario_servico: string
    status: number
  }

  export type HorariosUncheckedCreateWithoutAgendamentosInput = {
    id?: string
    tipo: number
    sub_categoria?: string | null
    id_clinica: string
    data_servico: string
    horario_servico: string
    status: number
  }

  export type HorariosCreateOrConnectWithoutAgendamentosInput = {
    where: HorariosWhereUniqueInput
    create: XOR<HorariosCreateWithoutAgendamentosInput, HorariosUncheckedCreateWithoutAgendamentosInput>
  }

  export type EmpresaCreateWithoutAgendamentosInput = {
    id?: string
    cnpj: string
    nome: string
  }

  export type EmpresaUncheckedCreateWithoutAgendamentosInput = {
    id?: string
    cnpj: string
    nome: string
  }

  export type EmpresaCreateOrConnectWithoutAgendamentosInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutAgendamentosInput, EmpresaUncheckedCreateWithoutAgendamentosInput>
  }

  export type ServicosCreateWithoutAgendamentosInput = {
    id?: string
    nome: string
    tipo: number
    status: number
  }

  export type ServicosUncheckedCreateWithoutAgendamentosInput = {
    id?: string
    nome: string
    tipo: number
    status: number
  }

  export type ServicosCreateOrConnectWithoutAgendamentosInput = {
    where: ServicosWhereUniqueInput
    create: XOR<ServicosCreateWithoutAgendamentosInput, ServicosUncheckedCreateWithoutAgendamentosInput>
  }

  export type PetUpsertWithoutAgendamentosInput = {
    update: XOR<PetUpdateWithoutAgendamentosInput, PetUncheckedUpdateWithoutAgendamentosInput>
    create: XOR<PetCreateWithoutAgendamentosInput, PetUncheckedCreateWithoutAgendamentosInput>
    where?: PetWhereInput
  }

  export type PetUpdateToOneWithWhereWithoutAgendamentosInput = {
    where?: PetWhereInput
    data: XOR<PetUpdateWithoutAgendamentosInput, PetUncheckedUpdateWithoutAgendamentosInput>
  }

  export type PetUpdateWithoutAgendamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPetsNestedInput
    vacinas?: VacinaUpdateManyWithoutPetsNestedInput
    exames?: ExameUpdateManyWithoutPetNestedInput
    publicacos?: PublicacoesUpdateManyWithoutPetNestedInput
  }

  export type PetUncheckedUpdateWithoutAgendamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    img_perfil?: StringFieldUpdateOperationsInput | string
    vacinas?: VacinaUncheckedUpdateManyWithoutPetsNestedInput
    exames?: ExameUncheckedUpdateManyWithoutPetNestedInput
    publicacos?: PublicacoesUncheckedUpdateManyWithoutPetNestedInput
  }

  export type UserUpsertWithoutUser_idInput = {
    update: XOR<UserUpdateWithoutUser_idInput, UserUncheckedUpdateWithoutUser_idInput>
    create: XOR<UserCreateWithoutUser_idInput, UserUncheckedCreateWithoutUser_idInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUser_idInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUser_idInput, UserUncheckedUpdateWithoutUser_idInput>
  }

  export type UserUpdateWithoutUser_idInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    pets?: PetUpdateManyWithoutUserNestedInput
    expo_token?: ExpoTokenUpdateManyWithoutUserNestedInput
    vacinas?: VacinaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUser_idInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    pets?: PetUncheckedUpdateManyWithoutUserNestedInput
    expo_token?: ExpoTokenUncheckedUpdateManyWithoutUserNestedInput
    vacinas?: VacinaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HorariosUpsertWithoutAgendamentosInput = {
    update: XOR<HorariosUpdateWithoutAgendamentosInput, HorariosUncheckedUpdateWithoutAgendamentosInput>
    create: XOR<HorariosCreateWithoutAgendamentosInput, HorariosUncheckedCreateWithoutAgendamentosInput>
    where?: HorariosWhereInput
  }

  export type HorariosUpdateToOneWithWhereWithoutAgendamentosInput = {
    where?: HorariosWhereInput
    data: XOR<HorariosUpdateWithoutAgendamentosInput, HorariosUncheckedUpdateWithoutAgendamentosInput>
  }

  export type HorariosUpdateWithoutAgendamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    sub_categoria?: NullableStringFieldUpdateOperationsInput | string | null
    id_clinica?: StringFieldUpdateOperationsInput | string
    data_servico?: StringFieldUpdateOperationsInput | string
    horario_servico?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type HorariosUncheckedUpdateWithoutAgendamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    sub_categoria?: NullableStringFieldUpdateOperationsInput | string | null
    id_clinica?: StringFieldUpdateOperationsInput | string
    data_servico?: StringFieldUpdateOperationsInput | string
    horario_servico?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type EmpresaUpsertWithoutAgendamentosInput = {
    update: XOR<EmpresaUpdateWithoutAgendamentosInput, EmpresaUncheckedUpdateWithoutAgendamentosInput>
    create: XOR<EmpresaCreateWithoutAgendamentosInput, EmpresaUncheckedCreateWithoutAgendamentosInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutAgendamentosInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutAgendamentosInput, EmpresaUncheckedUpdateWithoutAgendamentosInput>
  }

  export type EmpresaUpdateWithoutAgendamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type EmpresaUncheckedUpdateWithoutAgendamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ServicosUpsertWithoutAgendamentosInput = {
    update: XOR<ServicosUpdateWithoutAgendamentosInput, ServicosUncheckedUpdateWithoutAgendamentosInput>
    create: XOR<ServicosCreateWithoutAgendamentosInput, ServicosUncheckedCreateWithoutAgendamentosInput>
    where?: ServicosWhereInput
  }

  export type ServicosUpdateToOneWithWhereWithoutAgendamentosInput = {
    where?: ServicosWhereInput
    data: XOR<ServicosUpdateWithoutAgendamentosInput, ServicosUncheckedUpdateWithoutAgendamentosInput>
  }

  export type ServicosUpdateWithoutAgendamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ServicosUncheckedUpdateWithoutAgendamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type AgendamentosCreateWithoutServicosInput = {
    id?: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
    pets: PetCreateNestedOneWithoutAgendamentosInput
    users: UserCreateNestedOneWithoutUser_idInput
    horarios: HorariosCreateNestedOneWithoutAgendamentosInput
    empresas: EmpresaCreateNestedOneWithoutAgendamentosInput
  }

  export type AgendamentosUncheckedCreateWithoutServicosInput = {
    id?: string
    pet_id: string
    id_horario: string
    id_empresa: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosCreateOrConnectWithoutServicosInput = {
    where: AgendamentosWhereUniqueInput
    create: XOR<AgendamentosCreateWithoutServicosInput, AgendamentosUncheckedCreateWithoutServicosInput>
  }

  export type AgendamentosCreateManyServicosInputEnvelope = {
    data: AgendamentosCreateManyServicosInput | AgendamentosCreateManyServicosInput[]
    skipDuplicates?: boolean
  }

  export type AgendamentosUpsertWithWhereUniqueWithoutServicosInput = {
    where: AgendamentosWhereUniqueInput
    update: XOR<AgendamentosUpdateWithoutServicosInput, AgendamentosUncheckedUpdateWithoutServicosInput>
    create: XOR<AgendamentosCreateWithoutServicosInput, AgendamentosUncheckedCreateWithoutServicosInput>
  }

  export type AgendamentosUpdateWithWhereUniqueWithoutServicosInput = {
    where: AgendamentosWhereUniqueInput
    data: XOR<AgendamentosUpdateWithoutServicosInput, AgendamentosUncheckedUpdateWithoutServicosInput>
  }

  export type AgendamentosUpdateManyWithWhereWithoutServicosInput = {
    where: AgendamentosScalarWhereInput
    data: XOR<AgendamentosUpdateManyMutationInput, AgendamentosUncheckedUpdateManyWithoutServicosInput>
  }

  export type AgendamentosCreateWithoutHorariosInput = {
    id?: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
    pets: PetCreateNestedOneWithoutAgendamentosInput
    users: UserCreateNestedOneWithoutUser_idInput
    empresas: EmpresaCreateNestedOneWithoutAgendamentosInput
    servicos: ServicosCreateNestedOneWithoutAgendamentosInput
  }

  export type AgendamentosUncheckedCreateWithoutHorariosInput = {
    id?: string
    pet_id: string
    id_empresa: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosCreateOrConnectWithoutHorariosInput = {
    where: AgendamentosWhereUniqueInput
    create: XOR<AgendamentosCreateWithoutHorariosInput, AgendamentosUncheckedCreateWithoutHorariosInput>
  }

  export type AgendamentosCreateManyHorariosInputEnvelope = {
    data: AgendamentosCreateManyHorariosInput | AgendamentosCreateManyHorariosInput[]
    skipDuplicates?: boolean
  }

  export type AgendamentosUpsertWithWhereUniqueWithoutHorariosInput = {
    where: AgendamentosWhereUniqueInput
    update: XOR<AgendamentosUpdateWithoutHorariosInput, AgendamentosUncheckedUpdateWithoutHorariosInput>
    create: XOR<AgendamentosCreateWithoutHorariosInput, AgendamentosUncheckedCreateWithoutHorariosInput>
  }

  export type AgendamentosUpdateWithWhereUniqueWithoutHorariosInput = {
    where: AgendamentosWhereUniqueInput
    data: XOR<AgendamentosUpdateWithoutHorariosInput, AgendamentosUncheckedUpdateWithoutHorariosInput>
  }

  export type AgendamentosUpdateManyWithWhereWithoutHorariosInput = {
    where: AgendamentosScalarWhereInput
    data: XOR<AgendamentosUpdateManyMutationInput, AgendamentosUncheckedUpdateManyWithoutHorariosInput>
  }

  export type AgendamentosCreateWithoutEmpresasInput = {
    id?: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
    pets: PetCreateNestedOneWithoutAgendamentosInput
    users: UserCreateNestedOneWithoutUser_idInput
    horarios: HorariosCreateNestedOneWithoutAgendamentosInput
    servicos: ServicosCreateNestedOneWithoutAgendamentosInput
  }

  export type AgendamentosUncheckedCreateWithoutEmpresasInput = {
    id?: string
    pet_id: string
    id_horario: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosCreateOrConnectWithoutEmpresasInput = {
    where: AgendamentosWhereUniqueInput
    create: XOR<AgendamentosCreateWithoutEmpresasInput, AgendamentosUncheckedCreateWithoutEmpresasInput>
  }

  export type AgendamentosCreateManyEmpresasInputEnvelope = {
    data: AgendamentosCreateManyEmpresasInput | AgendamentosCreateManyEmpresasInput[]
    skipDuplicates?: boolean
  }

  export type AgendamentosUpsertWithWhereUniqueWithoutEmpresasInput = {
    where: AgendamentosWhereUniqueInput
    update: XOR<AgendamentosUpdateWithoutEmpresasInput, AgendamentosUncheckedUpdateWithoutEmpresasInput>
    create: XOR<AgendamentosCreateWithoutEmpresasInput, AgendamentosUncheckedCreateWithoutEmpresasInput>
  }

  export type AgendamentosUpdateWithWhereUniqueWithoutEmpresasInput = {
    where: AgendamentosWhereUniqueInput
    data: XOR<AgendamentosUpdateWithoutEmpresasInput, AgendamentosUncheckedUpdateWithoutEmpresasInput>
  }

  export type AgendamentosUpdateManyWithWhereWithoutEmpresasInput = {
    where: AgendamentosScalarWhereInput
    data: XOR<AgendamentosUpdateManyMutationInput, AgendamentosUncheckedUpdateManyWithoutEmpresasInput>
  }

  export type UserCreateWithoutExpo_tokenInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    pets?: PetCreateNestedManyWithoutUserInput
    user_id?: AgendamentosCreateNestedManyWithoutUsersInput
    vacinas?: VacinaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExpo_tokenInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    bairro?: string | null
    cep?: string | null
    cidade?: string | null
    complemento?: string | null
    cpfcnpj?: string | null
    endereco?: string | null
    estado?: string | null
    numero?: string | null
    telefone?: string | null
    status?: string | null
    img_usuario?: string | null
    pets?: PetUncheckedCreateNestedManyWithoutUserInput
    user_id?: AgendamentosUncheckedCreateNestedManyWithoutUsersInput
    vacinas?: VacinaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExpo_tokenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExpo_tokenInput, UserUncheckedCreateWithoutExpo_tokenInput>
  }

  export type UserUpsertWithoutExpo_tokenInput = {
    update: XOR<UserUpdateWithoutExpo_tokenInput, UserUncheckedUpdateWithoutExpo_tokenInput>
    create: XOR<UserCreateWithoutExpo_tokenInput, UserUncheckedCreateWithoutExpo_tokenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExpo_tokenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExpo_tokenInput, UserUncheckedUpdateWithoutExpo_tokenInput>
  }

  export type UserUpdateWithoutExpo_tokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    pets?: PetUpdateManyWithoutUserNestedInput
    user_id?: AgendamentosUpdateManyWithoutUsersNestedInput
    vacinas?: VacinaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExpo_tokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cpfcnpj?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    img_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    pets?: PetUncheckedUpdateManyWithoutUserNestedInput
    user_id?: AgendamentosUncheckedUpdateManyWithoutUsersNestedInput
    vacinas?: VacinaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PetCreateManyUserInput = {
    id?: string
    name: string
    apelido: string
    data_nascimento?: Date | string | null
    especie: string
    idade: string
    meses: string
    raca: string
    chip: string
    sexo: string
    temperamento: string
    tamanho: string
    detalhes?: string | null
    img_perfil: string
  }

  export type ExpoTokenCreateManyUserInput = {
    id?: string
    token: string
    created_at?: Date | string | null
  }

  export type AgendamentosCreateManyUsersInput = {
    id?: string
    pet_id: string
    id_horario: string
    id_empresa: string
    id_servico: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type VacinaCreateManyUserInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    pet_id: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
  }

  export type PetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
    vacinas?: VacinaUpdateManyWithoutPetsNestedInput
    exames?: ExameUpdateManyWithoutPetNestedInput
    publicacos?: PublicacoesUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUpdateManyWithoutPetsNestedInput
  }

  export type PetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
    vacinas?: VacinaUncheckedUpdateManyWithoutPetsNestedInput
    exames?: ExameUncheckedUpdateManyWithoutPetNestedInput
    publicacos?: PublicacoesUncheckedUpdateManyWithoutPetNestedInput
    agendamentos?: AgendamentosUncheckedUpdateManyWithoutPetsNestedInput
  }

  export type PetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apelido?: StringFieldUpdateOperationsInput | string
    data_nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    especie?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    meses?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    chip?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    temperamento?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    detalhes?: NullableStringFieldUpdateOperationsInput | string | null
    img_perfil?: StringFieldUpdateOperationsInput | string
  }

  export type ExpoTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpoTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpoTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgendamentosUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    pets?: PetUpdateOneRequiredWithoutAgendamentosNestedInput
    horarios?: HorariosUpdateOneRequiredWithoutAgendamentosNestedInput
    empresas?: EmpresaUpdateOneRequiredWithoutAgendamentosNestedInput
    servicos?: ServicosUpdateOneRequiredWithoutAgendamentosNestedInput
  }

  export type AgendamentosUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type VacinaUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    pets?: PetUpdateOneRequiredWithoutVacinasNestedInput
  }

  export type VacinaUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type VacinaUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateManyCategoryInput = {
    id?: string
    name: string
    price: string
    description: string
    banner: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ProductUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: ItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: ItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ItemCreateManyProductInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id: string
  }

  export type ItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: StringFieldUpdateOperationsInput | string
  }

  export type ItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: StringFieldUpdateOperationsInput | string
  }

  export type ItemCreateManyOrderInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    product_id: string
  }

  export type ItemUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product?: ProductUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product_id?: StringFieldUpdateOperationsInput | string
  }

  export type ItemUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product_id?: StringFieldUpdateOperationsInput | string
  }

  export type VacinaCreateManyPetsInput = {
    id?: string
    data_vacinacao: string
    vacina: string
    clinica: string
    intervalo: string
    observacao: string
    user_id: string
    img_lote: string
    proxima_aplicacao?: string | null
    notificacoes_enviadas?: string
  }

  export type ExameCreateManyPetInput = {
    id?: string
    data_exame: string
    exame: string
    clinica: string
    observacao: string
    img_laudo: string
  }

  export type PublicacoesCreateManyPetInput = {
    id?: string
    conteudo: string
    img_blog: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type AgendamentosCreateManyPetsInput = {
    id?: string
    id_horario: string
    id_empresa: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type VacinaUpdateWithoutPetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutVacinasNestedInput
  }

  export type VacinaUncheckedUpdateWithoutPetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type VacinaUncheckedUpdateManyWithoutPetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_vacinacao?: StringFieldUpdateOperationsInput | string
    vacina?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    intervalo?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    img_lote?: StringFieldUpdateOperationsInput | string
    proxima_aplicacao?: NullableStringFieldUpdateOperationsInput | string | null
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type ExameUpdateWithoutPetInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_exame?: StringFieldUpdateOperationsInput | string
    exame?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_laudo?: StringFieldUpdateOperationsInput | string
  }

  export type ExameUncheckedUpdateWithoutPetInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_exame?: StringFieldUpdateOperationsInput | string
    exame?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_laudo?: StringFieldUpdateOperationsInput | string
  }

  export type ExameUncheckedUpdateManyWithoutPetInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_exame?: StringFieldUpdateOperationsInput | string
    exame?: StringFieldUpdateOperationsInput | string
    clinica?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    img_laudo?: StringFieldUpdateOperationsInput | string
  }

  export type PublicacoesUpdateWithoutPetInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    img_blog?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublicacoesUncheckedUpdateWithoutPetInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    img_blog?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublicacoesUncheckedUpdateManyWithoutPetInput = {
    id?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    img_blog?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgendamentosUpdateWithoutPetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateOneRequiredWithoutUser_idNestedInput
    horarios?: HorariosUpdateOneRequiredWithoutAgendamentosNestedInput
    empresas?: EmpresaUpdateOneRequiredWithoutAgendamentosNestedInput
    servicos?: ServicosUpdateOneRequiredWithoutAgendamentosNestedInput
  }

  export type AgendamentosUncheckedUpdateWithoutPetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosUncheckedUpdateManyWithoutPetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosCreateManyServicosInput = {
    id?: string
    pet_id: string
    id_horario: string
    id_empresa: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosUpdateWithoutServicosInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    pets?: PetUpdateOneRequiredWithoutAgendamentosNestedInput
    users?: UserUpdateOneRequiredWithoutUser_idNestedInput
    horarios?: HorariosUpdateOneRequiredWithoutAgendamentosNestedInput
    empresas?: EmpresaUpdateOneRequiredWithoutAgendamentosNestedInput
  }

  export type AgendamentosUncheckedUpdateWithoutServicosInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosUncheckedUpdateManyWithoutServicosInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosCreateManyHorariosInput = {
    id?: string
    pet_id: string
    id_empresa: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosUpdateWithoutHorariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    pets?: PetUpdateOneRequiredWithoutAgendamentosNestedInput
    users?: UserUpdateOneRequiredWithoutUser_idNestedInput
    empresas?: EmpresaUpdateOneRequiredWithoutAgendamentosNestedInput
    servicos?: ServicosUpdateOneRequiredWithoutAgendamentosNestedInput
  }

  export type AgendamentosUncheckedUpdateWithoutHorariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosUncheckedUpdateManyWithoutHorariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_empresa?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosCreateManyEmpresasInput = {
    id?: string
    pet_id: string
    id_horario: string
    id_servico: string
    user_id: string
    data_agendamento: string
    horario_agendamento: string
    status?: number
    notificacoes_enviadas?: string
  }

  export type AgendamentosUpdateWithoutEmpresasInput = {
    id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
    pets?: PetUpdateOneRequiredWithoutAgendamentosNestedInput
    users?: UserUpdateOneRequiredWithoutUser_idNestedInput
    horarios?: HorariosUpdateOneRequiredWithoutAgendamentosNestedInput
    servicos?: ServicosUpdateOneRequiredWithoutAgendamentosNestedInput
  }

  export type AgendamentosUncheckedUpdateWithoutEmpresasInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentosUncheckedUpdateManyWithoutEmpresasInput = {
    id?: StringFieldUpdateOperationsInput | string
    pet_id?: StringFieldUpdateOperationsInput | string
    id_horario?: StringFieldUpdateOperationsInput | string
    id_servico?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    data_agendamento?: StringFieldUpdateOperationsInput | string
    horario_agendamento?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    notificacoes_enviadas?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetCountOutputTypeDefaultArgs instead
     */
    export type PetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicosCountOutputTypeDefaultArgs instead
     */
    export type ServicosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HorariosCountOutputTypeDefaultArgs instead
     */
    export type HorariosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HorariosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmpresaCountOutputTypeDefaultArgs instead
     */
    export type EmpresaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmpresaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemDefaultArgs instead
     */
    export type ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetDefaultArgs instead
     */
    export type PetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CuriosidadeDefaultArgs instead
     */
    export type CuriosidadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CuriosidadeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VacinaDefaultArgs instead
     */
    export type VacinaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VacinaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExameDefaultArgs instead
     */
    export type ExameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublicacoesDefaultArgs instead
     */
    export type PublicacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublicacoesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgendamentosDefaultArgs instead
     */
    export type AgendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgendamentosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicosDefaultArgs instead
     */
    export type ServicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HorariosDefaultArgs instead
     */
    export type HorariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HorariosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmpresaDefaultArgs instead
     */
    export type EmpresaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmpresaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExpoTokenDefaultArgs instead
     */
    export type ExpoTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExpoTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClinicaDefaultArgs instead
     */
    export type ClinicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClinicaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}